[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Config.js",
    "content": "import process from 'node:process'\n\nconst defaults = {\n  client:   'mysql2',\n  host:     'localhost',\n  port :    3306,\n  pool_min: 2,\n  pool_max: 10,\n}\n\nconst client = process.env.DATABASE_CLIENT || defaults.client;\n\nconst connection = process.env.DATABASE_CONNECTION || {\n  host:     process.env.DATABASE_HOST || defaults.host,\n  port:     process.env.DATABASE_PORT || defaults.port,\n  database: process.env.DATABASE_NAME,\n  user:     process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  // filename: process.env.DATABASE_FILENAME,\n  // flags:    splitList(process.env.DATABASE_FLAGS),\n};\n\nconst pool = {\n  min: process.env.DB_POOL_MIN || defaults.pool_min,\n  max: process.env.DB_POOL_MAX || defaults.pool_max,\n};\n\nexport const Config = { client, connection, pool };\n\nexport default Config;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"client\": string, \"host\": string, \"port\": number, \"pool_min\": number, \"pool_max\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "client",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~client",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "connection",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~connection",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "pool",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~pool",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"min\": *, \"max\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "Config",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Config}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"client\": *, \"connection\": *, \"pool\": *}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/Constants.js",
    "content": "// engine parameters\nexport const databaseStringRegex = /^(\\w+):\\/\\/(?:(?:(\\w+)(?::(\\w+))?@)?(\\w+)(?::(\\d+))?\\/)?(\\w+)/;\nexport const databaseStringElements = {\n  engine:   1,\n  user:     2,\n  password: 3,\n  host:     4,\n  port:     5,\n  database: 6,\n};\nexport const databaseAliases = {\n  username: 'user',\n  pass:     'password',\n  hostname: 'host',\n  file:     'filename',\n};\n\n// table column configuration/validation\nexport const defaultIdColumn = 'id';\nexport const bitSplitter = /:/;\nexport const allColumns = '*';\nexport const whereTrue = 'true';\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "databaseStringRegex",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseStringRegex",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{databaseStringRegex}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "databaseStringElements",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseStringElements",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{databaseStringElements}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"engine\": number, \"user\": number, \"password\": number, \"host\": number, \"port\": number, \"database\": number}"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "databaseAliases",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseAliases",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{databaseAliases}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": string, \"pass\": string, \"hostname\": string, \"file\": string}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "defaultIdColumn",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~defaultIdColumn",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{defaultIdColumn}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "bitSplitter",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~bitSplitter",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{bitSplitter}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "allColumns",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~allColumns",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{allColumns}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "whereTrue",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~whereTrue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{whereTrue}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/Database.js",
    "content": "import Config from './Config.js'\nimport modelProxy from './Proxy/Model.js';\nimport Table from './Table.js';\nimport Tables from './Tables.js';\nimport Queries from './Queries.js';\nimport { engine } from './Engines.js';\nimport { invalid, missing } from './Utils/Error.js';\n\nconst defaults = {\n  tablesClass: Tables\n};\n\nexport class Database {\n  constructor(engine, params={ }) {\n    const config = { ...defaults, ...Config, ...params };\n    this.engine  = engine || missing('engine');\n    this.queries = new Queries(config);\n    this.tables  = config.tablesObject || new config.tablesClass(config.tables);\n    this.model   = modelProxy(this);\n    this.state   = {\n      table: { },\n    };\n  }\n\n  //-----------------------------------------------------------------------------\n  // Engine methods\n  //-----------------------------------------------------------------------------\n  acquire() {\n    return this.engine.acquire();\n  }\n  release(connection) {\n    this.engine.release(connection);\n  }\n  query(name) {\n    return this.queries.query(name);\n  }\n  run(query, params, options) {\n    return this.engine.run(this.query(query), params, options)\n  }\n  any(query, params, options) {\n    return this.engine.any(this.query(query), params, options)\n  }\n  all(query, params, options) {\n    return this.engine.all(this.query(query), params, options)\n  }\n  one(query, params, options) {\n    return this.engine.one(this.query(query), params, options)\n  }\n  async table(name) {\n    return this.state.table[name]\n      ||=  this.initTable(name);\n  }\n  hasTable(name) {\n    return this.tables.table(name);\n  }\n  initTable(name) {\n    const schema = this.hasTable(name) || invalid('table', name);\n    const tclass = schema.tableClass   || Table;\n    const topts  = schema.tableOptions || { };\n    schema.table ||= name;\n    return new tclass(this, { ...schema, ...topts });\n  }\n  quote(name) {\n    return this.engine.quote(name);\n  }\n  destroy() {\n    return this.engine.destroy();\n  }\n}\n\nexport const connect = async config => {\n  const e = await engine(config);\n  return new Database(e, config)\n}\n\n// export const database = connect;\n\nexport default Database\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Database.js",
    "static": true,
    "longname": "src/Database.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"tablesClass\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Database",
    "memberof": "src/Database.js",
    "static": true,
    "longname": "src/Database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Database}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#engine",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#queries",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "tables",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#tables",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "model",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#model",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "state",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"table\": *}"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "acquire",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#acquire",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "release",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#release",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "query",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#query",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "run",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#run",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "any",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#any",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "all",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#all",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "one",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#one",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "table",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Database.js~Database#table",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "hasTable",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#hasTable",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "initTable",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#initTable",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "quote",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#quote",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "connect",
    "memberof": "src/Database.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Database.js~connect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{connect}",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/Engine/Mysql.js",
    "content": "import mysql from 'mysql2/promise';\nimport Engine from '../Engine.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class MysqlEngine extends Engine {\n  configure(config) {\n    config.debugPrefix ||= 'MysqlEngine> ';\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debug(\"connect: \", this.database);\n    return mysql.createConnection(this.database);\n  }\n  async connected() {\n    this.debug(\"connected\");\n    return true;\n  }\n  async disconnect(connection) {\n    this.debug(\"disconnect\");\n    connection.destroy();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async run(sql, params, options) {\n    [params, options] = this.optionalParams(params, options);\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([result]) => result );\n  }\n  async any(sql, params, options) {\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([rows]) => rows[0] );\n  }\n  async all(sql, params, options) {\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([rows]) => rows );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    const keys = options.keys || [defaultIdColumn];\n    const id = keys[0];\n    result[0].changes ||= result[0].affectedRows || 0;\n    result[0].id      ||= result[0].insertId || null;\n    result[0][id]     ||= result[0].insertId || null;\n    return result;\n  }\n}\n\nexport default MysqlEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Mysql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "MysqlEngine",
    "memberof": "src/Engine/Mysql.js",
    "static": true,
    "longname": "src/Engine/Mysql.js~MysqlEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{MysqlEngine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/Engine/Postgres.js",
    "content": "import pg from 'pg';\nimport Engine from '../Engine.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class PostgresEngine extends Engine {\n  configure(config) {\n    config.debugPrefix ||= 'MysqlEngine> ';\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debug(\"connect: \", this.database);\n    const client = new pg.Client(this.database);\n    await client.connect();\n    return client;\n  }\n  async connected() {\n    this.debug(\"connected\");\n    return true;\n  }\n  async disconnect(client) {\n    this.debug(\"disconnect\");\n    client.end();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async execute(sql, params, options={}) {\n    this.debug(\"execute() \", sql);\n    const client = await this.acquire();\n    const result = await client.query(sql, params);\n    this.release(client);\n    return options.sanitizeResult\n      ? this.sanitizeResult(result, options)\n      : result;\n  }\n  async run(sql, params, options) {\n    [params, options] = this.optionalParams(params, options);\n    return this\n      .execute(sql, params, options)\n  }\n  async any(sql, params, options) {\n    return this\n      .execute(sql, params, options)\n      .then( ({rows}) => rows[0] );\n  }\n  async all(sql, params, options) {\n    return this\n      .execute(sql, params, options)\n      .then( ({rows}) => rows );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    // console.log('sanitizeResult() result: ', result);\n    // console.log('sanitizeResult() options: ', options);\n    result.changes ||= result.rowCount || 0;\n    if (result.command === 'INSERT' && result.rows?.length) {\n      const keys = options.keys || [defaultIdColumn];\n      keys.forEach(\n        key => result[key] ||= result.rows[0][key]\n      )\n      result.id ||= result[keys[0]];\n    }\n    return result;\n  }\n  formatPlaceholders(values) {\n    let n = 1;\n    return values.map(() => '$' + n++).join(', ');\n  }\n  formatColumnPlaceholder(column, n) {\n    return `${this.quote(column)}=$${n}`;\n  }\n  formatColumnPlaceholders(columns, joint=', ', n=1) {\n    return columns.map(\n      column => this.formatColumnPlaceholder(column, n++)\n    ).join(joint);\n  }\n  formatReturning(keys) {\n    return ' RETURNING ' + this.formatColumns(keys);\n  }\n}\n\nexport default PostgresEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Postgres.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "PostgresEngine",
    "memberof": "src/Engine/Postgres.js",
    "static": true,
    "longname": "src/Engine/Postgres.js~PostgresEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{PostgresEngine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#execute",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "formatPlaceholders",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "formatColumnPlaceholder",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatColumnPlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "formatColumnPlaceholders",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatColumnPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": ", ",
        "defaultValue": ", "
      },
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "formatReturning",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatReturning",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "src/Engine/Sqlite.js",
    "content": "import Database from 'better-sqlite3';\nimport Engine from '../Engine.js';\nimport { missing } from '../Utils/Error.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class SqliteEngine extends Engine {\n  configure(config) {\n    this.filename = config.database.filename || missing('filename');\n    this.options  = config.database.options  || { };\n\n    // better-sqlite3 is synchronous (because Sqlite serialises all\n    // requests anyway), so there's no need/benefit in using a pool\n    config.pool     ||= { };\n    config.pool.min ||= 1;\n    config.pool.max ||= 1;\n\n    config.debugPrefix ||= 'SqliteEngine> ';\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debug(\"connect\");\n    return new Database(this.filename, this.options);\n  }\n  async connected(db) {\n    this.debug(\"connected\");\n    return db.open;\n  }\n  async disconnect(db) {\n    this.debug(\"disconnect\");\n    db.close();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async run(sql, params=[], options) {\n    [params, options] = this.optionalParams(params, options);\n    return this.execute(sql, query => query.run(...params), options);\n  }\n  async any(sql, params=[], options) {\n    return this.execute(sql, query => query.get(...params), options);\n  }\n  async all(sql, params=[], options) {\n    return this.execute(sql, query => query.all(...params), options);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    result.changes ||= result.rowCount || 0;\n    const keys = options.keys || [defaultIdColumn];\n    const id = keys[0];\n    result[id] ||= result.lastInsertRowid;\n    result.id  ||= result.lastInsertRowid;\n    return result;\n  }\n}\n\nexport default SqliteEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Sqlite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "SqliteEngine",
    "memberof": "src/Engine/Sqlite.js",
    "static": true,
    "longname": "src/Engine/Sqlite.js~SqliteEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{SqliteEngine}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "filename",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#filename",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "options",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#options",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "db",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "db",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/Engine.js",
    "content": "import { Pool } from 'tarn';\nimport { missing, notImplementedInBaseClass, unexpectedRowCount } from \"./Utils/Error.js\";\nimport { format } from './Utils/Format.js';\nimport { hasValue, isObject, splitList } from '@abw/badger-utils';\nimport { addDebugMethod } from './Utils/Debug.js';\nimport { allColumns, whereTrue } from './Constants.js';\n\nconst notImplemented = notImplementedInBaseClass('Engine');\n\nconst poolDefaults = {\n  min: 2,\n  max: 10,\n  propagateCreateError: true\n}\n\nconst quoteChars = {\n  mysql:   '`',\n  default: '\"',\n};\n\nconst queries = {\n  insert: 'INSERT INTO <table> (<columns>) VALUES (<placeholders>) <returning>',\n  update: 'UPDATE <table> SET <set> WHERE <where>',\n  delete: 'DELETE FROM <table> WHERE <where>',\n  select: 'SELECT <columns> FROM <table> WHERE <where>',\n}\n\nexport class Engine {\n  constructor(config={}) {\n    this.engine    = config.engine   || missing('engine');\n    this.database  = config.database || missing('database');\n    this.config    = this.configure(config);\n    this.pool      = this.initPool(config.pool);\n    this.quoteChar = quoteChars[this.engine||'default'] || quoteChars.default;\n    this.escQuote  = `\\\\${this.quoteChar}`;\n    addDebugMethod(this, 'engine', config);\n  }\n  configure(config) {\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool configuration\n  //-----------------------------------------------------------------------------\n  initPool(options={}) {\n    return new Pool({\n      create: () => {\n        this.debug(\"create\");\n        return this.connect();\n      },\n      validate: connection => {\n        return this.connected(connection);\n      },\n      destroy: connection => {\n        this.debug(\"destroy\");\n        return this.disconnect(connection);\n      },\n      ...poolDefaults,\n      ...options\n    });\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods - must be implemented by subclasses\n  //-----------------------------------------------------------------------------\n  async connect() {\n    notImplemented(\"connect()\")\n  }\n  async connected() {\n    notImplemented(\"connected()\")\n  }\n  async disconnect() {\n    notImplemented(\"disconnect()\")\n  }\n\n  //-----------------------------------------------------------------------------\n  // Methods to acquire and release connections from the pool\n  //-----------------------------------------------------------------------------\n  async acquire() {\n    this.debug(\"acquire()\");\n    return this.pool.acquire().promise;\n  }\n  async release(connection) {\n    this.debug(\"release() \", connection);\n    await this.pool.release(connection);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Generic query methods\n  //-----------------------------------------------------------------------------\n  async execute(sql, action, options={}) {\n    this.debug(\"execute() \", sql);\n    const connection = await this.acquire();\n    const query      = await this.prepare(connection, sql);\n    const result     = await action(query);\n    this.release(connection);\n    return options.sanitizeResult\n      ? this.sanitizeResult(result, options)\n      : result;\n  }\n  async prepare(connection, sql) {\n    this.debug(\"prepare() \", sql);\n    return connection.prepare(sql);\n  }\n  optionalParams(params, options) {\n    if (isObject(params)) {\n      options = params;\n      params = [ ];\n    }\n    return [params, options];\n  }\n  async run() {\n    notImplemented('run()');\n  }\n  async any() {\n    notImplemented('any()');\n  }\n  async all() {\n    notImplemented('all()');\n  }\n  async one(sql, params, options) {\n    const rows = await this.all(sql, params, options);\n    if (rows.length === 1) {\n      return rows[0];\n    }\n    else {\n      unexpectedRowCount(rows.length);\n    }\n  }\n  //-----------------------------------------------------------------------------\n  // Specific queries\n  //-----------------------------------------------------------------------------\n  async insert(table, colnames, values, keys) {\n    const columns      = this.formatColumns(colnames);\n    const placeholders = this.formatPlaceholders(values);\n    const returning    = this.formatReturning(keys);\n    // console.log('columns: ', columns);\n    // console.log('returning: ', returning);\n    const sql          = format(queries.insert, { table, columns, placeholders, returning});\n    this.debug('insert: ', sql);\n    return this.run(sql, values, { keys, sanitizeResult: true });\n  }\n  async update(table, datacols, datavals, wherecols, wherevals) {\n    const set   = this.formatColumnPlaceholders(datacols);\n    const where = this.formatColumnPlaceholders(wherecols, ' AND ', datacols.length + 1) || whereTrue;\n    const sql   = format(queries.update, { table, set, where });\n    this.debug('update: ', sql);\n    return this.run(sql, [...datavals, ...wherevals], { sanitizeResult: true });\n  }\n  async delete(table, wherecols, wherevals) {\n    const where = this.formatColumnPlaceholders(wherecols, ' AND ') || whereTrue;\n    const sql   = format(queries.delete, { table, where });\n    this.debug('delete: ', sql);\n    return this.run(sql, wherevals, { sanitizeResult: true });\n  }\n  selectQuery(table, wherecols, options={}) {\n    const columns = this.formatColumns(options.columns);\n    const where   = this.formatColumnPlaceholders(wherecols, ' AND ') || whereTrue;\n    return format(queries.select, { table, columns, where });\n  }\n  async selectAll(table, wherecols, wherevals, options={}) {\n    const sql = this.selectQuery(table, wherecols, options);\n    this.debug('selectAll: ', sql);\n    return this.all(sql, wherevals);\n  }\n  async selectAny(table, wherecols, wherevals, options={}) {\n    const sql = this.selectQuery(table, wherecols, options);\n    this.debug('selectAny: ', sql);\n    return this.any(sql, wherevals);\n  }\n  async selectOne(table, wherecols, wherevals, options={}) {\n    const sql = this.selectQuery(table, wherecols, options);\n    this.debug('select: ', sql);\n    return this.one(sql, wherevals);\n  }\n  async select(...args) {\n    return this.selectAll(...args);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result) {\n    return result;\n  }\n  quote(name) {\n    return name\n      .split(/\\./)\n      .map(\n        part => this.quoteChar + part.replaceAll(this.quoteChar, this.escQuote) + this.quoteChar)\n      .join('.');\n  }\n  quoteTableColumn(table, column) {\n    // if the column already has a dot then we quote it as is,\n    // otherwise we explicitly add the table name\n    return column.match(/\\./)\n      ? this.quote(column)\n      : this.quote(`${table}.${column}`);\n  }\n  formatPlaceholders(values) {\n    return values.map(\n      () => '?'\n    ).join(', ');\n  }\n  formatColumnPlaceholder(column) {\n    return `${this.quote(column)}=?`;\n  }\n  formatColumnPlaceholders(columns, joint=', ') {\n    return columns.map(\n      column => this.formatColumnPlaceholder(column)\n    ).join(joint);\n  }\n  formatColumns(columns) {\n    return hasValue(columns)\n      ? splitList(columns)\n        .map(\n          column => this.quote(column)\n        )\n        .join(', ')\n      : allColumns;\n  }\n  formatReturning() {\n    return '';\n  }\n\n\n  //-----------------------------------------------------------------------------\n  // Cleanup\n  //-----------------------------------------------------------------------------\n  async destroy() {\n    this.debug(\"destroy() \");\n    await this.pool.destroy();\n  }\n}\n\nexport default Engine\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "notImplemented",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~notImplemented",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "poolDefaults",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~poolDefaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"min\": number, \"max\": number, \"propagateCreateError\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "quoteChars",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~quoteChars",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"mysql\": string, \"default\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "queries",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~queries",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"insert\": string, \"update\": string, \"delete\": string, \"select\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "Engine",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~Engine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Engine}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "database",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#database",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "config",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#config",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "pool",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#pool",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "quoteChar",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#quoteChar",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "escQuote",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#escQuote",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "initPool",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#initPool",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "acquire",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#acquire",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "release",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#release",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#execute",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#prepare",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "sql",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "optionalParams",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#optionalParams",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#run",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#any",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#all",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "one",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#one",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "insert",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#insert",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "colnames",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "update",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#update",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "datacols",
        "types": [
          "*"
        ]
      },
      {
        "name": "datavals",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#delete",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "selectQuery",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#selectQuery",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "selectAll",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectAll",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "selectAny",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectAny",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "selectOne",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectOne",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "select",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#select",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "quote",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#quote",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "quoteTableColumn",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#quoteTableColumn",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "column",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "formatPlaceholders",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "formatColumnPlaceholder",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumnPlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "formatColumnPlaceholders",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumnPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": ", ",
        "defaultValue": ", "
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "formatColumns",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumns",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "formatReturning",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatReturning",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/Engines.js",
    "content": "import { hasValue, isString, remove } from \"@abw/badger-utils\";\nimport { invalid, missing } from \"./Utils/Error.js\";\nimport { databaseAliases, databaseStringElements, databaseStringRegex } from \"./Constants.js\";\n\nlet Engines = { };\n\nexport const registerEngine = (name, module) => {\n  Engines[name] = async config => {\n    const engimp = await import(module);\n    const engcls = engimp.default;\n    return new engcls(config);\n  }\n}\n\nregisterEngine('sqlite',     './Engine/Sqlite.js');\nregisterEngine('mysql',      './Engine/Mysql.js');\nregisterEngine('postgres',   './Engine/Postgres.js');\nregisterEngine('postgresql', './Engine/Postgres.js');\n\n//-----------------------------------------------------------------------------\n// Engine constructor\n//-----------------------------------------------------------------------------\nexport const engine = async config => {\n  config = databaseConfig(config);\n  const engine = config.engine || missing('database.engine');\n  const handler = Engines[engine] || invalid('database.engine', engine);\n  return await handler(config);\n}\n\n//-----------------------------------------------------------------------------\n// Engine configuration\n//-----------------------------------------------------------------------------\n// databaseConfig(string)\n// databaseConfig({ database: { engine: xxx, ... } })\n//-----------------------------------------------------------------------------\nexport const databaseConfig = config => {\n  let database = config.database || missing('database');\n\n  if (isString(database)) {\n    // parse connection string\n    config.database = database = parseDatabaseString(database);\n  }\n\n  // extract the engine name to top level config\n  config.engine ||= database.engine || missing('database.engine');\n  delete database.engine;\n\n  // fixup any aliases\n  Object.entries(databaseAliases).map(\n    ([key, value]) => {\n      if (hasValue(database[key])) {\n        database[value] ||= remove(database, key);\n      }\n    }\n  )\n\n  return config;\n}\n\n//-----------------------------------------------------------------------------\n// Parse Database String\n//-----------------------------------------------------------------------------\n// parseDatabaseString('postgresql://user:password@host:port/database')\n// parseDatabaseString('sqlite://filename.db')\n// parseDatabaseString('sqlite://:memory:')\n// parseDatabaseString('sqlite:memory')\n// parseDatabaseString('driver://user:password@host:port/database')\n//                    1^^^^^   2^^^ 3^^^^^^^ 4^^^ 5^^^ 6^^^^^^^\n//-----------------------------------------------------------------------------\nexport const parseDatabaseString = string => {\n  let config = { };\n  let match;\n\n  if (string.match(/^postgres(ql)?:/)) {\n    // special case for postgres which can handle a connectionString\n    // NOTE: we accept postgresql: or postgres: as prefixes and Do The\n    // Right Thing\n    config.engine = 'postgres';\n    config.connectionString = string.replace(/^postgres:/, 'postgresql:');\n  }\n  else if ((match = string.match(/^sqlite:\\/\\/(.*)/))) {\n    // special case for sqlite which only has a filename (or \":memory:\")\n    config.engine   = 'sqlite';\n    config.filename = match[1];\n  }\n  else if (string === 'sqlite:memory') {\n    // special case for sqlite allowing 'sqlite:memory' as short for 'sqlite://:memory:'\n    config.engine   = 'sqlite';\n    config.filename = ':memory:';\n  }\n  else if ((match = string.match(databaseStringRegex))) {\n    // all other cases (e.g. mysql)\n    Object.entries(databaseStringElements).map(\n      ([key, index]) => {\n        const value = match[index];\n        if (hasValue(value)) {\n          config[key] = value;\n        }\n      }\n    );\n  }\n  else {\n    invalid('database', string);\n  }\n  return config;\n}\n\nexport default Engines;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engines.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "registerEngine",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Engines.js~registerEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{registerEngine}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "engine",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Engines.js~engine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{engine}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "databaseConfig",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Engines.js~databaseConfig",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{databaseConfig}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "parseDatabaseString",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Engines.js~parseDatabaseString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{parseDatabaseString}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "Engines",
    "memberof": "src/Engines.js",
    "static": true,
    "longname": "src/Engines.js~Engines",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "Engines",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/Operator/After.js",
    "content": "import Operator from '../Operator.js';\n\nexport class After extends Operator {\n  initOperator() {\n    this.key = 'after';\n  }\n}\n\nexport default After",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/After.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "After",
    "memberof": "src/Operator/After.js",
    "static": true,
    "longname": "src/Operator/After.js~After",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{After}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/After.js~After",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/After.js~After#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/After.js~After",
    "static": false,
    "longname": "src/Operator/After.js~After#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "src/Operator/Before.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Before extends Operator {\n  initOperator() {\n    this.key = 'before';\n  }\n}\n\nexport default Before",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Before.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "Before",
    "memberof": "src/Operator/Before.js",
    "static": true,
    "longname": "src/Operator/Before.js~Before",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Before}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Before.js~Before",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Before.js~Before#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Before.js~Before",
    "static": false,
    "longname": "src/Operator/Before.js~Before#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "src/Operator/Database.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Database extends Operator {\n  initOperator(args) {\n    this.database = args;\n  }\n  resolve(context) {\n    return {\n      database: this.database,\n      ...context,\n    }\n  }\n  dump() {\n    this.debug(\"From dump\")\n    return this.keyword + ' ' + this.table;\n  }\n}\n\nexport default Database",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "Database",
    "memberof": "src/Operator/Database.js",
    "static": true,
    "longname": "src/Operator/Database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Database}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "database",
    "memberof": "src/Operator/Database.js~Database",
    "static": false,
    "longname": "src/Operator/Database.js~Database#database",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"database\": *, ...context: Object}"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "dump",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#dump",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/Operator/From.js",
    "content": "import Operator from '../Operator.js';\n\nexport class From extends Operator {\n  initOperator() {\n    this.key = 'from';\n  }\n}\n\nexport default From",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/From.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "From",
    "memberof": "src/Operator/From.js",
    "static": true,
    "longname": "src/Operator/From.js~From",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{From}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/From.js~From",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/From.js~From#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/From.js~From",
    "static": false,
    "longname": "src/Operator/From.js~From#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "file",
    "name": "src/Operator/Group.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Group extends Operator {\n  initOperator() {\n    this.key = 'group';\n  }\n}\n\nexport default Group",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Group.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 190,
    "kind": "class",
    "name": "Group",
    "memberof": "src/Operator/Group.js",
    "static": true,
    "longname": "src/Operator/Group.js~Group",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Group}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Group.js~Group#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Group.js~Group",
    "static": false,
    "longname": "src/Operator/Group.js~Group#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "file",
    "name": "src/Operator/Having.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Having extends Operator {\n  initOperator() {\n    this.key = 'having';\n  }\n}\n\nexport default Having",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Having.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 194,
    "kind": "class",
    "name": "Having",
    "memberof": "src/Operator/Having.js",
    "static": true,
    "longname": "src/Operator/Having.js~Having",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Having}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Having.js~Having",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Having.js~Having#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Having.js~Having",
    "static": false,
    "longname": "src/Operator/Having.js~Having#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/Operator/Join.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Join extends Operator {\n  initOperator() {\n    this.key = 'join';\n  }\n}\n\nexport default Join",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Join.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "Join",
    "memberof": "src/Operator/Join.js",
    "static": true,
    "longname": "src/Operator/Join.js~Join",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Join}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Join.js~Join#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Join.js~Join",
    "static": false,
    "longname": "src/Operator/Join.js~Join#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "file",
    "name": "src/Operator/Order.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Order extends Operator {\n  initOperator() {\n    this.key = 'order';\n  }\n}\n\nexport default Order",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Order.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 202,
    "kind": "class",
    "name": "Order",
    "memberof": "src/Operator/Order.js",
    "static": true,
    "longname": "src/Operator/Order.js~Order",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Order.js~Order",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Order.js~Order#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Order.js~Order",
    "static": false,
    "longname": "src/Operator/Order.js~Order#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "src/Operator/Select.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Select extends Operator {\n  initOperator() {\n    this.key = 'select';\n  }\n}\n\nexport default Select",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Select.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "Select",
    "memberof": "src/Operator/Select.js",
    "static": true,
    "longname": "src/Operator/Select.js~Select",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Select}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Select.js~Select",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Select.js~Select#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Select.js~Select",
    "static": false,
    "longname": "src/Operator/Select.js~Select#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/Operator/Where.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Where extends Operator {\n  initOperator() {\n    this.key = 'where';\n  }\n}\n\nexport default Where",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Where.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "class",
    "name": "Where",
    "memberof": "src/Operator/Where.js",
    "static": true,
    "longname": "src/Operator/Where.js~Where",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Where}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Where.js~Where",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Where.js~Where#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Where.js~Where",
    "static": false,
    "longname": "src/Operator/Where.js~Where#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/Operator.js",
    "content": "// work in progress / experiment\nimport { addDebug } from \"@abw/badger\";\nimport { hasValue, objMap } from \"@abw/badger-utils\";\n\nconst defaultContext = () => ({\n  after:   [ ],\n  before:  [ ],\n  from:    [ ],\n  group:   [ ],\n  having:  [ ],\n  join:    [ ],\n  order:   [ ],\n  select:  [ ],\n  where:   [ ],\n  unknown: [ ],\n});\n\n// Each of the parts of a select query in order.  The first entry\n// is the opening keyword, the second is the text used to join\n// multiple values, e.g. { where: ['a=1', 'b=2'] } is expanded to\n// WHERE a=1 AND b=2.  Note that the entries must have whitespace\n// where applicable, e.g. after the opening keyword, e.g. 'WHERE ',\n// and around joining keywords/syntax, e.g. ' AND '\nconst parts = {\n  before:  ['',          \"\\n\"     ],\n  select:  ['SELECT ',   ', '     ],\n  from:    ['FROM ',     ', '     ],\n  join:    ['JOIN ',     \"\\nJOIN \"],\n  where:   ['WHERE ',    ' AND '  ],\n  group:   ['GROUP BY ', ', '     ],\n  having:  ['HAVING ',   ' AND '  ],\n  order:   ['ORDER BY ', ', '     ],\n  after:   ['',          \"\\n\"     ],\n};\n\nexport class Operator {\n  constructor(factory, parent, ...args) {\n    this.factory = factory;\n    this.parent  = parent;\n    this.args    = args;\n    this.key     = 'unknown';\n    this.initOperator(...args);\n\n    // debugging\n    addDebug(this, false, 'Operator > ', 'red');\n    this.debug(\"parent: \", parent?.constructor.name);\n    this.debug(\"args: \", args);\n  }\n  initOperator() {\n    // stub for subclasses\n  }\n  resolveChain() {\n    return this.resolve(\n      this.parent\n        ? this.parent.resolveChain()\n        : defaultContext()\n    );\n  }\n  resolve(context) {\n    const key = this.key;\n    return {\n      ...context,\n      [key]: [...context[key], ...this.args]\n    }\n  }\n  sqlFragments(context=this.resolveChain()) {\n    return objMap(\n      context,\n      (value, key) => {\n        const part = parts[key];\n        return part && value.length\n          ? part[0] + value.join(part[1])\n          : null;\n      }\n    )\n  }\n  sql() {\n    const frags = this.sqlFragments();\n\n    return Object.keys(parts)\n      .map( part => frags[part] )\n      .filter( i => hasValue(i) )\n      .join(\"\\n\");\n  }\n}\n\nexport default Operator",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "defaultContext",
    "memberof": "src/Operator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Operator.js~defaultContext",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "parts",
    "memberof": "src/Operator.js",
    "static": true,
    "longname": "src/Operator.js~parts",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"before\": *, \"select\": *, \"from\": *, \"join\": *, \"where\": *, \"group\": *, \"having\": *, \"order\": *, \"after\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "Operator",
    "memberof": "src/Operator.js",
    "static": true,
    "longname": "src/Operator.js~Operator",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Operator}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "factory",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#factory",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "parent",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#parent",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "args",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#args",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#key",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "resolveChain",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#resolveChain",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...context: Object, \"key\": *}"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "sqlFragments",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#sqlFragments",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "sql",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#sql",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/Operators.js",
    "content": "// work in progress / experiment\n\nimport After     from './Operator/After.js';\nimport Before    from './Operator/Before.js';\nimport From      from './Operator/From.js';\nimport Group     from './Operator/Group.js';\nimport Having    from './Operator/Having.js';\nimport Join      from './Operator/Join.js';\nimport Order     from './Operator/Order.js';\nimport Select    from './Operator/Select.js';\nimport Where     from './Operator/Where.js';\n\nexport const operators = {\n  after:     After,\n  before:    Before,\n  from:      From,\n  group:     Group,\n  groupBy:   Group,\n  having:    Having,\n  join:      Join,\n  order:     Order,\n  orderBy:   Order,\n  select:    Select,\n  where:     Where,\n}\n\nexport const factory = (parent, type, ...args) => {\n  // console.log('factory [%s] => ', type);\n  return new operators[type](factory, parent, ...args);\n}\n\nexport default factory;",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "operators",
    "memberof": "src/Operators.js",
    "static": true,
    "longname": "src/Operators.js~operators",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{operators}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"after\": *, \"before\": *, \"from\": *, \"group\": *, \"groupBy\": *, \"having\": *, \"join\": *, \"order\": *, \"orderBy\": *, \"select\": *, \"where\": *}"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "factory",
    "memberof": "src/Operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Operators.js~factory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{factory}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/Proxy/Model.js",
    "content": "import { fail } from \"@abw/badger-utils\";\n\nexport const modelProxy = database =>\n  new Proxy(\n    database,\n    {\n      get(target, prop) {\n        if (target.hasTable(prop)) {\n          return target.table(prop);\n        }\n        return target[prop]\n          || fail(\"Invalid table specified: \", prop);\n      }\n    }\n  );\n\nexport default modelProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "modelProxy",
    "memberof": "src/Proxy/Model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Model.js~modelProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{modelProxy}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "file",
    "name": "src/Proxy/Operator.js",
    "content": "import { operators } from \"../Operators.js\";\n\nexport const operatorProxy = parent =>\n  new Proxy(\n    parent,\n    {\n      get(target, prop) {\n        // console.log('operatorProxy %s', prop);\n        if (operators[prop]) {\n          return (\n            (...args) => operatorProxy(target.factory(parent, prop, ...args))\n          ).bind(target);\n        }\n        else {\n          return target[prop];\n        }\n      }\n    }\n  );\n\nexport default operatorProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Operator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "operatorProxy",
    "memberof": "src/Proxy/Operator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Operator.js~operatorProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{operatorProxy}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/Proxy/Record.js",
    "content": "export const recordProxy = record =>\n  new Proxy(\n    record,\n    {\n\n      get(target, prop) {\n        // console.log('recordProxy get(%s) on ', prop, target);\n        if (target.schema.allColumns[prop]) {\n          // console.log('recordProxy column: ', prop);\n          return target.data[prop];\n        }\n        else if (target.schema.relations?.[prop]) {\n          // console.log('recordProxy relation: ', prop);\n          return target.relation(prop);\n        }\n        //else if (prop === 'then') {\n        //  console.log('recordProxy.then');\n        //  return (\n        //    fn => recordProxy(target.then(fn))\n        //  ).bind(target)\n        //}\n        return target[prop];\n      }\n    }\n  );\n\nexport default recordProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "recordProxy",
    "memberof": "src/Proxy/Record.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Record.js~recordProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{recordProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/Proxy/Row.js",
    "content": "export const rowProxy = table => query =>\n  new Proxy(\n    query,\n    {\n      get(target, prop) {\n        if (prop === 'record') {\n          return () => table.record(...arguments);\n        }\n        else if (prop === 'then') {\n          return (\n            fn => table.rowProxy(target.then(fn))\n          ).bind(target)\n        }\n        return target[prop];\n      }\n    }\n  );\n\nexport default rowProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Row.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "rowProxy",
    "memberof": "src/Proxy/Row.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Row.js~rowProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{rowProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/Proxy/Rows.js",
    "content": "export const rowsProxy = table => query =>\n  new Proxy(\n    query,\n    {\n      get(target, prop) {\n        if (prop === 'records') {\n          return () => table.records(...arguments);\n        }\n        else if (prop === 'then') {\n          return (\n            fn => table.rowsProxy(target.then(fn))\n          ).bind(target)\n        }\n        return target[prop];\n      }\n    }\n  );\n\nexport default rowsProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Rows.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "rowsProxy",
    "memberof": "src/Proxy/Rows.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Rows.js~rowsProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{rowsProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/Queries.js",
    "content": "import { fail } from \"@abw/badger-utils\";\nimport { addDebugMethod } from \"./Utils/Debug.js\";\n\nconst defaults = {\n  maxExpansion: 16,\n  fragments: { },\n  queries:  { }\n};\n\nexport class Queries {\n  constructor(schema) {\n    const config = this.config = { ...defaults, ...schema };\n    //this.fragments = schema.fragments || { };\n    //this.queries = schema.queries || { };\n    //this.maxExpansion = schema.maxExpansion || defaults.maxExpansion;\n    addDebugMethod(this, 'queries', config);\n  }\n  query(name) {\n    // if the name is a single word then it must be a named query, otherwise\n    // we assume it's an SQL query possibly with embedded fragments.\n    return this.expandFragments(\n      name.match(/^\\w+$/)\n        ? this.config.queries[name] || fail(\"Invalid query specified: \", name)\n        : name\n    );\n  }\n  expandFragments(query) {\n    const fragments = this.config.fragments;\n    let sql = query;\n    let max = this.config.maxExpansion;\n    let runaway = 0;\n    let expanded = [ ];\n    this.debug(\"Expanding fragments: \", sql);\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let replaced = false;\n      sql = sql.replace(\n        /<(\\w+?)>/g,\n        (match, word) => {\n          replaced = true;\n          expanded.push(word);\n          return fragments[word] || fail(\"Invalid fragment in SQL expansion: <\", word, \">\");\n        }\n      );\n      if (replaced) {\n        this.debug(\"Replaced: \", sql);\n      }\n      else {\n        this.debug(\"No more replacements: \", sql);\n        break;\n      }\n      if (++runaway >= max) {\n        fail(\n          \"Maximum SQL expansion limit (maxExpansion=\", max, \") exceeded: \",\n          expanded.join(' -> ', )\n        )\n      }\n    }\n    return sql;\n  }\n}\n\nexport const queries = (schema) =>\n  new Queries(schema)\n\nexport default Queries",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Queries.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Queries.js",
    "static": true,
    "longname": "src/Queries.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"maxExpansion\": number, \"fragments\": *, \"queries\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "class",
    "name": "Queries",
    "memberof": "src/Queries.js",
    "static": true,
    "longname": "src/Queries.js~Queries",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Queries}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 243,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "query",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#query",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "expandFragments",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#expandFragments",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "queries",
    "memberof": "src/Queries.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Queries.js~queries",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{queries}",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "src/Query.js",
    "content": "import { fail } from \"@abw/badger-utils\";\nimport { notImplementedInBaseClass } from \"./Utils.js\";\n\nconst notImplemented = notImplementedInBaseClass('Query');\n\nexport class Query {\n  async execute() {\n    notImplemented(\"execute()\")\n  }\n  async all() {\n    notImplemented(\"all()\")\n  }\n  async any() {\n    notImplemented(\"any()\")\n  }\n  async one(params) {\n    const rows = await this.all(params);\n    if (rows.length === 1) {\n      return rows[0];\n    }\n    else if (rows.length === 0) {\n      fail(\"No rows returned when one was expected\");\n    }\n    else {\n      fail(`${rows.length} rows returned when one was expected`);\n    }\n  }\n}\n\nexport default Query",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "notImplemented",
    "memberof": "src/Query.js",
    "static": true,
    "longname": "src/Query.js~notImplemented",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "Query",
    "memberof": "src/Query.js",
    "static": true,
    "longname": "src/Query.js~Query",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Query}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#execute",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "all",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#all",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "any",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#any",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "one",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#one",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/Record.js",
    "content": "import { addDebug } from \"@abw/badger\";\nimport { fail } from \"@abw/badger-utils\";\nimport relations from \"./Relation/index.js\";\n\nexport class Record {\n  constructor(table, data, options={}) {\n    this.table     = table;\n    this.schema    = table.schema;\n    this.database  = table.database;\n    this.data      = data;\n    this.relations = { };\n    addDebug(this, options.debug, options.debugPrefix || `<${this.schema.table}> record: `, options.debugColor);\n  }\n  update(set) {\n    const where = this.schema.identity(this.data);\n    return this.table.update(set, where).then(\n      rows => {\n        this.data = rows[0];\n        return this;\n      }\n    )\n  }\n  relation(name) {\n    this.debug('relation(%s)', name);\n    return this.relations[name]\n      ||=  this.initRelation(name);\n  }\n  initRelation(name) {\n    this.debug('initRelation(%s)', name);\n    const relation = this.schema.relations[name] || fail(\"Invalid relation specified: \", name);\n    const rfunc    = relations[relation.type] || fail(\"Invalid relation type: \", relation.type);\n    relation.name ||= name;\n    return rfunc(this, relation);\n  }\n}\n\nexport const record = (table, data, options) =>\n  new Record(table, data, options)\n\nexport default Record;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "class",
    "name": "Record",
    "memberof": "src/Record.js",
    "static": true,
    "longname": "src/Record.js~Record",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Record}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "table",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#table",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "schema",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#schema",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "database",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#database",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "data",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#data",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "relations",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#relations",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "update",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#update",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "relation",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#relation",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "initRelation",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#initRelation",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "record",
    "memberof": "src/Record.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Record.js~record",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{record}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/Relation/many.js",
    "content": "export const many = (record, spec={}) => {\n  const lkey  = spec.localKey  || spec.local_key;\n  const rkey  = spec.remoteKey || spec.remote_key;\n  const where = { [rkey]: record.data[lkey] };\n  if (spec.debug) {\n    console.log('many() relation: ', spec);\n    console.log('many() relation table: ', spec.table);\n    console.log('many() relation where: ', where);\n  }\n  return record.database.table(spec.table).fetchRows(where).records();\n}\n\nexport default many",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Relation/many.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "function",
    "name": "many",
    "memberof": "src/Relation/many.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Relation/many.js~many",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{many}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      },
      {
        "name": "spec",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/Relation/one.js",
    "content": "export const one = (record, spec={}) => {\n  const lkey  = spec.localKey  || spec.local_key;\n  const rkey  = spec.remoteKey || spec.remote_key;\n  const where = { [rkey]: record.data[lkey] };\n  if (spec.debug) {\n    console.log('one() relation: ', spec);\n    console.log('one() relation table: ', spec.table);\n    console.log('one() relation where: ', where);\n  }\n  return record.database.table(spec.table).fetchRow(where).record();\n}\n\nexport default one",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Relation/one.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "one",
    "memberof": "src/Relation/one.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Relation/one.js~one",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{one}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      },
      {
        "name": "spec",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/Schema.js",
    "content": "import Queries from \"./Queries.js\";\nimport { hasValue, isString, splitList, splitHash, fail, objMap, isArray } from \"@abw/badger-utils\";\nimport { addDebug } from \"@abw/badger\";\n\nconst DEFAULT_ID = 'id';\nconst COLUMN_SET_PREFIX = /^(@|\\.\\.\\.)/;\n\nexport class Schema {\n  constructor(database, schema) {\n    this.database       = database || fail(\"No database specified\");\n    this.table          = schema.table || fail(\"No table name specified\");\n    this.relations      = schema.relations || { };\n    this.prepareColumns(schema);\n    this.prepareKeys(schema);\n    this.prepareColumnSets(schema);\n    this.prepareFragments(schema);\n    this.queries = new Queries({\n      queries:   schema.queries,\n      fragments: this.fragments\n    });\n    // TODO: column sets for select, update, etc.\n\n    addDebug(this, schema.debug, schema.debugPrefix || 'Schema', schema.debugColor);\n    this.debug('columnIndex: ', this.columnIndex);\n    this.debug('fragments: ', this.fragments);\n  }\n  prepareColumns(schema) {\n    const table      = schema.table;\n    const columns    = schema.columns;\n    const index      = splitHash(columns, () => ({ }))\n    this.columnIndex = objMap(\n      index,\n      (value, key) => {\n        // column name can be defined in column spec as 'column' in case\n        // the database column name doesn't match the name you want to use\n        const column = value.column || (value.column = key);\n        // tableColumn is the full \"table.column\"\n        value.tableColumn = table + '.' + column;\n        return value;\n      }\n    )\n    this.columnNames    = Object.keys(this.columnIndex);\n    this.virtualColumns = schema.virtualColumns || { };\n    this.allColumns     = {\n      // ...splitHash(this.columnNames),\n      // ...splitHash(Object.keys(this.virtualColumns))\n      ...this.columnIndex,\n      ...this.virtualColumns\n    };\n  }\n  prepareColumnSets(schema) {\n    const index = splitHash(schema.columnSets, () => ({ }))\n    this.columnSets = objMap(\n      index,\n      (spec) => {\n        const basis   = (isString(spec) || isArray(spec)) ? splitList(spec) : this.columnNames;\n        const include = splitList(spec.include);\n        const exclude = splitHash(spec.exclude);\n        const result = [...basis, ...include]\n          .filter( column => ! exclude[column] );\n        return result;\n      }\n    )\n  }\n  prepareKeys(schema) {\n    this.keys = splitList(schema.keys);\n    if (schema.id) {\n      this.id = schema.id;\n      this.keys.unshift(this.id);\n    }\n    else if (this.keys.length === 0) {\n      this.id = DEFAULT_ID;\n      this.keys.unshift(this.id);\n    }\n    this.keyIndex = splitHash(this.keys);\n  }\n  prepareFragments(schema) {\n    const quote     = this.database.quote.bind(this.database);\n    const fragments = schema.fragments || { };\n    const vcolumns  = Object.entries(this.virtualColumns).reduce(\n      (result, [name, defn]) => {\n        result[name] = `${defn} as ${name}`;\n        return result;\n      },\n      { }\n    );\n    this.fragments = {\n      table:    quote(this.table),\n      columns:  this.columnNames.map(quote).join(', '),\n      tcolumns: this.columnNames.map( n => quote(this.columnIndex[n].tableColumn) ).join(', '),\n      ...vcolumns,\n      ...fragments\n    };\n  }\n  query(name) {\n    return this.queries.query(name);\n  }\n\n  // TODO: refactor remaining methods\n  column(name) {\n    return this.columnIndex[name]\n      ? this.columnIndex[name].tableColumn\n      : this.virtualColumns[name]\n        ? this.database.raw(`${this.virtualColumns[name]} as ${name}`)\n        : fail('Invalid column specified: ', name);\n  }\n  columnSet(name) {\n    return this.columnSets[name]\n      || fail('Invalid columnSet specified: ', name);\n  }\n  defaultColumns() {\n    return this.columnSets.default\n      || this.columns;\n  }\n  columns(names) {\n    return hasValue(names)\n      ? this.resolveColumns(names)\n      : this.defaultColumns().map( name => this.column(name) );\n  }\n  resolveColumns(names) {\n    const list = splitList(names);\n    let cols = [ ];\n    list.forEach(\n      name => {\n        this.debug(\"resolveColumns(%s) / %s\", names, name);\n        if (isString(name)) {\n          if (name.match(COLUMN_SET_PREFIX)) {\n            this.debug(\"%s is a columnSet %s\", name, name.replace(COLUMN_SET_PREFIX, ''));\n            cols.push(\n              ...this.columnSet(name.replace(COLUMN_SET_PREFIX, ''))\n                .map( name => this.column(name) )\n            );\n          }\n          else {\n            this.debug(\"%s is a column\", name);\n            cols.push(this.column(name));\n          }\n        }\n        else {\n          fail(\"resolveColumns() can only currently resolve strings\");\n        }\n      }\n    )\n    this.debug(\"resolveColumns(%s) => \", names, cols)\n    return cols;\n  }\n  identity(data) {\n    return this.keys.reduce(\n      (result, key) => {\n        result[key] = data[key]\n        return result\n      },\n      {}\n    );\n  }\n}\n\nexport const schema = (database, schema) =>\n  new Schema(database, schema);\n\nexport default Schema\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "DEFAULT_ID",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~DEFAULT_ID",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "COLUMN_SET_PREFIX",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~COLUMN_SET_PREFIX",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "Schema",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~Schema",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Schema}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "database",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#database",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "table",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#table",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "relations",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#relations",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#queries",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "prepareColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareColumns",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "columnIndex",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "columnNames",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnNames",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "virtualColumns",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#virtualColumns",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "allColumns",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#allColumns",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "prepareColumnSets",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareColumnSets",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "columnSets",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnSets",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "prepareKeys",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareKeys",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "keys",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#keys",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "id",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#id",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "keyIndex",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#keyIndex",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "prepareFragments",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareFragments",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "fragments",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#fragments",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "{\"table\": *, \"columns\": *, \"tcolumns\": *, ...vcolumns: Object, ...fragments: Object}"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "query",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#query",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "column",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#column",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "columnSet",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#columnSet",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "defaultColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#defaultColumns",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "columns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#columns",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "resolveColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#resolveColumns",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "identity",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#identity",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "schema",
    "memberof": "src/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Schema.js~schema",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{schema}",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "file",
    "name": "src/Table.js",
    "content": "import recordProxy from \"./Proxy/Record.js\";\nimport rowProxy from \"./Proxy/Row.js\";\nimport rowsProxy from \"./Proxy/Rows.js\";\nimport Record from \"./Record.js\";\nimport Queries from \"./Queries.js\";\n// import Schema from \"./Schema.js\";\nimport { fail, hasValue, isArray, noValue, splitList } from \"@abw/badger-utils\";\nimport { prepareColumns, prepareKeys } from \"./Utils/Columns.js\";\nimport { throwColumnValidationError } from \"./Utils/Error.js\";\nimport { addDebugMethod } from \"./Utils/Debug.js\";\n\nexport class Table {\n  constructor(database, schema) {\n    this.database      = database || fail(\"No database specified\");\n    this.engine        = database.engine;\n    //this.schema        = new Schema(database, schema)\n    this.table         = schema.table;\n    this.columns       = prepareColumns(schema);\n    this.readonly      = Object.keys(this.columns).filter( key => this.columns[key].readonly );\n    this.required      = Object.keys(this.columns).filter( key => this.columns[key].required );\n    this.keys          = prepareKeys(schema, this.columns);\n    this.id            = schema.id;\n    this.recordClass   = schema.recordClass || Record;\n    this.recordOptions = schema.recordOptions;\n    this.rowProxy      = rowProxy(this);\n    this.rowsProxy     = rowsProxy(this);\n    this.fragments     = this.prepareFragments(schema);\n    this.queries       = new Queries({ ...schema, debugPrefix: `Queries ${this.table}> ` });\n    addDebugMethod(this, 'table', { debugPrefix: `Table ${this.table}> ` }, schema);\n  }\n  prepareFragments(schema) {\n    const quote       = this.database.quote.bind(this.database);\n    const fragments   = schema.fragments ||= { };\n    fragments.table   = quote(this.table);\n    fragments.columns = Object.values(this.columns).map(\n      spec => quote(spec.tableColumn)\n    ).join(', ');\n    return fragments;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Column validation\n  //-----------------------------------------------------------------------------\n  checkColumnNames(names) {\n    const table = this.table;\n    splitList(names).forEach(\n      column => this.columns[column]\n          || throwColumnValidationError('unknown', { column, table })\n    )\n  }\n  checkColumns(data={}, cols=[], vals=[], test={}) {\n    const table = this.table;\n    // check that all the values supplied correspond to valid columns\n    Object.keys(data).forEach(\n      column => {\n        const spec = this.columns[column]\n          || throwColumnValidationError('unknown', { column, table });\n        if (test.writable && spec.readonly) {\n          throwColumnValidationError('readonly', { column, table });\n        }\n        cols.push(spec.column);\n        vals.push(data[column])\n      }\n    )\n    return [cols, vals];\n  }\n  checkWritableColumns(data, cols=[], vals=[]) {\n    // check that all the values supplied correspond to valid columns that are not readonly\n    return this.checkColumns(data, cols, vals, { writable: true })\n  }\n  checkRequiredColumns(data) {\n    const table = this.table;\n    this.required.forEach(\n      column => {\n        if (noValue(data[column])) {\n          throwColumnValidationError('required', { column, table });\n        }\n      }\n    );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Engine methods\n  //-----------------------------------------------------------------------------\n  query(name) {\n    return this.queries.query(name);\n  }\n  run(query, params, options) {\n    return this.engine.run(this.query(query), params, options)\n  }\n  any(query, params, options) {\n    return this.engine.any(this.query(query), params, options)\n  }\n  all(query, params, options) {\n    return this.engine.all(this.query(query), params, options)\n  }\n  one(query, params, options) {\n    return this.engine.one(this.query(query), params, options)\n  }\n\n  //-----------------------------------------------------------------------------\n  // Basic queries - insert\n  //-----------------------------------------------------------------------------\n  async insert(data, options) {\n    return isArray(data, options)\n      ? this.insertAll(data, options)\n      : this.insertOne(data, options)\n  }\n  async insertOne(data, options={}) {\n    this.debug(\"insertOne: \", data);\n    const [cols, vals] = this.checkWritableColumns(data);\n    this.checkRequiredColumns(data);\n    const insert = await this.engine.insert(this.table, cols, vals, this.keys);\n\n    // the reload option can be set false to prevent a reload\n    if (hasValue(options.reload) && ! options.reload) {\n      return insert;\n    }\n\n    // otherwise we reload the record using the id/keys\n    const fetch = { };\n    this.keys.map(\n      key => fetch[key] = insert[key] || data[key]\n    );\n    // console.log('post-insert fetch: ', fetch);\n\n    return this.fetchOne(fetch);\n  }\n  async insertAll(data, options) {\n    this.debug(\"insertAll: \", data);\n    return await Promise.all(\n      data.map(\n        async row => this.insert(row, options)\n      )\n    );\n  }\n\n  //-----------------------------------------------------------------------------\n  // update\n  //-----------------------------------------------------------------------------\n  async update(data, where) {\n    this.debug(\"update: \", data, where);\n    const [dcols, dvals] = this.checkWritableColumns(data);\n    const [wcols, wvals] = this.checkColumns(where);\n    return this.engine.update(this.table, dcols, dvals, wcols, wvals);\n  }\n\n  //-----------------------------------------------------------------------------\n  // delete\n  //-----------------------------------------------------------------------------\n  async delete(where) {\n    this.debug(\"delete: \", where);\n    const [cols, vals] = this.checkColumns(where);\n    return this.engine.delete(this.table, cols, vals);\n  }\n\n  //-----------------------------------------------------------------------------\n  // fetch\n  //-----------------------------------------------------------------------------\n  prepareFetch(where, options={}) {\n    if (options.columns) {\n      this.checkColumnNames(options.columns);\n    }\n    return this.checkColumns(where);\n  }\n  async fetchOne(where, options={}) {\n    this.debug(\"fetchOne: \", where, options);\n    const [wcols, wvals] = this.prepareFetch(where, options);\n    return this.engine.selectOne(this.table, wcols, wvals, options);\n  }\n  async fetchAny(where, options={}) {\n    this.debug(\"fetchAny: \", where, options);\n    const [wcols, wvals] = this.prepareFetch(where, options);\n    return this.engine.selectAny(this.table, wcols, wvals, options);\n  }\n  async fetchAll(where, options={}) {\n    this.debug(\"fetchAll: \", where, options);\n    const [wcols, wvals] = this.prepareFetch(where, options);\n    return this.engine.selectAll(this.table, wcols, wvals, options);\n  }\n\n  // select() is the old name for fetchAll() which I'm in the process of\n  // reworking.\n  async select(where, options={}) {\n    this.debug(\"select: \", where, options);\n    if (options.columns) {\n      this.checkColumnNames(options.columns);\n    }\n    const [wcols, wvals] = this.checkColumns(where);\n    return this.engine.select(this.table, wcols, wvals, options);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Old Knex-based code - TODO\n  //-----------------------------------------------------------------------------\n  selectRow(columns) {\n    return this.rowProxy(\n      this.knex().select(\n        this.schema.columns(columns)\n      )\n    ).first();\n  }\n  selectRows(columns) {\n    return this.rowsProxy(\n      this.knex().select(\n        this.schema.columns(columns)\n      )\n    );\n  }\n  fetchRow(where) {\n    const select = this.knex().select().first();\n    return this.rowProxy(\n      where\n        ? select.where(where)\n        : select\n    );\n  }\n  fetchRows(where) {\n    const select = this.knex().select();\n    return this.rowsProxy(\n      where\n        ? select.where(where)\n        : select\n    );\n  }\n  OLDupdate(set, where) {\n    return this.rowsProxy(\n      this.knex().update(set).where(where).then(\n        () => this.fetchRows(where)\n      )\n    )\n  }\n  record(query) {\n    return query.then(\n      row => recordProxy(new this.recordClass(this, row, this.recordOptions))\n    );\n  }\n  records(query) {\n    // console.log('table.records()');\n    return query.then(\n      rows => rows.map( row => recordProxy(new this.recordClass(this, row, this.recordOptions)) )\n    );\n  }\n  tableFragments() {\n    return this.tableFragments\n  }\n}\n\nexport const table = (database, schema) =>\n  new Table(database, schema)\n\nexport default Table;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Table.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 303,
    "kind": "class",
    "name": "Table",
    "memberof": "src/Table.js",
    "static": true,
    "longname": "src/Table.js~Table",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Table}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 304,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "database",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#database",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#engine",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "table",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#table",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "columns",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#columns",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "readonly",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#readonly",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "required",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#required",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "keys",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#keys",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "id",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#id",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "recordClass",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#recordClass",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "recordOptions",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#recordOptions",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "rowProxy",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#rowProxy",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "rowsProxy",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#rowsProxy",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "fragments",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#fragments",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#queries",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "prepareFragments",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#prepareFragments",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "checkColumnNames",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkColumnNames",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "checkColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkColumns",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "cols",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "vals",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "test",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "checkWritableColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkWritableColumns",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "cols",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "vals",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "checkRequiredColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkRequiredColumns",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "query",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#query",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "run",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#run",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "method",
    "name": "any",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#any",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "all",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#all",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "one",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#one",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "insert",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insert",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "insertOne",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertOne",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "insertAll",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertAll",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "update",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#update",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#delete",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "prepareFetch",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#prepareFetch",
    "access": "public",
    "description": null,
    "lineNumber": 160,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "fetchOne",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#fetchOne",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "fetchAny",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#fetchAny",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "fetchAll",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#fetchAll",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "select",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#select",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "selectRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#selectRow",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "selectRows",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#selectRows",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "fetchRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#fetchRow",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "fetchRows",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#fetchRows",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "OLDupdate",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#OLDupdate",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "record",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#record",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "records",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#records",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "tableFragments",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#tableFragments",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "function",
    "name": "table",
    "memberof": "src/Table.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Table.js~table",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{table}",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "src/Tables.js",
    "content": "export class Tables {\n  constructor(tables={}) {\n    this.tables = tables;\n  }\n  table(name) {\n    return this.tables[name];\n  }\n}\n\nexport default Tables;",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Tables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "class",
    "name": "Tables",
    "memberof": "src/Tables.js",
    "static": true,
    "longname": "src/Tables.js~Tables",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{Tables}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 350,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Tables.js~Tables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Tables.js~Tables#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "tables",
    "memberof": "src/Tables.js~Tables",
    "static": false,
    "longname": "src/Tables.js~Tables#tables",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "table",
    "memberof": "src/Tables.js~Tables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Tables.js~Tables#table",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "src/Utils/Columns.js",
    "content": "import { fail, isArray, isObject, isString, objMap, splitList } from \"@abw/badger-utils\";\nimport { bitSplitter, defaultIdColumn } from \"../Constants.js\";\nimport { throwColumnValidationError } from \"./Error.js\";\n\nexport const prepareColumns = (schema) => {\n  const columns = schema.columns\n    || throwColumnValidationError('noColumns', { table: schema.table });\n\n  if (isString(columns)) {\n    return prepareColumnsString(columns, schema);\n  }\n  else if (isArray(columns)) {\n    return prepareColumnsArray(columns, schema);\n  }\n  else if (isObject(columns)) {\n    return prepareColumnsHash(columns, schema);\n  }\n  else {\n    return throwColumnValidationError('invalidColumns', { table: schema.table, columns });\n  }\n}\n\nconst prepareColumnsString = (columns, schema) => {\n  // columns can be a string of whitespace delimited values, which\n  // is equivalent to passing an array of strings\n  return prepareColumnsArray(splitList(columns), schema);\n}\n\nconst prepareColumnsArray = (columns, schema) => {\n  // columns can be an array of strings, each of which should be a\n  // name, optionally followed by a series of flags or key=value\n  // items, separated by colons, e.g. 'name:required', 'name:type=text',\n  // 'name:required:type=text'\n  let index = { };\n  columns.forEach(\n    item => {\n      const bits  = item.split(bitSplitter);\n      const name  = bits.shift();\n      index[name] = prepareColumnBits(name, bits, schema);\n    }\n  )\n  return prepareColumnsHash(index, schema);\n}\n\nconst prepareColumnsHash = (columns, schema) => {\n  return objMap(\n    columns,\n    (value, name) => {\n      if (isString(value)) {\n        return prepareColumnBits(name, value.split(bitSplitter), schema)\n      }\n      else if (isObject(value)) {\n        // column name can be defined in column spec as 'column' in case\n        // the database column name doesn't match the name you want to use\n        const column = value.column || (value.column = name);\n        // tableColumn is the full \"table.column\"\n        value.tableColumn = schema.table + '.' + column;\n        return value;\n      }\n      else {\n        fail(`Invalid \"${name}\" columns specified in ${schema.table} table: ${value}`)\n      }\n    }\n  )\n}\n\nconst prepareColumnBits = (name, bits, schema) => {\n  return bits.reduce(\n    (result, bit) => {\n      const kv = bit.split('=', 2);\n      const key = kv.shift();\n      result[key] = kv.length ? kv[0] : true;\n      return result\n    },\n    { column: name, tableColumn: schema.table + '.' + name }\n  );\n}\n\nexport const prepareKeys = (schema, columns={}) => {\n  let keys  = splitList(schema.keys);\n  const ids = Object.keys(columns).filter( key => columns[key].id );\n  if (ids.length > 1) {\n    return throwColumnValidationError('multipleIds', { table: schema.table });\n  }\n  if (keys.length === 0) {\n    keys = Object.keys(columns).filter( key => columns[key].key );\n  }\n  if (schema.id) {\n    keys.unshift(schema.id);\n  }\n  else if (ids.length) {\n    schema.id = ids[0];\n    keys.unshift(schema.id);\n  }\n  else if (keys.length === 0) {\n    schema.id = defaultIdColumn;\n    keys.unshift(schema.id);\n  }\n  return keys;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Columns.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "function",
    "name": "prepareColumns",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumns",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{prepareColumns}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "function",
    "name": "prepareColumnsString",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsString",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "function",
    "name": "prepareColumnsArray",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsArray",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "prepareColumnsHash",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsHash",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "prepareColumnBits",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnBits",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "bits",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "prepareKeys",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareKeys",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{prepareKeys}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "columns",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "file",
    "name": "src/Utils/Debug.js",
    "content": "import { addDebug } from \"@abw/badger\";\nimport { fail, isBoolean, isObject } from \"@abw/badger-utils\";\n\nexport let debug = {\n  database: {\n    debug:  false,\n    prefix: 'Database> ',\n    color:  'green',\n  },\n  engine: {\n    debug:  false,\n    prefix: 'Engine> ',\n    color:  'red',\n  },\n  queries: {\n    debug:  false,\n    prefix: 'Queries> ',\n    color:  'blue',\n  },\n  table: {\n    debug:  false,\n    prefix: 'Table> ',\n    color:  'yellow',\n  },\n  test: {\n    debug:  false,\n    prefix: 'Test> ',\n    color:  'green'\n  },\n}\n\nconst invalidDebugItem = item =>\n  fail(`Invalid debug item \"${item}\" specified`)\n\nexport const setDebug = options => {\n  Object.entries(options).map(\n    ([key, value]) => {\n      const set = debug[key] || invalidDebugItem(key);\n      if (isBoolean(value)) {\n        set.debug = value;\n      }\n      else if (isObject(value)) {\n        Object.assign(set, value);\n      }\n    }\n  )\n}\n\nexport const getDebug = (name, ...configs) => {\n  const defaults = debug[name] || invalidDebugItem(name);\n  return Object.assign(\n    {},\n    defaults,\n    ...configs\n  );\n}\n\nexport const addDebugMethod = (object, name, ...configs) => {\n  const options = getDebug(name, ...configs);\n  addDebug(\n    object,\n    options.debug,\n    options.debugPrefix || options.prefix,\n    options.debugColor  || options.color\n  );\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 361,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/Utils/Debug.js",
    "static": true,
    "longname": "src/Utils/Debug.js~debug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{debug}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"database\": *, \"engine\": *, \"queries\": *, \"table\": *, \"test\": *}"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "function",
    "name": "invalidDebugItem",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~invalidDebugItem",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-utils",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "setDebug",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~setDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{setDebug}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "getDebug",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~getDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{getDebug}",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "configs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "addDebugMethod",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~addDebugMethod",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{addDebugMethod}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "configs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "src/Utils/Error.js",
    "content": "import { fail } from \"@abw/badger-utils\"\nimport { format } from \"./Format.js\"\n\n//-----------------------------------------------------------------------------\n// General purpose error messages\n//-----------------------------------------------------------------------------\nexport const missing = (item) =>\n  fail(`No \"${item}\" specified`)\n\nexport const invalid = (item, value) =>\n  fail(`Invalid \"${item}\" specified: ${value}`)\n\nexport const notImplemented = (method, module) =>\n  fail(`${method} is not implemented in ${module}`)\n\nexport const notImplementedInModule = module => method =>\n  notImplemented(method, module)\n\nexport const notImplementedInBaseClass = module =>\n  notImplementedInModule(`the ${module} base class`)\n\n//-----------------------------------------------------------------------------\n// Custom error classes\n//-----------------------------------------------------------------------------\nexport class CustomError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class UnexpectedRowCount extends CustomError { }\nexport class ColumnValidationError extends CustomError { }\nexport class InsertValidationError extends CustomError { }\n\nexport function unexpectedRowCount(n) {\n  throw new UnexpectedRowCount(`${n} rows were returned when one was expected`)\n}\n\n\nexport const thrower = (formats, error=Error) =>\n  (fmt, data) => {\n    const message = format(\n      formats[fmt] || fail(\"Invalid message format: \", fmt),\n      data\n    );\n    throw new error(message)\n  }\n\nexport const throwColumnValidationError = thrower(\n  {\n    unknown:        'Unknown \"<column>\" column in the <table> table',\n    readonly:       'The \"<column>\" column is readonly in the <table> table',\n    required:       'Missing required column \"<column>\" for the <table> table',\n    multipleIds:    'Multiple columns are marked as \"id\" in the <table> table',\n    noColumns:      'No \"columns\" specified for the <table> table',\n    invalidColumns: 'Invalid \"columns\" specified for the <table> table: <columns>',\n  },\n  ColumnValidationError\n)\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "missing",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~missing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{missing}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "invalid",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~invalid",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{invalid}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "notImplemented",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplemented",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{notImplemented}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "function",
    "name": "notImplementedInModule",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplementedInModule",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{notImplementedInModule}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "function",
    "name": "notImplementedInBaseClass",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplementedInBaseClass",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{notImplementedInBaseClass}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "class",
    "name": "CustomError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~CustomError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{CustomError}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 373,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/Error.js~CustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Error.js~CustomError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "name",
    "memberof": "src/Utils/Error.js~CustomError",
    "static": false,
    "longname": "src/Utils/Error.js~CustomError#name",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "UnexpectedRowCount",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~UnexpectedRowCount",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{UnexpectedRowCount}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "ColumnValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~ColumnValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{ColumnValidationError}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 377,
    "kind": "class",
    "name": "InsertValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~InsertValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{InsertValidationError}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 378,
    "kind": "function",
    "name": "unexpectedRowCount",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~unexpectedRowCount",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{unexpectedRowCount}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "function",
    "name": "thrower",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~thrower",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{thrower}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "formats",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "Error",
        "defaultValue": "Error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "throwColumnValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~throwColumnValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{throwColumnValidationError}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "file",
    "name": "src/Utils/Format.js",
    "content": "import { fail, noValue } from \"@abw/badger-utils\";\n\nexport const format = (msg, data) =>\n  msg.replace(\n    /<(\\w+)>/g,\n    (_, key) => {\n      const val = data[key];\n      if (noValue(val)) {\n        fail(`Invalid variable expansion <${key}> in message format: ${msg}`);\n      }\n      return val;\n    }\n  );\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "format",
    "memberof": "src/Utils/Format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Format.js~format",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-utils",
    "importStyle": "{format}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Badger Database\n\nThis is a simple but powerful database management tool that allows you to\nbuild database abstraction layers for your projects. It has support for\naccessing Postgres, MySQL and Sqlite databases.\n\nThe aim is to provide a *Separation of Concerns* between your application\ncode and your database code so that you can write application code at a\nhigher level of abstraction, with the details of the database hidden away\nin the lower levels.\n\n## Philosophy\n\nIt is based on the philosphy that ORMs and SQL query builders are considered\n*Mostly Harmful*.  SQL is an industry standard and has been for nearly 40\nyears.  Although there are some minor differences between dialects, it is\nthe most portable and widely understood way to communicate with a database.\nAny developer who has experience with using relational databases should know\nat least the basics of SQL, regardless of the programming language or database\ntoolkits they are most familiar with.\n\nUnlike most ORMs and SQL query builders which try to insulate developers from\nSQL, this library embraces it and encourages you to use it in the way it was\nintended to be used.  One of the keys benefits is transparency.  Your SQL\nqueries should not be hidden behind an abstraction that can obscure the\nintention or subtly transform the meaning.  This avoids a whole class of\n\"translation errors\" that can result in the generated queries returning\nthe wrong results, being inefficient, or hard to reason about.\n\nThat said, there are a number of useful benefits that ORMs and SQL query\nbuilders provide which this library has adopted.\n\n* Abstraction of the underlying database engine.  Although it's probably not\nthat common for a project to migrate from one database engine to another\n(and if that does happens you'll have plenty of other things to worry about),\nit is quite common for developers to work on a number of projects over a\nperiod of time that use different databases.  Having a library that\nsmooths over the differences between them can make it easier to switch from\none project to another.\n\n* Automatic generation of \"trivial\" queries to insert, select, update and delete\nrecords (aka \"CRUD\" - create, read, update, delete).  As well as removing the\nneed to write lots of \"boilerplate\" queries to get your project up and running,\nthis is also useful when you modify tables at a later date to add or remove\ncolumns.  Those basic operations should automatically adapt to the new\nschema without requiring you to rewrite lots of queries.\n\n* The ability to compose complex queries in parts, allowing SQL fragments\nto be reused in different queries that are similar, but not identical.\nDoing this programmatically can not only save time, but also avoid potential\nerrors, either when writing them initially, or when updating them at a later\ndate to accommodate changes in the database schema.\n\n* Entity models to help organise table and record-based code.  Each database\ntable can have its own table module defined where you can add custom methods\nfor inserting, selecting or performing other operations on rows in the table.\nSimilarly, every entity type can have its own record module where you can\nadd methods for performing operations on an individual entity instance.  This\nis a lightweight variant of the Active Record pattern.\n\n## Caveat\n\nThis is currently a work in progress loosely based on the Perl\n[Badger::Database](https://github.com/abw/Badger-Database) library.\nIt is being written to help migrate a number of old Perl projects\nto Javascript.\n\nFeel free to use it for your own projects but be warned that\nI wrote it to help me get my own job done.  I don't plan to spend\ntoo much time supporting it, updating it, or adding features that\naren't immediately useful to me.\n\nThat said, it's a simple project totalling less than a thousand lines\nof code.  An experienced Javascript programmer with knowledge of\nSQL should be able to grok the code in an hour or so.  If you're\nhappy to use the source, Luke, then it may be the droids you're looking\nfor.  But if you're looking for a fully-featured, production-ready\nsolution then it might not be for you - there are *plenty* of other\nJavascript ORMs that might be a better place to start.\n\nFor further information please read the\n[manual](https://abw.github.io/badger-database-js/docs/manual/index.html).\n\n## Installation\n\nUse your favourite package manager (we'll assume `npm` in these examples)\nto install `@abw/badger-database` and at least one of the driver modules.\n\n```sh\n    $ npm install @abw/badger-database\n\n    # Then add one of the following:\n    $ npm install pg\n    $ npm install better-sqlite3\n    $ npm install mysql2\n```\n\n## Quick Start\n\nImport the `connect` function from `@abw/badger-database`\nand create a database connection.  This example shows a `sqlite3`\nin-memory database which is ideal for testing.\n\n```js\nconst database = connect({\n  database: 'sqlite:memory',\n})\n```\n\nUse the [run()](https://abw.github.io/badger-database-js/docs/manual/database.html#run-sql-params-)\nmethod to run SQL queries.  For example, to create a `users` table:\n\n```js\nawait database.run(`\n  CREATE TABLE users (\n    id INTEGER PRIMARY KEY ASC,\n    name TEXT,\n    email TEXT\n  )`\n)\n```\n\n# Author\n\nAndy Wardley <abw@wardley.org>\n",
    "longname": "/Users/abw/js/badger-database-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger-database\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Javascript database abstraction layer\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger-database.cjs.js\",\n  \"module\": \"dist/badger-database.esm.js\",\n  \"exports\": \"./dist/badger-database.esm.js\",\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-database-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-database-js/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava --serial\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"database\",\n    \"sql\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-json\": \"^4.1.0\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"better-sqlite3\": \"^7.6.2\",\n    \"dotenv\": \"^16.0.1\",\n    \"eslint\": \"^8.20.0\",\n    \"knex\": \"^2.2.0\",\n    \"mysql2\": \"^2.3.3\",\n    \"pg\": \"^8.8.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\",\n    \"sqlite3\": \"^5.1.1\"\n  },\n  \"dependencies\": {\n    \"@abw/badger\": \"^1.0.8\",\n    \"@abw/badger-utils\": \"^1.0.11\",\n    \"tarn\": \"^3.0.2\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-database-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger-database\n\n<img src=\"./images/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger-database` Javascript module.\n\n* [Installation](manual/installation.html)\n* [Connecting](manual/connecting.html)\n* [Tutorial](manual/tutorial.html)\n\n## NOTE:\n\nI'm in the process of rewriting the library to remove Knex.  These\npages haven't been updated yet and so will be out of date.\n\n* [Database](manual/database.html)\n* [Table](manual/table.html)\n* [Record](manual/record.html)\n* [Model](manual/model.html)\n* [Queries](manual/queries.html)\n\n\nThese manual pages describe some of the internal implementation.\nYou probably don't need to worry about them too much unless you're\nlooking under the hood.\n\n* [Connection](manual/connection.html)\n* [Schema](manual/schema.html)\n* [Tables](manual/tables.html)\n\n# Author\n\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-database-js/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\n\nUse your favourite package manager to install the module\nfrom `@abw/badger-database`.  You should also install\nat least one of the database driver modules:\n\n* `pg` for Postgres\n* `mysql2` for Mysql\n* `better-sqlite3` for Sqlite.\n\n### npm\n\n    npm install @abw/badger-database pg\n\n### pnpm\n\n    pnpm add @abw/badger-database pg\n\n### yarn\n\n    yarn add @abw/badger-database pg\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/connecting.md",
    "name": "./manual/connecting.md",
    "content": "# Connecting\n\nThe `connect()` function is used to connect to a database.  It is the default\nexport from the `@abw/badger-database` module.\n\n```js\nimport connect from '@abw/badger-database'\n```\n\nYou can also use named imports.\n\n```js\nimport { connect } from '@abw/badger-database'\n```\n\nOr you can use `require()` if you're still using Common JS format.\n\n```js\nconst { connect } = require('@abw/badger-database')\n```\n\n## Connection String\n\nThe simplest way to connect to a database is using a connection string for the\n`database` parameter. This is a concept that should be familiar to Postgres users.\n\n```js\nconst mydb = await connect({\n  database: 'postgresql://user:password@hostname:5432/database'\n})\n```\n\nInternally we use the slightly shorter name of `postgres` (no `ql` at the end)\nfor the Postgres engine name.  To avoid any chance of confusion, we also support\nthis in the connection string and automatically \"correct\" it for you.\n\n```js\nconst mydb = await connect({\n  // 'postgres://...' works the same as 'postgresql://...'\n  database: 'postgres://user:password@hostname:5432/database'\n})\n```\n\nYou can use the same connection string format for Mysql databases:\n\n```js\nconst mydb = await connect({\n  database: 'mysql://user:password@hostname:3306/database'\n})\n```\n\nAnd also for Sqlite databases, although here the only parameter supported\nis the database filename.\n\n```js\nconst mydb = await connect({\n  database: 'sqlite://database'\n})\n```\n\nFor an in-memory Sqlite database, use `:memory:` as the database name:\n\n```js\nconst mydb = await connect({\n  database: 'sqlite://:memory:'\n})\n```\n\nOr if you find that a bit clunky, you can use the shortened version:\n\n```js\nconst mydb = await connect({\n  database: 'sqlite:memory'\n})\n```\n\nMost of the elements are optional for Postgres and Mysql databases.\nHere are the minimal versions which assume the default host (`localhost`),\nport (`3306` for Mysql and `5432` for Postgres) and no username or password.\n\n```js\nconst mydb = await connect({\n  database: 'postgresql://database'\n})\n```\n\n```js\nconst mydb = await connect({\n  database: 'mysql://database'\n})\n```\n\n## Connection Parameters\n\nThe connection strings shown in the previous sections are short-hand versions\nfor the more verbose form.  If your connection parameters are stored in a file,\nloaded via an API call, or fetched in some other way then it may be more\nconvenient to use this form.\n\n```js\nconst mydb = await connect({\n  // \"postgres://badger:s3cr3t@dbhost.com:5433/animals\" is short for:\n  database: {\n    engine:   'postgres',   // or 'postgresql'\n    user:     'badger',\n    password: 's3cr3t',\n    host:     'dbhost.com',\n    port:     '5433',\n    database: 'animals',\n  }\n})\n```\n\nThe same configuration options apply to Mysql.  For Sqlite the only supported\noption is `filename`.\n\n```js\nconst mydb = await connect({\n  database: {\n    engine:   'sqlite',\n    filename: 'animals.db',\n  }\n})\n```\n\nYou can also use `:memory:` as the `filename` for an in-memory database.\n\n```js\nconst mydb = await connect({\n  database: {\n    engine:   'sqlite',\n    filename: ':memory:',\n  }\n})\n```\n\n## Connection Parameter Aliases\n\nWhenever I'm writing the code to connect to a database there's a good chance I'll\nget one of the parameter name wrong.  Is it `user` or `username`? `pass` or `password`?\n`host` or `hostname`? `file` or `filename`?\n\nOf course you could google it, but there's no need. You can specify any of the \"incorrect\"\nparameters and we'll automatically fix them for you.\n\nFor example, if you specify `file` instead of `filename` for a Sqlite database, we'll\nsilently correct it.\n\n```js\nconst mydb = await connect({\n  database: {\n    engine: 'sqlite',\n    file:   'animals.db',   // converted to 'filename'\n  }\n})\n```\n\nThis also just works:\n\n```js\nconst mydb = await connect({\n  database: {\n    engine:   'postgres',\n    database: 'animals',\n    user:     'badger',\n    pass:     's3cr3t',     // converted to 'password'\n    host:     'dbhost.com',\n    port:     '5433',\n  }\n})\n```\n\nAnd this works too:\n\n```js\nconst mydb = await connect({\n  database: {\n    engine:   'postgres',\n    database: 'animals',\n    username: 'badger',     // converted to 'user'\n    password: 's3cr3t',\n    hostname: 'dbhost.com', // converted to 'host'\n    port:     '5433',\n  }\n})\n```\n\n## Pool Options\n\nThe Postgres and Mysql database engines use a connection pool for efficiency.\nBy default, the minimum number of connections is 2 and the maximum is 10.  You\ncan change these values using the `pool` option.\n\n```js\nconst mydb = await connect({\n  database: { ... },\n  pool: {\n    min: 5,\n    max: 20\n  }\n})\n```\n\nThe Sqlite engine uses [better-sqlite3](https://github.com/WiseLibs/better-sqlite3)\nwhich uses synchronous functions.  This is because Sqlite serialises all queries\nand there is nothing to gain (and the potential for problems) by using a connection\npool and/or asynchronous function (for further information about this from the author\nof better-sqlite3, see [here](https://github.com/WiseLibs/better-sqlite3/issues/32)).\n\nAs such, the pool is effectively disabled for Sqlite by setting the `min` and `max`\nvalues to 1.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/tutorial.md",
    "name": "./manual/tutorial.md",
    "content": "# Tutorial\n\nIn these examples we'll look at some of the basic functionality of the\nlibrary using a database of users.\n\n## Basic Queries\n\nThis first example shows how to connect to a database, create a table,\ninsert a row and then fetch it out again.\n\nNote that most of the database functions are asynchronous and return\npromises.  In these examples we've wrapped the code in an `async` function\ncalled `main()` so that we can use the `await` keyword to wait for requests\nto complete. You can, of course, use `.then(...)` if you prefer.\n\n```js\nimport connect from '@abw/badger-database'\n\nasync function main() {\n  // connect to a Sqlite database\n  const db = await connect({ database: 'sqlite:test.db' });\n\n  // create a table\n  await db.run(\n    `CREATE TABLE users (\n      id    INTEGER PRIMARY KEY ASC,\n      name  TEXT,\n      email TEXT\n    )`\n  );\n\n  // insert a row\n  const insert = await db.run(\n    'INSERT INTO users (name, email) VALUES (?, ?)',\n    ['Bobby Badger', 'bobby@badgerpower.com']\n  );\n  console.log(\"Inserted ID:\", insert.lastInsertRowid);\n\n  // fetch a row\n  const bobby = await db.one(\n    'SELECT * FROM users WHERE email=?',\n    ['bobby@badgerpower.com']\n  );\n  console.log(\"Fetched row:\", bobby);\n}\n\nmain()\n```\n\nThe `run()` method is used to execute a query where you're not expecting\nto return any rows from the database.  However, the method does return some\ndata include the number of rows changed, and in the case of `INSERT` queries,\nthe generated id for the record.\n\nDifferent database engines return different values here.  For Sqlite it's\n`changes` for the number of rows affected and `lastInsertRowid` for the id\nof the insert row.  For Mysql it's `affectedRows` and `insertId`.  For\nPostgres it's `rowCount` and if you want to get the id then you must add\n`RETURNING id` to the end of the query.\n\nWe'll see in later examples using `tables` how the badger-database library\nautomatically standardises this response so that you always get back `changes`\nand `id` (or whatever your id column is called) regardless of the database\nengine.  But if you really can't wait until then, the trick is to pass a third\nargument to the `run()` method as an object containing the `sanitizeResult`\nkey set to a `true` value.  Then you will always get back `changes` and `id`\nfor all database engines.\n\n```js\n// insert a row\nconst insert = await db.run(\n  'INSERT INTO users (name, email) VALUES (?, ?)',\n  ['Bobby Badger', 'bobby@badgerpower.com'],\n  { sanitizeResult: true }\n);\nconsole.log(\"Rows changed:\", insert.changes);\nconsole.log(\"Inserted ID:\", insert.id);\n```\n\nThe `one()` method should be used when you're expecting to fetch *exactly*\none row from the database.  The first argument is an SQL query string.  If\nyou  have any parameters to include in the query then they should be embedded\nin the SQL using placeholders (`?` for Mysql and Sqlite, `$1`, `$2`, `$3`, etc.,\nfor Postgres).  Then pass the parameter values in an array as the second\nargument.\n\n```js\nconst bobby = await db.one(\n  'SELECT * FROM users WHERE email=?',\n  ['bobby@badgerpower.com']\n);\nconsole.log(\"Fetched row:\", bobby);\n```\n\nThe `one()` method will throw an exception if no rows, or more than one row is\nreturned.\n\nThe `any()` method can be used if you want to get one row which may or may not exist.\n\n```js\nconst bobby = await db.any(\n  'SELECT * FROM users WHERE email=?',\n  ['bobby@badgerpower.com']\n);\nif (bobby) {\n  console.log(\"Fetched row:\", bobby);\n}\nelse {\n  console.log(\"Bobby Badger has gone missing!\");\n}\n```\n\nThe `all()` method can be used to return multiple rows.\n\n```js\nconst bobbies = await db.all(\n  'SELECT * FROM users WHERE name=?',\n  ['Bobby Badger']\n);\nif (bobbies.length) {\n  console.log(\"Fetched %s users called 'Bobby Badger':\", bobbies.length);\n}\nelse {\n  console.log(\"There aren't any users called 'Bobby Badger'\");\n}\n```\n\n## Named Queries\n\nInstead of embedding SQL queries directly into your code, you can\ndefine them as named queries.  This allows you to hide away some of the\ndetails of the database implemenentation so that your application code\ncan be simpler and clearer.\n\nTo keep things simple, this example has all the code in one file,\nwhich isn't really hiding anything at all.  In practice, you would usually\nmove the database definition into a separate module.\n\n```js\nimport connect from '@abw/badger-database'\n\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  queries: {\n    createUsersTable:`\n      CREATE TABLE users (\n        id INTEGER PRIMARY KEY ASC,\n        name TEXT,\n        email TEXT\n      )`,\n    insertUser:\n      'INSERT INTO users (name, email) VALUES (?, ?)',\n    selectUserByEmail:\n      'SELECT * FROM users WHERE email=?'\n  }\n};\n\nasync function main() {\n  // connect to the database\n  const db = await connect(dbConfig);\n\n  // create the users table using a named query\n  await db.run('createUsersTable');\n\n  // insert a row using a named query\n  const insert = await db.run(\n    'insertUser',\n    ['Bobby Badger', 'bobby@badgerpower.com']\n  );\n  console.log(\"Inserted ID:\", insert.lastInsertRowid);\n\n  // fetch a row using a named query\n  const bobby = await db.one(\n    'selectUserByEmail',\n    ['bobby@badgerpower.com']\n  );\n  console.log(\"Fetched row:\", bobby);\n}\n\nmain()\n```\n\n## Query Fragments\n\nYou might want to define a number of different queries for fetching user\nrows using different search terms.  For example, to select a user by\n`email` or `name`.\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  queries: {\n    selectUserByEmail:\n      'SELECT * FROM users WHERE email=?',\n    selectUserByName:\n      'SELECT * FROM users WHERE name=?'\n  }\n};\n```\n\nTo avoid repetition, you can define named SQL `fragments` that can be embedded\ninto other queries.  Named fragments can be embedded into queries inside angle\nbrackets, e.g. `<fragmentName>`.\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  fragments: {\n    selectUser:\n      'SELECT * FROM users'\n  },\n  queries: {\n    selectUserByEmail:\n      '&lt;selectUser&gt; WHERE email=?',\n    selectUserByName:\n      '&lt;selectUser&gt; WHERE name=?'\n  }\n};\n```\n\nFragments can reference other fragments.  This can be useful when you're building\nmore complex queries, as shown in this somewhat contrived example:\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  fragments: {\n    selectUserCompany:\n      'SELECT users.*, companies.* FROM users',\n    joinUserCompany:\n      'JOIN companies on users.company_id=companies.id',\n    selectEmployee:\n      '&lt;selectUserCompany&gt; &lt;joinUserCompany&gt;',\n  },\n  queries: {\n    selectEmployeeByEmail:\n      '&lt;selectEmployee&gt; WHERE email=?',\n    selectEmployeeByName:\n      '&lt;selectEmployee&gt; WHERE name=?'\n  }\n};\n```\n\nYou can also embed fragments into ad-hoc queries passed to the\n`run()`, `one()`, `any()` and `all()` methods.  For example,\ngiven the above configuration you could write a custom query that\nincludes the `selectEmployee` fragment like so:\n\n```js\nconst badgers = await db.all(\n  '&lt;selectEmployee&gt; WHERE companies.name=?',\n  ['Badgers Inc.']\n);\n```\n\n## Table Definitions\n\nIt can quickly get tedious if you've got to write lots of different\nqueries for trivial operations like inserting, updating, selecting\nand deleting rows.\n\nIn this example we introduce the concept of `tables`.  This allows you\nto specify the columns in each table and use higher level methods to\nautomatically insert, update, select and delete rows from the table.\n\nNote that we're using the same database from the previous examples\nand assuming that the `users` table has already been created.\n\n```js\n// define the users table and the columns it contains\nconst db = await connect({\n  database: 'sqlite:test.db',\n  tables: {\n    users: {\n      columns: 'id name email'\n    }\n  }\n});\n\n// fetch the users table\nconst users = await db.table('users');\n\n// insert a row\nawait users.insert({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\n\n// update a row\nawait users.update(\n  { name: 'Brian \"The Brains\" Badger' },\n  { email: 'brian@badgerpower.com' }\n);\n\n// fetch a row\nconst brian = await users.fetchOne({  // TODO: one() or oneRow()???\n  email: 'brian@badgerpower.com'\n});\n\n// delete a row\nawait users.delete({\n  email: 'brian@badgerpower.com'\n});\n```\n\nFor simple cases you can define the table columns using a whitespace\ndelimited string, as show in the previous example.\n\n```js\nconst db = await connect({\n  // ...engine, etc...\n  tables: {\n    users: {\n      columns: 'id name email'\n    }\n  }\n});\n```\n\nYou can add flags to the column names.  These include `required` to indicate\nthat a column must be provided when a row is inserted, and `readonly` to indicate\nthat a column cannot be inserted or updated.  Multiple flags can be added, each\nseparated by a colon.\n\n```js\nconst db = await connect({\n  // ...engine, etc...\n  tables: {\n    users: {\n      columns: 'id:readonly name:required email:required'\n    }\n  }\n});\n```\n\nIf you try to insert a row without providing any of the `required` columns\nthen an error will be throw.\n\n```js\n// Throws a ColumnValidationError: 'Missing required column \"email\" for the users table'\nawait users.insert({\n  name:  'Brian Badger',\n});\n```\n\nThe same thing will happen if you try to insert or update a `readonly` column.\n(NOTE: you don't have to define your id column as being readonly if you want to\nbe able to insert rows with specific ids).\n\n```js\n// Throws a ColumnValidationError: 'The \"id\" column is readonly in the users table'\nawait users.insert({\n  id:    999,\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com',\n});\n```\n\nIf your unique ID column isn't called `id` then you can mark the relevant column\nusing the `id` tag.\n\n```js\nconst db = await connect({\n  // ...engine, etc...\n  tables: {\n    users: {\n      columns: 'user_id:readonly:id ...'\n    }\n  }\n});\n```\n\nDefining the columns using a string is a convenient short hand for simpler\ntables.  The more explicit form is to use an object with the column names as\nkeys.  The corresponding values can be strings containing any flags for the\ncolumns, or an empty string if there aren't any.\n\n```js\nconst db = await connect({\n  // ...engine, etc...\n  tables: {\n    users: {\n      columns: {\n        user_id: 'readonly:id',\n        name:    'required',\n        email:   'required',\n        comment: '',\n    }\n  }\n});\n```\n\nOr you can fully expand them like so:\n\n```js\nconst db = await connect({\n  // ...engine, etc...\n  tables: {\n    users: {\n      columns: {\n        user_id: {\n          readonly: true,\n          id:       true\n        },\n        name: {\n          required: true\n        }\n        email: {\n          required: true\n        }\n        comment: { }\n      }\n    }\n  }\n});\n```\n\n## Table Methods\n\nThe `insert()` method will construct and run an `INSERT` SQL query to insert a\nrow from the column data that you provide.\n\n```js\nawait users.insert({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\n```\n\nThe SQL query generated will look like this for Sqlite and Mysql:\n\n```sql\nINSERT INTO users (name, email)\nVALUES (?, ?)\n```\n\nNote the use of value placeholders to prevent SQL injection attacks.\n\nThe format for placeholders in Postgres is slightly different but has the\nexact same effect:\n\n```sql\nINSERT INTO users (name, email)\nVALUES ($1, $1)\n```\n\nYou can insert multiple rows by passing an array of objects to the method.\n\n```js\nawait users.insert([\n  {\n    name:  'Bobby Badger',\n    email: 'bobby@badgerpower.com'\n  },\n  {\n    name:  'Brian Badger',\n    email: 'brian@badgerpower.com'\n  }\n]);\n```\n\n** NOTE ** I'm going to change this so that you have to explicitly request a reload.\n\nAfter inserting a row the table `insert()` method will immediately reload it from the\ndatabase.  This ensures that the data returned includes all columns, including the id\nand any others that might be generated by the database (e.g. a `created` timestamp).\n\n```js\nconst franky = await users.insert({\n  name:  'Franky Ferret',\n  email: 'franky@ferrets-r-us.com'\n});\nconsole.log(\"id:\", franky.id);       // e.g. 3\nconsole.log(\"name:\", franky.name);   // Franky Ferret\nconsole.log(\"email:\", franky.email); // franky@ferrets-r-us.com\n```\n\nThe same thing happens if you insert multiple rows, except that the return value will\nbe an array of rows.\n\nIf you would rather supress this behaviour then pass a second options argument as an\nobject containing the `reload` parameter set to `false`.\n\n```js\nconst simon = await users.insert(\n  {\n    name:  'Simon Stoat',\n    email: 'simon@stoat-stuff.com'\n  },\n  { reload: false }\n);\n```\n\nNote that you will still get the generated `id` returned and the `changes` will\ncontain the number of rows change, in this case, 1.\n\n```js\nconsole.log(\"id:\", simon.id);           // e.g. 4\nconsole.log(\"changes:\", simon.changes); // 1\n// name, email, etc., are NOT included\n```\n\nThe `update()` method, as the name suggests, allows you to update rows.\n\n```js\nawait users.update(\n  { name: 'Brian \"The Brains\" Badger' },\n  { email: 'brian@badgerpower.com' }\n);\n```\n\nThe first argument is an object containing the changes you want to make.\nThe second optional argument is the `WHERE` clause identifying the rows\nyou want to update.  You can omit the second argument if you want to update\nall rows.\n\nThe SQL generated for the method call shown above will look something like this:\n\n```sql\nUPDATE users\nSET    name=?\nWHERE  email=?\n```\n\nAgain, the format for Postgres is slightly different, using `$1` and `$2` for\nplaceholders instead of `?`, but works exactly the same.\n\nYou can probably guess what the `delete()` method does.\n\n```js\nawait users.delete({\n  email: 'brian@badgerpower.com'\n});\n```\n\nThe key/value pairs in object passed as the only argument identify the rows\nthat you want to delete.  You can omit this if you want to delete all rows\nin the table.  Naturally, you should use this method with caution.\n\nThe SQL generated will look something like this:\n\n```sql\nDELETE FROM users\nWHERE email=?\n```\n\n** NOTE ** I'm considering renaming these to `one()`, `any()` and `all()`\nor perhaps `oneRow()`, `anyRow()` and `allRows()`.\n\nThere are three different fetch methods, `fetchAny()` will return a single\nrow if it exists, `fetchAll()` will return an array of all matching rows.\nThe `fetchOne()` method is like `fetchAny()` in that it returns a single\nrow. However, it also asserts that exactly one row is returned.  If the\nrow does not exist, or if multiple rows are returned then it will throw\nan error.\n\n```js\n// returns a single row or undefined\nconst brian = await users.fetchAny({\n  email: 'brian@badgerpower.com'\n});\n```\n\n```js\n// returns a single row or throws an error\nconst brian = await users.fetchOne({\n  email: 'brian@badgerpower.com'\n});\n```\n\nThe generated SQL will look something like this:\n\n```sql\nSELECT * FROM users\nWHERE email=?\n```\n\nIn all cases, the optional argument can be used to specify the selection\ncriteria.  It can be omitted or left empty if you want to return all rows,\nalthough this usually only makes sense when using `fetchAll()`.\n\n```js\n// returns an array of rows\nconst allUsers = await users.fetchAll();\n```\n\n```js\n// same as above\nconst allUsers = await users.fetchAll({ });\n```\n\nYou can pass a second argument which can contain various options to modify\nthe selection.  For example, the `columns` option can be used to specify\nthe columns that you want to select.  They can be specified as a string\ncontaining the columns names separated by whitespace:\n\n```js\nconst brian = await users.fetchOne(\n  { email: 'brian@badgerpower.com' },\n  { columns: 'id name' }\n);\n```\n\nOr as an array:\n\n```js\nconst brian = await users.fetchOne(\n  { email: 'brian@badgerpower.com' },\n  { columns: ['id', 'name'] }\n);\n```\n\n## Custom Table Class\n\nYou can define your own custom table class for each table in the database.\nThis allows you to add your own methods for performing queries on the table.\nYou should extend the `Table` base class and then define it as the `tableClass`\noption in the table definition.\n\nHere's a complete example.\n\n```js\nimport { connect, Table } from '@abw/badger-database';\n\nexport class Users extends Table {\n  badgers() {\n    // custom method to fetch all badgers\n    return this.fetchAll({ animal: 'Badger' });\n  }\n}\n\nasync function main() {\n  const db = await connect({\n    database: 'sqlite:memory',\n    tables: {\n      users: {\n        // bind in the custom table class\n        tableClass: Users,\n        // column definitions\n        columns: 'id name email animal',\n        // query definitions\n        queries: {\n          create: `\n            CREATE TABLE users (\n              id     INTEGER PRIMARY KEY ASC,\n              name   TEXT,\n              email  TEXT,\n              animal TEXT\n            )`\n        }\n      },\n    }\n  });\n\n  // fetch users table object\n  const users = await db.table('users');\n\n  // run the 'create' query to create the database table\n  await users.run('create');\n\n  // insert some rows\n  await users.insert([\n    {\n      name:   'Bobby Badger',\n      email:  'bobby@badgerpower.com',\n      animal: 'Badger'\n    },\n    {\n      name:   'Brian Badger',\n      email:  'brian@badgerpower.com',\n      animal: 'Badger'\n    },\n    {\n      name:   'Frankie Ferret',\n      email:  'frank@ferret.com',\n      animal: 'Ferret'\n    }\n  ]);\n\n  // now call the custom badgers() method to fetch all badgers\n  const badgers = await users.badgers();\n\n  console.log(badgers.length);    // 2\n  console.log(badgers[0].name);   // Bobby Badger\n  console.log(badgers[1].name);   // Brian Badger\n}\n\nmain()\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/database.md",
    "name": "./manual/database.md",
    "content": "# Database\n\nThe `Database` class provides an interface to a database connection.\n\n* [Overview](#overview)\n* [Configuration](#configuration)\n  * [queries](#queries)\n  * [fragments](#fragments)\n  * [tables](#tables)\n  * [tablesClass](#tablesclass)\n  * [tablesObject](#tablesobject)\n* [Properties](#properties)\n  * [connection](#connection)\n  * [model](#model)\n* [Methods](#methods)\n  * [knex()](#knex--)\n  * [raw(sql)](#raw-sql-)\n  * [query(name)](#query-name-)\n  * [hasTable(name)](#hastable-name-)\n  * [table(name)](#table-name-)\n  * [escape(name)](#escape-name-)\n  * [destroy()](#destroy--)\n* [Functions](#functions)\n  * [database()](#database--)\n\n## Overview\n\nUse the asynchronous `database()` function to create an instance of the\n`Database` class.  This provides a high-level interface to your database.\n\n```js\nimport database from '@abw/badger-database';\n\nconst mydb = await database({\n  // configuration options\n})\n```\n\n## Configuration\n\n### engine\n\nThe `engine` parameter is used to configure the underlying engine class\nfor talking to the database.\n\n```js\nconst mydb = await database({\n  engine: 'postgresql://username:password@hostname/database'\n})\n```\n\nSee the [Connecting](manual/connecting.html) page for full details.\n\n### queries\n\nUsed to define named SQL queries that you can then run by calling the\n[query(name)](#query-name-) method specifying the name of the query.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  queries: {\n    albumsByNumberOfTracks:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'GROUP BY albums.id ' +\n      'ORDER BY n_tracks ',\n  }\n)\n```\n\nSee the [Queries](manual/queries.html) manual page for further information.\n\n### fragments\n\nUse to define commonly used SQL fragments that can be interpolated into\nnamed [queries](#queries).\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  fragments: {\n    selectAlbumsWithTrackCount:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'GROUP BY albums.id '\n  },\n  queries: {\n    albumsByNumberOfTracks:\n      '&lt;selectAlbumsWithTrackCount&gt; ' +\n      'ORDER BY n_tracks ',\n    albumWithMostTracks:\n      '&lt;selectAlbumsWithTrackCount&gt; ' +\n      'ORDER BY n_tracks DESC ' +\n      'LIMIT 1',\n  }\n)\n```\n\nSee the [Queries](manual/queries.html) manual page for further information.\n\n### tables\n\nUsed to define table schemas.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      // ... schema for users table\n    },\n    companies: {\n      // ... schema for companies table\n    }\n  }\n)\n```\n\nSee the [Table](manual/table.html) manual page for further details.\n\n### tablesClass\n\nThis can be used to provide an alternate class for returning table\nconfiguration options.  The default is the [Tables](manual/tables.html) class.\n\n### tablesObject\n\nThis can be used to provide a pre-instantiated object for returning table\nconfiguration options.  See the [Tables](manual/tables.html) pages for\nfurther information.\n\n## Properties\n\n### engine\n\nThis is a reference to an [Engine](manual/engine.html) instance.\n\n### model\n\nThis is a reference to a [Model](manual/model.html) proxy object which\nprovides a shorthand way to access table instances\n\n### queries\n\nThis is a reference to a [Queries](manual/model.html) object which\nmanages named SQL [queries](#queries).\n\n## Methods\n\n### knex()\n\nReturns a Knex query for the database.\nEquivalent to calling `database.connection.knex()`.\n\n```js\nconst row =\n  await database\n    .knex('user')\n    .select('forename')\n    .where({ email: 'bobby@badgerpower.com' })\n    .first()\n```\n\n### raw(sql)\n\nUsed to generate a raw SQL query for the database.  Equivalent to calling\n`knex.raw()`.\n\n```js\nconst rows =\n  await database\n    .raw('select forename from user where email=\"bobby@badgerpower.com\"');\n```\n\n### query(name)\n\nThis method allows you to execute a named query that was previously\ndefined using the [queries](#queries) configuration option.\n\nGiven this database definition:\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  queries: {\n    albumsByNumberOfTracks:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'GROUP BY albums.id ' +\n      'ORDER BY n_tracks ',\n  }\n)\n```\n\nYou can then run the query like so:\n\n```js\nconst albums = await database.query('albumsByNumberOfTracks');\n```\n\n### hasTable(name)\n\nMethod to check if a table exists.  Returns the configuration options\nfor the table or a false value if the table doesn't exist.\n\n### table(name)\n\nMethod to return a table object for a pre-defined table in the database.\n\n```js\nconst users = database.table(\"users\");\n```\nSee the [Table](manual/table.html) manual page for further details.\n\n### escape(name)\n\nUsed to escape a name according to the conventions of the current\ndatabase client.\n\n### destroy()\n\nUsed to disconnect from the database and cleanup when you're finished.\n\n## Functions\n\n### database()\n\nA function of convenience which wraps a call to `new Database()`.\n\n```js\nimport { database } from '@abw/badger-database';\nconst db = database(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Database } from '@abw/badger-database';\nconst db = new Database(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/table.md",
    "name": "./manual/table.md",
    "content": "# Table\n\nThis is a wrapper around a database table.\n\n* [Overview](#overview)\n* [Configuration](#configuration)\n  * [table](#table)\n  * [columns](#columns)\n  * [virtualColumns](#virtualcolumns)\n  * [columnSets](#columnsets)\n  * [id](#id)\n  * [keys](#keys)\n  * [queries](#queries)\n  * [fragments](#fragments)\n  * [tableClass](#tableclass)\n  * [recordClass](#recordclass)\n* [Methods](#methods)\n  * [knex()](#knex--)\n  * [raw()](#raw--)\n  * [query(name)](#query-name-)\n  * [insert(data)](#insert-data-)\n  * [insertRow(data)](#insertrow-data-)\n  * [insertRows(data)](#insertrows-data-)\n  * [selectRow(columns)](#selectrow-columns-)\n  * [selectRows(columns)](#selectrows-columns-)\n  * [fetchRow(where)](#fetchrow-where-)\n  * [fetchRows(where)](#fetchrows-where-)\n  * [update(set,where)](#update-set-where-)\n  * [record(query)](#record-query-)\n  * [records(query)](#records-query-)\n* [Functions](#functions)\n  * [table(database,schema)](#table-database-schema-)\n\n## Overview\n\nConceptually we think of a table as being a collection of records.  I prefer to use\nplural names (e.g. `users` and `companies` instead of `user` and `company`) in\nkeeping with that paradigm, but you can use any names you like.\n\nThe names of the tables you define for your application don't have to match the names\nof the underlying database table.\n\n## Configuration\n\nTables are defined via the `tables` item in a database configuration.\n\n```js\nimport Database from '@abw/badger-database'\n\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      // ... schema for users table\n    },\n    companies: {\n      // ... schema for companies table\n    }\n  }\n)\n```\n\nYou can then access a table object using the `table()` method.\n\n```js\nconst users = database.table('users');\n```\n\nThe configuration items for a table are as follows.\n\n### table\n\nThe default behaviour is to assume that the name of the underlying database table\nis the same as the collection name.  If it isn't then you can use the `table`\nconfiguration option to define it.\n\nFor example, if you want to define a collection of `users` in your application but the\nunderlying table name is `user` then you can define it like so:\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      table: 'user'\n    },\n  }\n)\n```\n\n### columns\n\nThe `columns` configuration item is used to define the columns that you want the\ncollection to have access to.  You don't have to include all of the columns in the\ndatabase table if you don't want to.\n\nIn the simplest case you can define the columns as a string of whitespace delimited\nnames.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      columns: 'id name email'\n    },\n  }\n)\n```\n\nThis is shorthand for specifying them as an array, which you can do if you prefer\nor already have the column names in an array.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      columns: ['id', 'name', 'email']\n    },\n  }\n)\n```\n\nThe third option is to use a hash object to define the columns.  This allows you to\nprovide additional metadata about the columns.  You can add any metadata you like.\nAt the time of writing the metadata isn't used internally, but it might be soon.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      columns: {\n        id: {\n          type: 'id',\n          automatic: true,\n        },\n        name: {\n          type: 'text',\n          required: true,\n        },\n        email: {\n          type: 'text',\n          required: true,\n        }\n      }\n    },\n  }\n)\n```\n\n#### column metadata\n\nTODO: add information about column metadata as and when we start to use it.\n\n### virtualColumns\n\nAny computed columns can be specified as `virtualColumns`.  For example, if you\nhave a user table with separate `forename` and `surname` columns then you might\nwant to add a virtual column that concatenates them to create a `name`.\n\nIn MySQL the `CONCAT()` function can be used.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      columns: 'id forename surname email',\n      virtualColumns: {\n        name: \"CONCAT(users.forename, ' ', users.surname)\"\n      }\n    },\n  }\n)\n```\n\nIn sqlite the `||` operator is used for concatenation so the `name`\nvirtual column would be defined like this:\n\n```js\nvirtualColumns: {\n  name: \"users.forename || ' ' || users.surname\"\n}\n```\n\nNote that it is considered good practice to specify the table and column\nname in these cases, e.g. `users.forename` instead of just `forename`.\nThis will save any ambiguity when you're constructing queries that might\njoin onto other tables.  You might also want to escape the table and/or\ncolumn names if either are reserved words.\n\nFor example, MySQL uses the backtick character to escape names.\n\n```js\nvirtualColumns: {\n  name: \"CONCAT(`users`.`forename`, ' ', `users`.`surname`)\"\n}\n```\n\n### columnSets\n\nYou can define set of columns that provide a shorthand way of referencing\ncommonly used subsets of columns.  By default, queries will use all of the\n`columns` defined.  Any `virtualColumns` will not be included.\n\nYou can define a `default` column set to indicate which columns should be\nincluded in queries by default.  For example, in our `users` table we might\nwant to exclude the `password` and `is_admin` columns, but include the `name`\nvirtual column.\n\n```js\nusers = {\n  columns: 'id forename surname email password is_admin',\n  virtualColumns: {\n    name: \"CONCAT(users.forename, ' ', users.surname)\"\n  },\n  columnSets: {\n    default: 'id forename surname name email',\n  }\n};\n```\n\nThe columns in a column set can be specified as a string of whitespace delimited column\nnames as shown above.  This is shorthand for an array of column names:\n\n```js\ncolumnSets: {\n  default: ['id', 'forename', 'surname', 'name', 'email'],\n}\n```\n\nThe more explicit form is to define an object containing `include` and/or `exclude`\ncolumns.  These operations are performed on the list of `columns`, so `include` can be\nused to add in virtual columns or `exclude` can be used to exclude regular columns\nthat you don't want returned by default.\n\n```js\ncolumnSets: {\n  default: {\n    include: 'name',\n    exclude: 'password is_admin'\n  },\n}\n```\n\nYou can define any of your own named column sets in the same way.\n\n```js\ncolumnSets: {\n  // id forename surname email name\n  default: {\n    include: 'name',\n    exclude: 'password is_admin'\n  },\n  // id forename surname email password is_admin name\n  admin: {\n    include: 'name',\n  },\n  // name email\n  basic: 'name email',\n};\n```\n\n### id\n\nThe `id` configuration item can be used to name the column that is the\nunique identifier for a row.  If you don't specify either `id` or `keys`\nthen it will default to `id`.\n\nFor example, if the `users` table uses the `user_id` column as the unique\nidentifier then you should specify it like so:\n\n```js\nusers: {\n  columns: 'user_id forename surname email',\n  id: 'user_id'\n}\n```\n\n### keys\n\nIn some cases you might have a table with a compound key composed from multiple\ncolumns instead of a single `id` column.  For example, an `employees` table might\nhave a compound key formed from the `user_id` and `company_id` columns.\n\n```js\nemployees: {\n  columns: 'user_id company_id job_title start_date end_date',\n  keys: 'user_id company_id'\n}\n```\n\n### queries\n\nUsed to define named SQL queries that you can then run by calling the\n[query(name)](#query-name-) method specifying the name of the query.\n\nSee the [database queries option](manual/database.html#queries) for examples\nand the [Queries](manual/queries.html) manual page for further information.\n\n### fragments\n\nUse to define commonly used SQL fragments that can be interpolated into\nnamed [queries](#queries).\n\nIn additional to any user-supplied [fragments](#fragments), a number of\nadditional fragments specific to the table will also be defined.  These\nwill all be pre-escaped according to the database client in use.  For\nexample, when using sqlite3, a table column of `albums.id` will be escaped\nas `\"albums\".\"id\"` whereas for MySQL it will be escaped with backticks\ninstead of double quote characters.\n\n* `table` - the table name, e.g. `\"albums\"`\n* `columns` - a comma separated list of all table column names,\ne.g. `\"id\", \"title\", \"year\"`\n* `tcolumns` - a comma separated list of all column names prefixed with\nthe table name, e.g. `\"albums\".\"id\", \"albums\".\"title\", \"albums\".\"year\"`\n\nIn additional any [virtualColumns](#virtualcolumns) are included in the\nfragments.  For example, consider a [virtualColumn](#virtualcolumns) defined\nlike this:\n\n```js\nvirtualColumns: {\n  titleYear:    'title || \" (\" || year || \")\"',\n}\n```\n\nIt can be embedded in SQL queries as `<titleYear>` and will expand\nto `title || \" (\" || year || \")\" as titleYear`.\n\nNote that you are responsible for escaping any table names or columns that\nmight be reserved words in your [virtualColumns](#virtualcolumns) and\n[fragments](#fragments).\n\nSee the [database fragments option](manual/database.html#queries) for examples\nand the [Queries](manual/queries.html) manual page for further information.\n\n### tableClass\n\nYou can create your own subclass of the `Table` module and define your own\nmethods for queries on the table.\n\nHere's a simple `Users` class which implements a `badgers()` method to\nfetch all rows where the surname is `Badger`.\n\n```js\nexport class Users extends Table {\n  badgers() {\n    return this.fetchRows({ surname: \"Badger\" });\n  }\n}\n```\n\nThen in the schema for the `users` class, define the `Users` class as the\n`tableClass` configuration item.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      tableClass: Users\n    },\n  }\n)\n```\n\nNow you can call the `badgers()` method on the table object for the `users` table.\n\n```js\nconst badgers = await database.table('users').badgers()\n```\n\n### recordClass\n\nVarious table methods have the option to convert rows returned from the database into\nrecord objects.  This provides a simple implementation of the Active Record pattern.\n\nThe default [Record](manual/record.html) class provides basic functionality to update\nthe record, delete it, access related records, and so on.\n\nYou can also define your own record subclass for a table in which you can provide\nadditional methods or wrap the default methods to implement additional business logic,\ndata validation, logging, etc.  In this case you should use the `recordClass` configuration\noption to provide a reference to your custom record class.\n\nThis simple example shows how a custom `User` record class can be defined which adds a\n`hello()` method.\n\n```js\nimport { Database, Record } from  \"@abw/badger-database\";\n\n// define User subclass of Record\nclass User extends Record {\n  hello() {\n    return `Hello ${this.forename} ${this.surname}`;\n  }\n}\n\n// create database connection with users table\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    users: {\n      columns: 'id forename surname',\n      recordClass: User,\n    },\n  }\n)\n\n// insert row and convert returned data to a User record\nconst bobby = await database.table('users').insert({\n  forename: 'Bobby',\n  surname: 'Badger',\n}).record()\n\nconsole.log(bobby.hello())    // Hello Bobby Badger\n```\n\n## Methods\n\n### knex()\n\nReturns a Knex query with the table name pre-defined.\n\n```js\nconst badger =\n  await users\n    .knex()\n    .select('forename')\n    .where({ email: \"bobby@badgerpower.com\" })\n    .first();\n```\n\n### raw()\n\nUsed to generate a raw SQL query for the database.  Equivalent to calling\n`knex.raw()`.\n\n### query(name)\n\nThis method allows you to execute a named query that was previously\ndefined using the [queries](#queries) configuration option.\n\nGiven this database definition:\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tables: {\n    albums: {\n      columns: 'id title'\n      queries: {\n        albumsByNumberOfTracks:\n          'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n          'FROM albums ' +\n          'JOIN tracks ' +\n          'ON tracks.album_id=albums.id ' +\n          'GROUP BY albums.id ' +\n          'ORDER BY n_tracks ',\n      }\n    },\n    tracks: {\n      columns: 'id title album_id'\n    }\n  }\n)\n```\n\nYou can then run the `albumsByNumberOfTracks` query like so:\n\n```js\nconst albums = await database\n  .table('albums')\n  .query('albumsByNumberOfTracks');\n```\n\nYou can embed [fragments](#fragments) in your queries inside angle brackets.\n\nIf the `name` passed to the `query()` method is a single word then it is\nassumed to be a pre-defined named query (and an error will be throw if it\ndoesn't exist).  Otherwise it is assumed to be a raw SQL query.  The query\ncan also include embedded fragments, including those that are auto-generated\nsuch as `table` for the table name and `columns` for the table columns.\n\n```js\nconst albums = await database\n  .table('albums')\n  .query('SELECT &lt;columns&gt; FROM &lt;table&gt; ORDER BY year,id');\n```\n\n### insert(data)\n\nInsert data into the table.  You can pass a single object row or an array of\nrows to insert.  This method will then delegate to [insertRow()](#insertrow-data-)\nor [insertRows()](#insertrows-data-) as appropriate\n\nSingle row:\n\n```js\nconst bobby = await users.insert({\n  forename: 'Bobby',\n  surname: 'Badger',\n  email: 'bobby@badgerpower.com',\n  is_admin: 1,\n})\n```\n\nMultiple rows:\n\n```js\nconst badgers = await users.insert([\n  {\n    forename: 'Bobby',\n    surname: 'Badger',\n    email: 'bobby@badgerpower.com',\n    is_admin: 1,\n  },\n  {\n    forename: 'Brian',\n    surname: 'Badger',\n    email: 'brian@badgerpower.com',\n    is_admin: 0,\n  },\n  {\n    forename: 'Simon',\n    surname: 'Stoat',\n    email: 'simon@stoat.com',\n  }\n]);\n```\n\n### insertRow(data)\n\nThis inserts a single row into the database and then fetches the row back\nout again.  Note that this is different to the [insert() method](https://knexjs.org/guide/query-builder.html#insert)\nprovided by Knex.js which only returns the ID of the inserted record.\n\n```js\nconst bobby = await users.insertRow({\n  forename: 'Bobby',\n  surname: 'Badger',\n  email: 'bobby@badgerpower.com',\n  is_admin: 1,\n})\n```\n\nOne benefit of this approach is in situations where you want to insert a row and then do\nsomething with the inserted data, e.g. return it via an API response.  By fetching the\nrecord after it has been inserted we guarantee that any automatically created column\nvalues are included.  For example, this would include any generated ID value, and also\nany columns that have default values, e.g. a `created` column that defaults to have the\ncurrent timestamp.\n\nAnother feature is that the value returned from the `insertRow()` method is a proxy which\nintercepts the `record()` method call and converts the raw row data to a record object.\n\n```js\nconst bobby = await users.insertRow({\n  forename: 'Bobby',\n  surname: 'Badger',\n  email: 'bobby@badgerpower.com',\n  is_admin: 1,\n}).record()   // convert to record object\n```\n\nThe downside is that you're performing two database queries (an insert and a select) instead\nof one.  If you don't want or need this functionality then you can use the underlying\nKnex.js `insert()` method instead.\n\n### insertRows(data)\n\nThis inserts multiple row into the database and then fetches the rows back\nout again, as per [insertRow()](#insertrow-data-).\n\n```js\nconst badgers = await users.insertRows([\n  {\n    forename: 'Bobby',\n    surname: 'Badger',\n    email: 'bobby@badgerpower.com',\n    is_admin: 1,\n  },\n  {\n    forename: 'Brian',\n    surname: 'Badger',\n    email: 'brian@badgerpower.com',\n    is_admin: 0,\n  },\n  {\n    forename: 'Simon',\n    surname: 'Stoat',\n    email: 'simon@stoat.com',\n  }\n]);\n```\n\nThe method returns an array of inerted row.  You can call the `records()` method to\nconvert them to [Record](manual/record.html) objects.\n\n### selectRow(columns)\n\nReturns a select query to fetch a single row.  The optional `columns` argument\ncan be used to specify the columns or column sets you want to select.  Otherwise\nthe default column set will be used.\n\nThe method returns a proxy around the Knex query.  You can call additional Knex\nmethods on it.\n\n```js\nconst row = await table.selectRow().where({ animal: \"badger\" });\n```\n\nYou can also call the `record()` method to convert\nthe row data to a [Record](manual/record.html) object.\n\n```js\nconst row = await table.selectRow();\nconst row = await table.selectRow(\"column1 column2 ...columnset\");\nconst row = await table.selectRow().where({ email: \"bobby@badgerpower.com\" });\nconst rec = await table.selectRow().where({ email: \"bobby@badgerpower.com\" }).record();\n```\n\n### selectRows(columns)\n\nReturns a select query.  The optional `columns` argument can be used to\nspecify the [columns](#columns) or [columnSets](#columnsets) you want to select.\nOtherwise the default column set will be used.\n\nTo include the columns named in a column set, include the name of the column\nset prefixed by `...`, e.g. `...admin` to include the columns defined in the\n`admin` column set.\n\n```js\nconst rows = await table.selectRows();\nconst rows = await table.selectRows(\"name email ...admin\");\n```\n\nThe method returns a proxy around the Knex query.  You can call additional Knex\nmethods on it.\n\n```js\nconst rows = await table.selectRows().where({ animal: \"badger\" });\n```\n\nYou can also call the `records()` method to convert the data rows to\n[Record](manual/record.html) objects.\n\n```js\nconst records = await table.selectRows().where({ animal: \"badger\" }).records();\n```\n\n### fetchRow(where)\n\nReturns a select query that fetches a single record with the default columns\nselected.  The optional `where` argument can be used to provide additional\nconstraints.  This is shorthand for chaining a `where()` method.\n\nYou can also chain the `record()` method to convert the data row to a\n[Record](manual/record.html) object.\n\n```js\nconst row = await table.fetchRow();\nconst row = await table.fetchRow({ animal: \"badger\" });\nconst rec = await table.fetchRow({ animal: \"badger\" }).record();\n```\n\n### fetchRows(where)\n\nReturns a select query with the default columns selected.  The optional\n`where` argument can be used to provide additional constraints.  This is\nshorthand for chaining a `where()` method.\n\nYou can also chain the `records()` method to convert the data rows to\n[Record](manual/record.html) objects.\n\n```js\nconst rows = await table.fetchRows();\nconst rows = await table.fetchRows({ animal: \"badger\" });\nconst recs = await table.fetchRows({ animal: \"badger\" }).records();\n```\n\n### update(set,where)\n\nThis method can be used to update one or more rows in the database.\nThe first argument is an object defining updates to be set in the rows.\nThe second argument is an object providing the criteria to match rows.\n\nFor example, this call will set the `is_admin` column to `1` for all rows\nwhere the `surname` is `Badger`.\n\n```js\nawait users.update({ is_admin: 1 }, { surname: 'Badger' });\n```\n\nThe `update()` method works like the [insertRows()](#insertrows-data-) method\nin that it will perform two queries: the first to apply the changes and the second\nto re-fetch all the matching rows from the database.\n\n```js\nconst badgers = await users.update({ is_admin: 1 }, { surname: 'Badger' });\n```\n\nThis ensures that the data returned will include any columns that are updated\nby the database.  For example, you might have a `modified` column which is\nautomatically updated when the record is modified.  In MySQL that column\nwould be defined something like this:\n\n```sql\nmodified TIMESTAMP NOT NULL\n         DEFAULT CURRENT_TIMESTAMP\n         ON UPDATE CURRENT_TIMESTAMP\n```\n\nWhen you call the `update()` method the rows will contain the `modified` data\nitems reflecting the new values set in the database table rows.\n\nThe rows that are returned by the `update()` method can be converted to records\nby chaining the `records()` method.\n\n```js\nconst badgers = await users.update({ is_admin: 1 }, { surname: 'Badger' }).records();\n```\n\nIf you don't want this behaviour and just want to update the rows without re-fetching\nthem, then you can \"roll your own\" update using the Knex query returned by the\n[knex()](#knex--) method.\n\n```js\nawait users.knex().update({ is_admin: 1 }).where({ surname: 'Badger' });\n```\n\n### record(query)\n\nMethod to create a record object from a single row returned by a query.\nThis is called automagically by appending a `.record()` method to the\nend of a query returned by `selectRow()` or `fetchRow()`.\n\n```js\nconst badger = await table.fetchRow({ animal: \"badger\" }).record();\n```\n\n### records(query)\n\nMethod to create record objects from all rows returned by a query.\nThis is called automagically by appending a `.records()` method to the\nend of a query returned by `selectRows()`, `fetchRows()` or `update()`.\n\n```js\nconst badgers = await table.fetchRows({ animal: \"badger\" }).records();\n```\n\n## Functions\n\n### table(database,schema)\n\nA function of convenience which wraps a call to `new Table()`.\n\n```js\nimport { table } from '@abw/badger-database';\nconst tab = table(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Table } from '@abw/badger-database';\nconst tab = new Table(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/record.md",
    "name": "./manual/record.md",
    "content": "# Record\n\nThis is a wrapper around a database row.  It is a basic implementation of\nthe Active Record pattern.\n\n* [Overview](#overview)\n* [Methods](#methods)\n  * [update(set)](#update-set-)\n* [Functions](#functions)\n  * [record(table,data,options)](#record-table-data-options-)\n\n## Overview\n\nA record is created from a row by chaining the `record()` method on the\nquery returned by the [insertRow()](manual/table.html#insertrow-data-),\n[selectRow()](manual/table.html#selectrow-columns-) or\n[fetchRow()](manual/table.html#fetchrow-where-) methods of a [Table](manual/table.html).\n\n```js\nconst rec = await table.fetchRow({ animal: \"badger\" }).record();\n```\n\nSimilarly, an array of records is created from an array of rows by chaining the\n`records()` method on the query returned by the [insertRows()](manual/table.html#insertrows-data-),\n[selectRows()](manual/table.html#selectrows-columns-) or\n[fetchRows()](manual/table.html#fetchrows-where-) methods.\n\nThe data items returned in the row can be accessed as properties of the record.\n\n```js\nconst badger = await table.fetchRow({ animal: \"badger\" }).record();\nconsole.log(\"badger email is\", badger.email);\n```\n\n## Methods\n\nIn addition to accessing data properties of the record, you can call additional\nmethods.\n\n### update(set)\n\nMethod to update the record, implemented as a call to the [update()](manual/table.html#update-set-where-)\nmethod of the [Table](manual/table.html).\n\n```js\nawait badger.update({ forename: 'Roberto' });\nconsole.log(\"badger forename is\", badger.forename);     // Roberto\n```\n\nThe database row will be updated and then the data will be reloaded into the record.\nAny changes to columns in the row that are changed on update (e.g. a `modified` column\nwhich sets the current timestamp on update) will be reflected in the record object.\n\n## Functions\n\n### record(table,data,options)\n\nA function of convenience which wraps a call to `new Record()`.\n\n```js\nimport { record } from '@abw/badger-database';\nconst rec = record(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Record } from '@abw/badger-database';\nconst rec = new Record(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/model.md",
    "name": "./manual/model.md",
    "content": "# Model\n\nThis is a proxy around a database providing some syntactic\nsugar for accessing database tables.\n\n* [Overview](#overview)\n\n## Overview\n\nYou can fetch tables from the database by calling the\n[table(name)](manual/database.html#table-name-) method.\n\n```js\nconst users = database.table('users');\n```\n\nThe `database.model` is a proxy object that provides a\nshorthand way to access tables.\n\n```js\nconst users = database.model.users;\n```\n\nAdmittedly you don't save much typing in this example, but\nthe `database.model` proxy also provides access to all of\nthe underlying `database` methods and properties.  So you can\nsafely pass around the `model` as an alias for the `database`\nand benefit from having a shorthand way to access tables.\n\n```js\nmyFunction(database.model);\n\nfunction myFunction(model) {\n  const albums  = model.albums;     // vs database.table('albums')\n  const artists = model.artists;    // vs database.table('artists')\n  const tracks  = model.tracks;     // vs database.table('tracks')\n  // ...etc...\n}\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/queries.md",
    "name": "./manual/queries.md",
    "content": "# Queries\n\nThe `Queries` object is use by the [Database](manual/database.html) and\n[Table](manual/table.html) classes to store and retrieve named SQL queries.\n\n* [Overview](#overview)\n* [Configuration](#configuration)\n  * [queries](#queries)\n  * [fragments](#fragments)\n* [Methods](#methods)\n  * [query(name)](#query-name-)\n  * [expandFragments(query)](#expandfragments-query-)\n* [Functions](#functions)\n  * [queries(schema)](#queries-schema-)\n\n## Overview\n\nWhen you create a database and/or tables in the database you can define\nnamed queries using the [queries](#queries) configuration option.\n\nThis allows you to define your hand-written queries in one place and then\naccess them from your application code using their names.  This allows them\nto be re-used and avoids the need to have raw SQL queries dotted around your\napplication code.\n\nIf you have fragments of SQL that are repeated in various queries then\nyou can define them using the [fragments](#fragments)\nconfiguration option. You can then interpolate them into queries by embedding\nthem in angle brackets, e.g. `<fragmentName>`.\n\n## Configuration\n\n### queries\n\nThis example shows how named `queries` can be defined in the database.\n\n```js\nimport Database from '@abw/badger-database'\n\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  queries: {\n    albumWithMostTracks:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'ORDER BY n_tracks DESC ' +\n      'LIMIT 1',\n    albumsByNumberOfTracks:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'GROUP BY albums.id ' +\n      'ORDER BY n_tracks ',\n    theBestAlbumEverRecorded:\n      'SELECT * ' +\n      'FROM albums ' +\n      'WHERE title=\"The Dark Side of the Moon\"'\n  }\n)\n```\n\nYou can then execute a query by calling the [query(name)](manual/database.html#query-name-)\n\n```js\nconst albums = await database.query('albumsByNumberOfTracks');\n```\n\n### fragments\n\nThis example shows how the repeated SQL fragment can be moved into the\n`fragments` configuration option and then interpolated into `queries`.\n\n```js\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  fragments: {\n    selectAlbumsWithTrackCount:\n      'SELECT albums.title, COUNT(tracks.id) as n_tracks ' +\n      'FROM albums ' +\n      'JOIN tracks ' +\n      'ON tracks.album_id=albums.id ' +\n      'GROUP BY albums.id '\n  },\n  queries: {\n    albumsByNumberOfTracks:\n      '&lt;selectAlbumsWithTrackCount&gt; ' +\n      'ORDER BY n_tracks',\n    albumWithMostTracks:\n      '&lt;selectAlbumsWithTrackCount&gt; ' +\n      'ORDER BY n_tracks DESC ' +\n      'LIMIT 1',\n  }\n)\n```\n\nThere is no change to how queries are executed:\n\n```js\nconst albums = await database.query('albumsByNumberOfTracks');\n```\n\n## Methods\n\n### query(name)\n\nThis is used to fetch and expand any fragments in a query.\n\nThe query can be identified by `name` as a query previously defined\nin the [queries](#queries) configuration option.\n\nRaw SQL queries can also be passed to the method.  If the `name` isn't\na single word then it is assumed to be an SQL query.  You can still use\nany [fragments](#fragments) in the query and they will be expanded.\n\nFor example, a query to return the three albums with the most tracks\ncould be specified like this:\n\n```js\nconst albums = await database.query(\n  '&ltselectAlbumsWithTrackCount&gt; ' +\n  'ORDER BY n_tracks DESC ',\n  'LIMIT 3',\n);\n```\n\n### expandFragments(query)\n\nInternal method used to expand fragments in SQL queries.\n\n## Functions\n\n### queries(schema)\n\nA function of convenience which wraps a call to `new Queries()`.\n\n```js\nimport { queries } from '@abw/badger-database';\nconst qs = queries(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Queries } from '@abw/badger-database';\nconst qs = new Queries(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/connection.md",
    "name": "./manual/connection.md",
    "content": "# Connection\n\nThe `Connection` object is used internally to store the underlying\nKnex connection. It is accessible as `database.connection`.\n\nYou probably don't need to know about this unless\nyou're looking under the hood.\n\n* [Configuration](#configuration)\n* [Properties](#properties)\n  * [config](#config)\n  * [knex](#knex)\n* [Methods](#methods)\n  * [raw(sql)](#raw-sql-)\n  * [pool()](#pool--)\n  * [acquire()](#acquire--)\n  * [destroy()](#destroy--)\n* [Functions](#functions)\n  * [connection()](#connection--)\n\n## Configuration\n\nThe configuration options are the same as for\n[Knex.js](https://knexjs.org/guide/#configuration-options).\n\n## Properties\n\n### config\n\nA copy of the configuration options.\n\n### knex\n\nA reference to the underlying Knex function/object.\n\n## Methods\n\n### raw(sql)\n\nA method to execute a raw query on the underlying Knex\nobject.\n\n```js\nconnection.raw(sql);\n```\n\nThis is equivalent to:\n\n```js\nconnection.knex.raw(sql);\n```\n\n### pool()\n\nReturns the Knex client pool.\n\nEquivalent to:\n\n```js\nconnection.knex.client.pool;\n```\n\n### acquire()\n\nAcquire a connection from the Knex client pool.\n\nEquivalent to:\n\n```js\nconnection.knex.client.pool.acquire();\n```\n\n### destroy()\n\nCalls the [destroy()](https://knexjs.org/guide/#pool) method\non the Knex pool.\n\n## Functions\n\n### connection()\n\nA function of convenience which wraps a call to `new Connection()`.\n\n```js\nimport { connection } from '@abw/badger-database';\nconst conn = connection(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Connection } from '@abw/badger-database';\nconst conn = new Connection(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/schema.md",
    "name": "./manual/schema.md",
    "content": "# Schema\n\nThe `Schema` object is used internally to manage the schema\nfor a table.  You probably don't need to know about this unless\nyou're looking under the hood.\n\n\n* [Configuration](#configuration)\n  * [table](#table)\n  * [columns](#columns)\n  * [virtualColumns](#virtualcolumns)\n  * [columnSets](#columnsets)\n  * [id](#id)\n  * [keys](#keys)\n  * [relations](#relations)\n  * [queries](#queries)\n  * [fragments](#fragments)\n  * [tableClass](#tableclass)\n  * [recordClass](#recordclass)\n* [Properties](#properties)\n  * [database](#database)\n  * [table](#table)\n  * [id](#id)\n  * [keys](#keys)\n  * [keyIndex](#keyindex)\n  * [columnIndex](#columnindex)\n  * [columnNames](#columnnames)\n  * [virtualColumns](#virtualcolumns)\n  * [allColumns](#allcolumns)\n  * [columnSets](#columnSets)\n  * [relations](#relations)\n  * [fragments](#fragments)\n* [Methods](#methods)\n  * [prepareColumns(schema)](#preparecolumns-schema-)\n  * [prepareColumnSets(schema)](#preparecolumnsets-schema-)\n  * [prepareKeys(schema)](#preparekeys-schema-)\n  * [prepareFragments(schema)](#preparefragments-schema-)\n  * [column(name)](#column-name-)\n  * [columnSet(name)](#columnset-name-)\n  * [defaultColumns()](#defaultcolumns--)\n  * [columns(names)](#columns-names-)\n  * [resolveColumns(names)](#resolvecolumns-names-)\n  * [identity(data)](#identity-data-)\n* [Functions](#functions)\n  * [schema(database,tableSchema)](#schema-database-tableschema-)\n\n## Configuration\n\nA schema is created with two arguments.  The first is a `Database`\nobject reference, the second is a data object defining the schema\nfor the table.\n\n```js\nconst scheme = new Scheme(\n  database,\n  {\n    table: 'users',\n    columns: 'id name email'\n  }\n)\n```\n\nThe configuration options are the same as for the [Table](manual/table.html).\n\n### table\n\nThe database table name.\n\n### columns\n\nThe columns in the table that you want to be able to access.\n\n### virtualColumns\n\nColumns that are computed from other columns.\n\n### columnSets\n\nNamed sets of columns.\n\n### id\n\nThe column that uniquely identifies each row.\n\n### keys\n\nThe columns that uniquely identifies each row, used where a table\nhas a compound key.\n\n### relations\n\nUsed to define relations that a table has to other tables.\n\n### queries\n\nUsed to define named SQL queries that are local to the table.\n\n### fragments\n\nUsed to define named SQL query fragments that can be interpolated\ninto [queries](#queries).\n\n### tableClass\n\nA custom class to use for the table instance.\n\n### recordClass\n\nA custom class to use for the record instances.\n\n## Properties\n\n### database\n\nA reference to the [Database](manual/database.html) object.\n\n### table\n\nThe name of the underlying database table.\n\n### id\n\nThe column that uniquely identifies each row.\n\n### keys\n\nThe columns that uniquely identifies each row, used where a table\nhas a compound key.\n\n### keyIndex\n\nA lookup table for [keys](#keys) mapping the column name to a\n`true` value.  Used to quickly determine if a column is a key.\n\n### columnIndex\n\nA lookup table mapping column names to their specification.\n\n### columnNames\n\nAn array of all column names.\n\n### virtualColumns\n\nA lookup table mapping virtual column names to their definitions.\n\n### allColumns\n\nA lookup table mapping the names of all columns (real columns and virtual\ncolumns) to their definitions.\n\n### columnSets\n\nA lookup table mapping the names of all column sets to their definitions.\n\n### relations\n\nA lookup table mapping relation names to their definitions.\n\n### fragments\n\nA lookup table mapping SQL query fragments to their definitions.\n\n## Methods\n\n### prepareColumns(schema)\n\nCreates the [columnIndex](#columnindex) and [columnNames](#columnnames)\nproperties.\n\n### prepareColumnSets(schema)\n\nPrepares the column sets and creates the [columnSets](#columnsets) property.\n\n###  prepareKeys(schema)\n\nPrepares any id or keys definitions and sets the [id](#id),\n[keys](#keys) and [keyIndex](#keyindex) properties.\n\n###  prepareFragments(schema)\n\nMerges any user-supplied [fragments](#fragments) with additional\nfragments specific to the table.  These will all be pre-escaped\naccording to the database client in use.  For example, when using\nsqlite3, a table column of `albums.id` will be escaped as `\"albums\".\"id\"`\nwhereas for MySQL it will be escaped with backticks instead of double\nquote characters.\n\n* `table` - the table name, e.g. `\"albums\"`\n* `columns` - a comma separated list of all table column names,\ne.g. `\"id\", \"title\", \"year\"`\n* `tcolumns` - a comma separated list of all column names prefixed with\nthe table name, e.g. `\"albums\".\"id\", \"albums\".\"title\", \"albums\".\"year\"`\n\nIn additional any [virtualColumns](#virtualcolumns) are included in the\nfragments.  For example, consider a [virtualColumn](#virtualcolumns) defined\nlike this:\n\n```js\nvirtualColumns: {\n  titleYear:    'title || \" (\" || year || \")\"',\n}\n```\n\nIt can be embedded in SQL queries as `<titleYear>` and will expand\nto `title || \" (\" || year || \")\" as titleYear`.\n\nNote that you are responsible for escaping any table names or columns that\nmight be reserved words in your [virtualColumns](#virtualcolumns) and\n[fragments](#fragments).\n\n### column(name)\n\nReturns a real column, a virtual column or throws an error.\n\n### columnSet(name)\n\nReturns a column set.\n\n### defaultColumns()\n\nReturn the default column set, from `this.columnSets.default` or\n`this.columns`.\n\n### columns(names)\n\nExpands a set of column names.\n\n### resolveColumns(names)\n\nResolves a set of columns and/or column sets.\n\n### identity(data)\n\nReturns an object containing the `id` or `keys` from the data\npasses.\n\n## Functions\n\n### schema(database,tableSchema)\n\nA function of convenience which wraps a call to `new Schema()`.\n\n```js\nimport { schema } from '@abw/badger-database';\nconst sch = schema(...);\n```\n\nThis is equivalent to:\n\n```js\nimport { Schema } from '@abw/badger-database';\nconst sch = new Schema(...);\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/tables.md",
    "name": "./manual/tables.md",
    "content": "# Tables\n\nThe `Tables` object is used to provide configuration details\nfor tables.\n\nYou probably don't need to know about this unless you're looking\nunder the hood.\n\n* [Configuration](#configuration)\n  * [tables](#tables)\n* [Methods](#methods)\n  * [table(name)](#table-name-)\n\n## Overview\n\nThe default implementation provide by the `Tables` module is\ntrivially simple.\n\nThe [Database](manual/database.html) object creates a `Tables`\nobject passing it the [tables](manual/database.html#tables) configuration option.\nIt implements the [table(name)](#table-name-) method which returns the corresponding\ntable configuration.\n\nIt exists only as a hook to allow you to provide your own implementation for\nfetching table configuration options.\n\nFor example, instead of defining all your tables up front when you create\nthe [Database](manual/database.html) object, you might prefer to define\neach table configuration in a separate YAML or JSON file and load them\non demand the first time the table is used.\n\nYou can write your own subclass of the `Tables` modules which only needs\nto implement the [table(name)](#table-name-) method.  It can then load\nthe relevant file and return the details.\n\n```js\nimport { Tables } from '@abw/badger-database';\n\nexport class MyTables extends Tables {\n  table(name) {\n    const config = // your code goes here;\n\n    if (config) {\n        return config;  // success\n    }\n    else {\n        return false;   // not found\n    }\n  }\n}\n\nexport default MyTables\n```\n\nProvide the name of your subclass to the database using the\n[tablesClass](manual/database.html#tablesclass) configuration option.  The\ndatabase constructor will instantiate an instance of your class, passing\nit any [tables](manual/database.html#tables) configuration option that it\nhas been passed.\n\n```js\nimport Database from '@abw/badger-database';\nimport MyTables from './path/to/MyTables.js';\n\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tablesClass: MyTables\n)\n```\n\nAlternately you can pre-instantiate an instance of your class and pass it\nas the [tablesObject](manual/database.html#tablesobject) configuration option.\n\n```js\nimport Database from '@abw/badger-database';\nimport MyTables from './path/to/MyTables.js';\n\nconst myTables = new MyTables();\nconst database = new Database(\n  // ...client, connection, pool, etc...\n  tablesObject: myTables\n)\n```\n\n## Configuration\n\n### tables\n\nA hash object mapping table names to the configuration options for\nthe table.\n\n## Methods\n\n### table(name)\n\nReturns the configuration for the named table.  If you subclass the module\nthen you should re-define this method to implement any custom functionality.\n\nIf an invalid table name is provided then it should return a false value.\nThe method is called by the database [hasTable()](manual/database.html#hastable--)\nmethod.  This in turn is called by the database [table(name)](manual/database.html#hastable--) which will take responsibility for throwing an error if the\ntable doesn't exist.\n\nAny other errors that occur (e.g. invalid markup while reading a data file) should\nbe thrown as errors.\n\n",
    "static": true,
    "access": "public"
  }
]