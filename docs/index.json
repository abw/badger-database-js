[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Config.js",
    "content": "import process from 'node:process'\n\nconst defaults = {\n  client:   'mysql2',\n  host:     'localhost',\n  port :    3306,\n  pool_min: 2,\n  pool_max: 10,\n}\n\nconst client = process.env.DATABASE_CLIENT || defaults.client;\n\nconst connection = process.env.DATABASE_CONNECTION || {\n  host:     process.env.DATABASE_HOST || defaults.host,\n  port:     process.env.DATABASE_PORT || defaults.port,\n  database: process.env.DATABASE_NAME,\n  user:     process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  // filename: process.env.DATABASE_FILENAME,\n  // flags:    splitList(process.env.DATABASE_FLAGS),\n};\n\nconst pool = {\n  min: process.env.DB_POOL_MIN || defaults.pool_min,\n  max: process.env.DB_POOL_MAX || defaults.pool_max,\n};\n\nexport const Config = { client, connection, pool };\n\nexport default Config;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"client\": string, \"host\": string, \"port\": number, \"pool_min\": number, \"pool_max\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "client",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~client",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "connection",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~connection",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "pool",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~pool",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"min\": *, \"max\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "Config",
    "memberof": "src/Config.js",
    "static": true,
    "longname": "src/Config.js~Config",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Config}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "{\"client\": *, \"connection\": *, \"pool\": *}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/Constants.js",
    "content": "// engine parameters\nexport const databaseStringRegex = /^(\\w+):\\/\\/(?:(?:(\\w+)(?::(\\w+))?@)?(\\w+)(?::(\\d+))?\\/)?(\\w+)/;\nexport const databaseStringElements = {\n  engine:   1,\n  user:     2,\n  password: 3,\n  host:     4,\n  port:     5,\n  database: 6,\n};\nexport const databaseAliases = {\n  username: 'user',\n  pass:     'password',\n  hostname: 'host',\n  file:     'filename',\n};\n\n// table column configuration/validation\nexport const defaultIdColumn = 'id';\nexport const bitSplitter = /:/;\nexport const allColumns = '*';\nexport const whereTrue = 'true';\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "databaseStringRegex",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseStringRegex",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{databaseStringRegex}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "databaseStringElements",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseStringElements",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{databaseStringElements}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "{\"engine\": number, \"user\": number, \"password\": number, \"host\": number, \"port\": number, \"database\": number}"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "databaseAliases",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~databaseAliases",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{databaseAliases}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"username\": string, \"pass\": string, \"hostname\": string, \"file\": string}"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "defaultIdColumn",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~defaultIdColumn",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{defaultIdColumn}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "bitSplitter",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~bitSplitter",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{bitSplitter}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "allColumns",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~allColumns",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{allColumns}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "whereTrue",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~whereTrue",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{whereTrue}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/Database.js",
    "content": "import Config from './Config.js'\nimport modelProxy from './Proxy/Model.js';\nimport Table from './Table.js';\nimport Tables from './Tables.js';\nimport Queries from './Queries.js';\nimport { engine } from './Engines.js';\nimport { invalid, missing } from './Utils/Error.js';\nimport proxymise from 'proxymise';\nimport { addDebugMethod } from './Utils/Debug.js';\n\nconst defaults = {\n  tablesClass: Tables\n};\n\nexport class Database {\n  constructor(engine, params={ }) {\n    const config = { ...defaults, ...Config, ...params };\n    this.engine  = engine || missing('engine');\n    this.queries = new Queries(config);\n    this.tables  = config.tablesObject || new config.tablesClass(config.tables);\n    this.model   = modelProxy(this);\n    this.waiter  = proxymise(this);\n    this.state   = {\n      table: { },\n    };\n    addDebugMethod(this, 'database', config);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Engine methods\n  //-----------------------------------------------------------------------------\n  acquire() {\n    return this.engine.acquire();\n  }\n  release(connection) {\n    this.engine.release(connection);\n  }\n  query(name) {\n    this.debugData(\"query()\", { name });\n    return this.queries.query(name);\n  }\n  run(query, params, options) {\n    this.debugData(\"run()\", { query, params, options });\n    return this.engine.run(this.query(query), params, options)\n  }\n  any(query, params, options) {\n    this.debugData(\"any()\", { query, params, options });\n    return this.engine.any(this.query(query), params, options)\n  }\n  all(query, params, options) {\n    this.debugData(\"all()\", { query, params, options });\n    return this.engine.all(this.query(query), params, options)\n  }\n  one(query, params, options) {\n    this.debugData(\"one()\", { query, params, options });\n    return this.engine.one(this.query(query), params, options)\n  }\n  async table(name) {\n    return this.state.table[name]\n      ||=  this.initTable(name);\n  }\n  hasTable(name) {\n    return this.tables.table(name);\n  }\n  initTable(name) {\n    const schema = this.hasTable(name) || invalid('table', name);\n    const tclass = schema.tableClass   || Table;\n    const topts  = schema.tableOptions || { };\n    schema.table ||= name;\n    return new tclass(this, { ...schema, ...topts });\n  }\n  quote(name) {\n    return this.engine.quote(name);\n  }\n  disconnect() {\n    return this.engine.destroy();\n  }\n  destroy() {\n    console.log('destroy() is deprecated, use disconnect() instead');\n    return this.disconnect();\n  }\n}\n\nexport const connect = async config => {\n  const e = await engine(config);\n  return new Database(e, config)\n}\n\nexport default Database\n\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Database.js",
    "static": true,
    "longname": "src/Database.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"tablesClass\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Database",
    "memberof": "src/Database.js",
    "static": true,
    "longname": "src/Database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Database}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#engine",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#queries",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "tables",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#tables",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "model",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#model",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "waiter",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#waiter",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "state",
    "memberof": "src/Database.js~Database",
    "static": false,
    "longname": "src/Database.js~Database#state",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"table\": *}"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "acquire",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#acquire",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "release",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#release",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "query",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#query",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "run",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#run",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "any",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#any",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "all",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#all",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "one",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#one",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "table",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Database.js~Database#table",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "hasTable",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#hasTable",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "initTable",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#initTable",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "quote",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#quote",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Database.js~Database#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "connect",
    "memberof": "src/Database.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Database.js~connect",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{connect}",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/Engine/Mysql.js",
    "content": "import mysql from 'mysql2/promise';\nimport Engine from '../Engine.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class MysqlEngine extends Engine {\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debug(\n      \"connect()\\n  database: %o\",\n      this.database\n    );\n    return mysql.createConnection(this.database);\n  }\n  async connected() {\n    return true;\n  }\n  async disconnect(connection) {\n    this.debug(\"disconnect()\");\n    connection.destroy();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async run(sql, params, options) {\n    this.debug(\n      \"run()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    [params, options] = this.optionalParams(params, options);\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([result]) => result );\n  }\n  async any(sql, params, options) {\n    this.debug(\n      \"any()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([rows]) => rows[0] );\n  }\n  async all(sql, params, options) {\n    this.debug(\n      \"all()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    return this\n      .execute(sql, query => query.execute(params), options)\n      .then( ([rows]) => rows );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    const keys = options.keys || [defaultIdColumn];\n    const id = keys[0];\n    result[0].changes ||= result[0].affectedRows || 0;\n    result[0].id      ||= result[0].insertId || null;\n    result[0][id]     ||= result[0].insertId || null;\n    return result;\n  }\n}\n\nexport default MysqlEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Mysql.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "MysqlEngine",
    "memberof": "src/Engine/Mysql.js",
    "static": true,
    "longname": "src/Engine/Mysql.js~MysqlEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{MysqlEngine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Mysql.js~MysqlEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Mysql.js~MysqlEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/Engine/Postgres.js",
    "content": "import pg from 'pg';\nimport Engine from '../Engine.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class PostgresEngine extends Engine {\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debug(\n      \"connect()\\n  database: %o\",\n      this.database\n    );\n    const client = new pg.Client(this.database);\n    await client.connect();\n    return client;\n  }\n  async connected() {\n    return true;\n  }\n  async disconnect(client) {\n    this.debug(\"disconnect()\");\n    client.end();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async execute(sql, params, options={}) {\n    this.debug(\n      \"execute()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    const client = await this.acquire();\n    const result = await client.query(sql, params);\n    this.release(client);\n    return options.sanitizeResult\n      ? this.sanitizeResult(result, options)\n      : result;\n  }\n  async run(sql, params, options) {\n    this.debug(\n      \"run()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    [params, options] = this.optionalParams(params, options);\n    return this\n      .execute(sql, params, options)\n  }\n  async any(sql, params, options) {\n    this.debug(\n      \"any()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    return this\n      .execute(sql, params, options)\n      .then( ({rows}) => rows[0] );\n  }\n  async all(sql, params, options) {\n    this.debug(\n      \"all()\\n       sql: %s\\n    params: %o\\n   options: %o\",\n      sql, params, options\n    );\n    return this\n      .execute(sql, params, options)\n      .then( ({rows}) => rows );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    // console.log('sanitizeResult() result: ', result);\n    // console.log('sanitizeResult() options: ', options);\n    result.changes ||= result.rowCount || 0;\n    if (result.command === 'INSERT' && result.rows?.length) {\n      const keys = options.keys || [defaultIdColumn];\n      keys.forEach(\n        key => result[key] ||= result.rows[0][key]\n      )\n      result.id ||= result[keys[0]];\n    }\n    return result;\n  }\n  formatPlaceholder(n) {\n    return '$' + n;\n  }\n  formatReturning(keys) {\n    return ' RETURNING ' + this.formatColumns(keys);\n  }\n}\n\nexport default PostgresEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Postgres.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "PostgresEngine",
    "memberof": "src/Engine/Postgres.js",
    "static": true,
    "longname": "src/Engine/Postgres.js~PostgresEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{PostgresEngine}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "client",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#execute",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "formatPlaceholder",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatPlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "formatReturning",
    "memberof": "src/Engine/Postgres.js~PostgresEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Postgres.js~PostgresEngine#formatReturning",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/Engine/Sqlite.js",
    "content": "import Database from 'better-sqlite3';\nimport Engine from '../Engine.js';\nimport { missing } from '../Utils/Error.js';\nimport { defaultIdColumn } from '../Constants.js';\n\nexport class SqliteEngine extends Engine {\n  configure(config) {\n    this.filename = config.database.filename || missing('filename');\n    this.options  = config.database.options  || { };\n\n    // better-sqlite3 is synchronous (because Sqlite serialises all\n    // requests anyway), so there's no need/benefit in using a pool\n    config.pool     ||= { };\n    config.pool.min ||= 1;\n    config.pool.max ||= 1;\n\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods\n  //-----------------------------------------------------------------------------\n  async connect() {\n    this.debugData(\"connect()\", { filename: this.filename, options: this.options });\n    return new Database(this.filename, this.options);\n  }\n  async connected(db) {\n    return db.open;\n  }\n  async disconnect(db) {\n    this.debug(\"disconnect()\");\n    db.close();\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query methods\n  //-----------------------------------------------------------------------------\n  async run(sql, params=[], options) {\n    this.debugData(\"run()\", { sql, params, options });\n    [params, options] = this.optionalParams(params, options);\n    return this.execute(sql, query => query.run(...params), options);\n  }\n  async any(sql, params=[], options) {\n    this.debugData(\"any()\", { sql, params, options });\n    return this.execute(sql, query => query.get(...params), options);\n  }\n  async all(sql, params=[], options) {\n    this.debugData(\"all()\", { sql, params, options });\n    return this.execute(sql, query => query.all(...params), options);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result, options={}) {\n    result.changes ||= result.rowCount || 0;\n    const keys = options.keys || [defaultIdColumn];\n    const id = keys[0];\n    result[id] ||= result.lastInsertRowid;\n    result.id  ||= result.lastInsertRowid;\n    return result;\n  }\n}\n\nexport default SqliteEngine",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine/Sqlite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "SqliteEngine",
    "memberof": "src/Engine/Sqlite.js",
    "static": true,
    "longname": "src/Engine/Sqlite.js~SqliteEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{SqliteEngine}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Engine.js~Engine"
    ]
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "filename",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#filename",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "options",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#options",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "db",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "db",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#run",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#any",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#all",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine/Sqlite.js~SqliteEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine/Sqlite.js~SqliteEngine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "src/Engine.js",
    "content": "import { Pool } from 'tarn';\nimport { missing, notImplementedInBaseClass, unexpectedRowCount } from \"./Utils/Error.js\";\nimport { format } from './Utils/Format.js';\nimport { hasValue, isArray, isObject, splitList } from '@abw/badger-utils';\nimport { addDebugMethod } from './Utils/Debug.js';\nimport { allColumns, whereTrue } from './Constants.js';\n\nconst notImplemented = notImplementedInBaseClass('Engine');\n\nconst poolDefaults = {\n  min: 2,\n  max: 10,\n  propagateCreateError: true\n}\n\nconst quoteChars = {\n  mysql:   '`',\n  default: '\"',\n};\n\nconst queries = {\n  insert: 'INSERT INTO <table> (<columns>) VALUES (<placeholders>) <returning>',\n  update: 'UPDATE <table> SET <set> WHERE <where>',\n  delete: 'DELETE FROM <table> WHERE <where>',\n  select: 'SELECT <columns> FROM <table> WHERE <where> <order>',\n}\n\nexport class Engine {\n  constructor(config={}) {\n    this.engine    = config.engine   || missing('engine');\n    this.database  = config.database || missing('database');\n    this.config    = this.configure(config);\n    this.pool      = this.initPool(config.pool);\n    this.quoteChar = quoteChars[this.engine||'default'] || quoteChars.default;\n    this.escQuote  = `\\\\${this.quoteChar}`;\n    addDebugMethod(this, 'engine', config);\n  }\n  configure(config) {\n    return config;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool configuration\n  //-----------------------------------------------------------------------------\n  initPool(options={}) {\n    return new Pool({\n      create: () => {\n        this.debug(\"connecting to pool\");\n        return this.connect();\n      },\n      validate: connection => {\n        return this.connected(connection);\n      },\n      destroy: connection => {\n        this.debug(\"disconnecting from pool\");\n        return this.disconnect(connection);\n      },\n      ...poolDefaults,\n      ...options\n    });\n  }\n\n  //-----------------------------------------------------------------------------\n  // Pool connections methods - must be implemented by subclasses\n  //-----------------------------------------------------------------------------\n  async connect() {\n    notImplemented(\"connect()\")\n  }\n  async connected() {\n    notImplemented(\"connected()\")\n  }\n  async disconnect() {\n    notImplemented(\"disconnect()\")\n  }\n\n  //-----------------------------------------------------------------------------\n  // Methods to acquire and release connections from the pool\n  //-----------------------------------------------------------------------------\n  async acquire() {\n    this.debug(\"acquire()\");\n    return this.pool.acquire().promise;\n  }\n  async release(connection) {\n    this.debug(\"release()\");\n    await this.pool.release(connection);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Generic query methods\n  //-----------------------------------------------------------------------------\n  async execute(sql, action, options={}) {\n    this.debugData(\"execute()\", { sql, options });\n    const connection = await this.acquire();\n    const query      = await this.prepare(connection, sql);\n    const result     = await action(query);\n    this.release(connection);\n    return options.sanitizeResult\n      ? this.sanitizeResult(result, options)\n      : result;\n  }\n  async prepare(connection, sql) {\n    this.debugData(\"prepare()\", { sql });\n    return connection.prepare(sql);\n  }\n  optionalParams(params, options) {\n    if (isObject(params)) {\n      options = params;\n      params = [ ];\n    }\n    return [params, options];\n  }\n  async run() {\n    notImplemented('run()');\n  }\n  async any() {\n    notImplemented('any()');\n  }\n  async all() {\n    notImplemented('all()');\n  }\n  async one(sql, params, options) {\n    this.debugData(\"one()\", { sql, params, options });\n    const rows = await this.all(sql, params, options);\n    if (rows.length === 1) {\n      return rows[0];\n    }\n    else {\n      unexpectedRowCount(rows.length);\n    }\n  }\n\n  //-----------------------------------------------------------------------------\n  // Specific queries: insert, update and delete\n  //-----------------------------------------------------------------------------\n  async insert(table, colnames, values, keys) {\n    this.debugData(\"insert()\", { table, colnames, values, keys });\n    const columns      = this.formatColumns(colnames);\n    const placeholders = this.formatPlaceholders(values);\n    const returning    = this.formatReturning(keys);\n    const sql          = format(queries.insert, { table, columns, placeholders, returning});\n    this.debug('insert() generated SQL:', sql);\n    return this.run(sql, values, { keys, sanitizeResult: true });\n  }\n  async update(table, datacols, datavals, wherecols, wherevals) {\n    this.debugData(\"update()\", { table, datacols, datavals, wherecols, wherevals });\n    const set    = this.formatColumnPlaceholders(datacols);\n    const where  = this.formatWherePlaceholders(wherecols, wherevals, datacols.length + 1);\n    const values = this.prepareValues(wherevals);\n    const sql    = format(queries.update, { table, set, where });\n    this.debug('update() generated SQL:', sql);\n    return this.run(sql, [...datavals, ...values], { sanitizeResult: true });\n  }\n  async delete(table, wherecols, wherevals) {\n    this.debugData(\"delete()\", { table, wherecols, wherevals });\n    const where  = this.formatWherePlaceholders(wherecols, wherevals);\n    const values = this.prepareValues(wherevals);\n    const sql    = format(queries.delete, { table, where });\n    this.debug('delete() generated SQL:', sql);\n    return this.run(sql, values, { sanitizeResult: true });\n  }\n\n  //-----------------------------------------------------------------------------\n  // Select queries\n  //-----------------------------------------------------------------------------\n  selectQuery(table, wherecols, wherevals, options={}) {\n    this.debugData(\"selectQuery()\", { table, wherecols, options });\n    const columns = this.formatColumns(options.columns);\n    const where   = this.formatWherePlaceholders(wherecols, wherevals);\n    const order   = this.formatOrderBy(options.orderBy || options.order);\n    return [\n      format(queries.select, { table, columns, where, order }),\n      this.prepareValues(wherevals)\n    ]\n  }\n  async selectAll(table, wherecols, wherevals, options={}) {\n    this.debugData(\"selectAll()\", { table, wherecols, wherevals, options });\n    const [sql, values] = this.selectQuery(table, wherecols, wherevals, options);\n    this.debug('selectAll() generated SQL:', sql);\n    return this.all(sql, values);\n  }\n  async selectAny(table, wherecols, wherevals, options={}) {\n    this.debugData(\"selectAny()\", { table, wherecols, wherevals, options });\n    const [sql, values] = this.selectQuery(table, wherecols, wherevals, options);\n    this.debug('selectAny() generated SQL:', sql);\n    return this.any(sql, values);\n  }\n  async selectOne(table, wherecols, wherevals, options={}) {\n    this.debugData(\"selectOne()\", { table, wherecols, wherevals, options });\n    const [sql, values] = this.selectQuery(table, wherecols, wherevals, options);\n    this.debug('selectOne() generated SQL:', sql);\n    return this.one(sql, values);\n  }\n  async select(...args) {\n    return this.selectAll(...args);\n  }\n\n  //-----------------------------------------------------------------------------\n  // Query formatting\n  //-----------------------------------------------------------------------------\n  sanitizeResult(result) {\n    return result;\n  }\n  quote(name) {\n    return name\n      .split(/\\./)\n      .map(\n        part => this.quoteChar + part.replaceAll(this.quoteChar, this.escQuote) + this.quoteChar)\n      .join('.');\n  }\n  quoteTableColumn(table, column) {\n    // if the column already has a dot then we quote it as is,\n    // otherwise we explicitly add the table name\n    return column.match(/\\./)\n      ? this.quote(column)\n      : this.quote(`${table}.${column}`);\n  }\n  formatPlaceholder() {\n    return '?';\n  }\n  formatColumnPlaceholder(column, n) {\n    return `${this.quote(column)}=${this.formatPlaceholder(n)}`;\n  }\n  formatWherePlaceholder(column, value, n) {\n    // value can be an array containing a comparison operator and a value,\n    // e.g. ['>' 1973], otherwise we assume it's an equality operator, '='\n    const cmp = isArray(value) ? value[0] : '=';\n    return `${this.quote(column)}${cmp}${this.formatPlaceholder(n)}`;\n  }\n  formatPlaceholders(values, n=1) {\n    return values.map(\n      () => this.formatPlaceholder(n++)\n    ).join(', ');\n  }\n  formatColumnPlaceholders(columns, n=1, joint=', ') {\n    return columns.map(\n      column => this.formatColumnPlaceholder(column, n++)\n    ).join(joint);\n  }\n  formatWherePlaceholders(columns, values, n=1, joint=' AND ') {\n    let i = 0;\n    return columns.map(\n      column => this.formatWherePlaceholder(column, values[i++], n++)\n    ).join(joint) || whereTrue;\n  }\n  formatColumns(columns) {\n    return hasValue(columns)\n      ? splitList(columns)\n        .map(\n          column => this.quote(column)\n        )\n        .join(', ')\n      : allColumns;\n  }\n  formatReturning() {\n    return '';\n  }\n  formatOrderBy(order) {\n    return hasValue(order)\n      ? `ORDER BY ${order}`\n      : '';\n  }\n  prepareValues(values) {\n    return values.map(\n      // values can be arrays with a comparison, e.g. ['>', 1973], in which case\n      // we only want the second element\n      value => isArray(value)\n        ? value[1]\n        : value\n    )\n  }\n\n\n  //-----------------------------------------------------------------------------\n  // Cleanup\n  //-----------------------------------------------------------------------------\n  async destroy() {\n    this.debug(\"destroy() \");\n    await this.pool.destroy();\n  }\n}\n\nexport default Engine\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "notImplemented",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~notImplemented",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "poolDefaults",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~poolDefaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"min\": number, \"max\": number, \"propagateCreateError\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "quoteChars",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~quoteChars",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"mysql\": string, \"default\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "queries",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~queries",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"insert\": string, \"update\": string, \"delete\": string, \"select\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "Engine",
    "memberof": "src/Engine.js",
    "static": true,
    "longname": "src/Engine.js~Engine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Engine}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "database",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#database",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "config",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#config",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "pool",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#pool",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "quoteChar",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#quoteChar",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "escQuote",
    "memberof": "src/Engine.js~Engine",
    "static": false,
    "longname": "src/Engine.js~Engine#escQuote",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "configure",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#configure",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "initPool",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#initPool",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "connect",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#connect",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "connected",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#connected",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "disconnect",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#disconnect",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "acquire",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#acquire",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "release",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#release",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#execute",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "prepare",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#prepare",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "connection",
        "types": [
          "*"
        ]
      },
      {
        "name": "sql",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "optionalParams",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#optionalParams",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "run",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#run",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "any",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#any",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "all",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#all",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "one",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#one",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "sql",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "insert",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#insert",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "colnames",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "update",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#update",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "datacols",
        "types": [
          "*"
        ]
      },
      {
        "name": "datavals",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#delete",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "selectQuery",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#selectQuery",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "selectAll",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectAll",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "selectAny",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectAny",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "selectOne",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#selectOne",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherecols",
        "types": [
          "*"
        ]
      },
      {
        "name": "wherevals",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "select",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#select",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "sanitizeResult",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#sanitizeResult",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "quote",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#quote",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "quoteTableColumn",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#quoteTableColumn",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "column",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "formatPlaceholder",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatPlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "formatColumnPlaceholder",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumnPlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "formatWherePlaceholder",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatWherePlaceholder",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "formatPlaceholders",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "formatColumnPlaceholders",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumnPlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": ", ",
        "defaultValue": ", "
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "formatWherePlaceholders",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatWherePlaceholders",
    "access": "public",
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "values",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "joint",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": " AND ",
        "defaultValue": " AND "
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "formatColumns",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatColumns",
    "access": "public",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "formatReturning",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatReturning",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "formatOrderBy",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#formatOrderBy",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "order",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "prepareValues",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Engine.js~Engine#prepareValues",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/Engine.js~Engine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Engine.js~Engine#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 276,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/Engines.js",
    "content": "import { databaseConfig } from \"./Utils/Database.js\";\nimport { invalid, missing } from \"./Utils/Error.js\";\n\nlet Engines = { };\n\nexport const registerEngine = (name, module) => {\n  Engines[name] = async config => {\n    const engimp = await import(module);\n    const engcls = engimp.default;\n    return new engcls(config);\n  }\n}\n\nregisterEngine('sqlite',     './Engine/Sqlite.js');\nregisterEngine('mysql',      './Engine/Mysql.js');\nregisterEngine('postgres',   './Engine/Postgres.js');\nregisterEngine('postgresql', './Engine/Postgres.js');\n\n//-----------------------------------------------------------------------------\n// Engine constructor\n//-----------------------------------------------------------------------------\nexport const engine = async config => {\n  config = databaseConfig(config);\n  const engine = config.engine || missing('database.engine');\n  const handler = Engines[engine] || invalid('database.engine', engine);\n  return await handler(config);\n}\n\nexport default Engines;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Engines.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "registerEngine",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Engines.js~registerEngine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{registerEngine}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "engine",
    "memberof": "src/Engines.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Engines.js~engine",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{engine}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "Engines",
    "memberof": "src/Engines.js",
    "static": true,
    "longname": "src/Engines.js~Engines",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "Engines",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/Operator/After.js",
    "content": "import Operator from '../Operator.js';\n\nexport class After extends Operator {\n  initOperator() {\n    this.key = 'after';\n  }\n}\n\nexport default After",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/After.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "After",
    "memberof": "src/Operator/After.js",
    "static": true,
    "longname": "src/Operator/After.js~After",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{After}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/After.js~After",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/After.js~After#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/After.js~After",
    "static": false,
    "longname": "src/Operator/After.js~After#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "src/Operator/Before.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Before extends Operator {\n  initOperator() {\n    this.key = 'before';\n  }\n}\n\nexport default Before",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Before.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "class",
    "name": "Before",
    "memberof": "src/Operator/Before.js",
    "static": true,
    "longname": "src/Operator/Before.js~Before",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Before}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Before.js~Before",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Before.js~Before#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Before.js~Before",
    "static": false,
    "longname": "src/Operator/Before.js~Before#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/Operator/Database.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Database extends Operator {\n  initOperator(args) {\n    this.database = args;\n  }\n  resolve(context) {\n    return {\n      database: this.database,\n      ...context,\n    }\n  }\n  dump() {\n    this.debug(\"From dump\")\n    return this.keyword + ' ' + this.table;\n  }\n}\n\nexport default Database",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "class",
    "name": "Database",
    "memberof": "src/Operator/Database.js",
    "static": true,
    "longname": "src/Operator/Database.js~Database",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Database}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "database",
    "memberof": "src/Operator/Database.js~Database",
    "static": false,
    "longname": "src/Operator/Database.js~Database#database",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"database\": *, ...context: Object}"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "dump",
    "memberof": "src/Operator/Database.js~Database",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Database.js~Database#dump",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/Operator/From.js",
    "content": "import Operator from '../Operator.js';\n\nexport class From extends Operator {\n  initOperator() {\n    this.key = 'from';\n  }\n}\n\nexport default From",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/From.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "From",
    "memberof": "src/Operator/From.js",
    "static": true,
    "longname": "src/Operator/From.js~From",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{From}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/From.js~From",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/From.js~From#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/From.js~From",
    "static": false,
    "longname": "src/Operator/From.js~From#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/Operator/Group.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Group extends Operator {\n  initOperator() {\n    this.key = 'group';\n  }\n}\n\nexport default Group",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Group.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "Group",
    "memberof": "src/Operator/Group.js",
    "static": true,
    "longname": "src/Operator/Group.js~Group",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Group}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Group.js~Group",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Group.js~Group#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Group.js~Group",
    "static": false,
    "longname": "src/Operator/Group.js~Group#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/Operator/Having.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Having extends Operator {\n  initOperator() {\n    this.key = 'having';\n  }\n}\n\nexport default Having",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Having.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "class",
    "name": "Having",
    "memberof": "src/Operator/Having.js",
    "static": true,
    "longname": "src/Operator/Having.js~Having",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Having}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Having.js~Having",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Having.js~Having#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Having.js~Having",
    "static": false,
    "longname": "src/Operator/Having.js~Having#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "file",
    "name": "src/Operator/Join.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Join extends Operator {\n  initOperator() {\n    this.key = 'join';\n  }\n}\n\nexport default Join",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Join.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "class",
    "name": "Join",
    "memberof": "src/Operator/Join.js",
    "static": true,
    "longname": "src/Operator/Join.js~Join",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Join}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Join.js~Join",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Join.js~Join#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Join.js~Join",
    "static": false,
    "longname": "src/Operator/Join.js~Join#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/Operator/Order.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Order extends Operator {\n  initOperator() {\n    this.key = 'order';\n  }\n}\n\nexport default Order",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Order.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "Order",
    "memberof": "src/Operator/Order.js",
    "static": true,
    "longname": "src/Operator/Order.js~Order",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Order}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Order.js~Order",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Order.js~Order#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Order.js~Order",
    "static": false,
    "longname": "src/Operator/Order.js~Order#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/Operator/Select.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Select extends Operator {\n  initOperator() {\n    this.key = 'select';\n  }\n}\n\nexport default Select",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Select.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "Select",
    "memberof": "src/Operator/Select.js",
    "static": true,
    "longname": "src/Operator/Select.js~Select",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Select}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Select.js~Select",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Select.js~Select#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Select.js~Select",
    "static": false,
    "longname": "src/Operator/Select.js~Select#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/Operator/Where.js",
    "content": "import Operator from '../Operator.js';\n\nexport class Where extends Operator {\n  initOperator() {\n    this.key = 'where';\n  }\n}\n\nexport default Where",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator/Where.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "class",
    "name": "Where",
    "memberof": "src/Operator/Where.js",
    "static": true,
    "longname": "src/Operator/Where.js~Where",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Where}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/Operator.js~Operator"
    ]
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator/Where.js~Where",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator/Where.js~Where#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator/Where.js~Where",
    "static": false,
    "longname": "src/Operator/Where.js~Where#key",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/Operator.js",
    "content": "// work in progress / experiment\nimport { addDebug } from \"@abw/badger\";\nimport { hasValue, objMap } from \"@abw/badger-utils\";\n\nconst defaultContext = () => ({\n  after:   [ ],\n  before:  [ ],\n  from:    [ ],\n  group:   [ ],\n  having:  [ ],\n  join:    [ ],\n  order:   [ ],\n  select:  [ ],\n  where:   [ ],\n  unknown: [ ],\n});\n\n// Each of the parts of a select query in order.  The first entry\n// is the opening keyword, the second is the text used to join\n// multiple values, e.g. { where: ['a=1', 'b=2'] } is expanded to\n// WHERE a=1 AND b=2.  Note that the entries must have whitespace\n// where applicable, e.g. after the opening keyword, e.g. 'WHERE ',\n// and around joining keywords/syntax, e.g. ' AND '\nconst parts = {\n  before:  ['',          \"\\n\"     ],\n  select:  ['SELECT ',   ', '     ],\n  from:    ['FROM ',     ', '     ],\n  join:    ['JOIN ',     \"\\nJOIN \"],\n  where:   ['WHERE ',    ' AND '  ],\n  group:   ['GROUP BY ', ', '     ],\n  having:  ['HAVING ',   ' AND '  ],\n  order:   ['ORDER BY ', ', '     ],\n  after:   ['',          \"\\n\"     ],\n};\n\nexport class Operator {\n  constructor(factory, parent, ...args) {\n    this.factory = factory;\n    this.parent  = parent;\n    this.args    = args;\n    this.key     = 'unknown';\n    this.initOperator(...args);\n\n    // debugging\n    addDebug(this, false, 'Operator > ', 'red');\n    this.debug(\"parent: \", parent?.constructor.name);\n    this.debug(\"args: \", args);\n  }\n  initOperator() {\n    // stub for subclasses\n  }\n  resolveChain() {\n    return this.resolve(\n      this.parent\n        ? this.parent.resolveChain()\n        : defaultContext()\n    );\n  }\n  resolve(context) {\n    const key = this.key;\n    return {\n      ...context,\n      [key]: [...context[key], ...this.args]\n    }\n  }\n  sqlFragments(context=this.resolveChain()) {\n    return objMap(\n      context,\n      (value, key) => {\n        const part = parts[key];\n        return part && value.length\n          ? part[0] + value.join(part[1])\n          : null;\n      }\n    )\n  }\n  sql() {\n    const frags = this.sqlFragments();\n\n    return Object.keys(parts)\n      .map( part => frags[part] )\n      .filter( i => hasValue(i) )\n      .join(\"\\n\");\n  }\n}\n\nexport default Operator",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "defaultContext",
    "memberof": "src/Operator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Operator.js~defaultContext",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "parts",
    "memberof": "src/Operator.js",
    "static": true,
    "longname": "src/Operator.js~parts",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"before\": *, \"select\": *, \"from\": *, \"join\": *, \"where\": *, \"group\": *, \"having\": *, \"order\": *, \"after\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "class",
    "name": "Operator",
    "memberof": "src/Operator.js",
    "static": true,
    "longname": "src/Operator.js~Operator",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Operator}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "factory",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#factory",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "parent",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#parent",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "args",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#args",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "key",
    "memberof": "src/Operator.js~Operator",
    "static": false,
    "longname": "src/Operator.js~Operator#key",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "initOperator",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#initOperator",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "resolveChain",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#resolveChain",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "resolve",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#resolve",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{...context: Object, \"key\": *}"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "sqlFragments",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#sqlFragments",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "sql",
    "memberof": "src/Operator.js~Operator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Operator.js~Operator#sql",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "src/Operators.js",
    "content": "// work in progress / experiment\n\nimport After     from './Operator/After.js';\nimport Before    from './Operator/Before.js';\nimport From      from './Operator/From.js';\nimport Group     from './Operator/Group.js';\nimport Having    from './Operator/Having.js';\nimport Join      from './Operator/Join.js';\nimport Order     from './Operator/Order.js';\nimport Select    from './Operator/Select.js';\nimport Where     from './Operator/Where.js';\n\nexport const operators = {\n  after:     After,\n  before:    Before,\n  from:      From,\n  group:     Group,\n  groupBy:   Group,\n  having:    Having,\n  join:      Join,\n  order:     Order,\n  orderBy:   Order,\n  select:    Select,\n  where:     Where,\n}\n\nexport const factory = (parent, type, ...args) => {\n  // console.log('factory [%s] => ', type);\n  return new operators[type](factory, parent, ...args);\n}\n\nexport default factory;",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Operators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "operators",
    "memberof": "src/Operators.js",
    "static": true,
    "longname": "src/Operators.js~operators",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{operators}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"after\": *, \"before\": *, \"from\": *, \"group\": *, \"groupBy\": *, \"having\": *, \"join\": *, \"order\": *, \"orderBy\": *, \"select\": *, \"where\": *}"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "factory",
    "memberof": "src/Operators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Operators.js~factory",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{factory}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/Proxy/Model.js",
    "content": "import { fail } from \"@abw/badger-utils\";\n\nexport const modelProxy = database =>\n  new Proxy(\n    database,\n    {\n      get(target, prop) {\n        if (prop === 'then') {\n          return Reflect.get(target, prop);\n        }\n        if (target.hasTable(prop)) {\n          return target.table(prop);\n        }\n        return target[prop]\n          || fail(\"Invalid table specified: \", prop);\n      }\n    }\n  );\n\nexport default modelProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "modelProxy",
    "memberof": "src/Proxy/Model.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Model.js~modelProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{modelProxy}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "src/Proxy/Operator.js",
    "content": "import { operators } from \"../Operators.js\";\n\nexport const operatorProxy = parent =>\n  new Proxy(\n    parent,\n    {\n      get(target, prop) {\n        // console.log('operatorProxy %s', prop);\n        if (operators[prop]) {\n          return (\n            (...args) => operatorProxy(target.factory(parent, prop, ...args))\n          ).bind(target);\n        }\n        else {\n          return target[prop];\n        }\n      }\n    }\n  );\n\nexport default operatorProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Operator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "operatorProxy",
    "memberof": "src/Proxy/Operator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Operator.js~operatorProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{operatorProxy}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/Proxy/Record.js",
    "content": "export const recordProxy = record =>\n  new Proxy(\n    record,\n    {\n      get(target, prop) {\n        // console.log('recordProxy get(%s)', prop);\n        // first look to see if the record has the property/method itself\n        if (Reflect.has(target, prop)) {\n          return Reflect.get(target, prop);\n        }\n        // then look to see if it's a data item\n        if (Reflect.has(target.row, prop)) {\n          return Reflect.get(target.row, prop);\n        }\n        // then look to see if it's a relation\n        if (Reflect.has(target.table.relations, prop)) {\n          // console.log('recordProxy column: ', prop);\n          return target.relation(prop);\n        }\n        return Reflect.get(target, prop);\n      }\n    }\n  );\n\nexport default recordProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "recordProxy",
    "memberof": "src/Proxy/Record.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Record.js~recordProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{recordProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 237,
    "kind": "file",
    "name": "src/Proxy/Row.js",
    "content": "export const rowProxy = table => query =>\n  new Proxy(\n    query,\n    {\n      get(target, prop) {\n        if (prop === 'record') {\n          return () => table.record(...arguments);\n        }\n        else if (prop === 'then') {\n          return (\n            fn => table.rowProxy(target.then(fn))\n          ).bind(target)\n        }\n        return target[prop];\n      }\n    }\n  );\n\nexport default rowProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Row.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "rowProxy",
    "memberof": "src/Proxy/Row.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Row.js~rowProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{rowProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "file",
    "name": "src/Proxy/Rows.js",
    "content": "export const rowsProxy = table => query =>\n  new Proxy(\n    query,\n    {\n      get(target, prop) {\n        if (prop === 'records') {\n          return () => table.records(...arguments);\n        }\n        else if (prop === 'then') {\n          return (\n            fn => table.rowsProxy(target.then(fn))\n          ).bind(target)\n        }\n        return target[prop];\n      }\n    }\n  );\n\nexport default rowsProxy\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Proxy/Rows.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "rowsProxy",
    "memberof": "src/Proxy/Rows.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Proxy/Rows.js~rowsProxy",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{rowsProxy}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/Queries.js",
    "content": "import { fail } from \"@abw/badger-utils\";\nimport { addDebugMethod } from \"./Utils/Debug.js\";\n\nconst defaults = {\n  maxExpansion: 16,\n  fragments: { },\n  queries:  { }\n};\n\nexport class Queries {\n  constructor(schema) {\n    const config = this.config = { ...defaults, ...schema };\n    //this.fragments = schema.fragments || { };\n    //this.queries = schema.queries || { };\n    //this.maxExpansion = schema.maxExpansion || defaults.maxExpansion;\n    addDebugMethod(this, 'queries', config);\n  }\n  query(name) {\n    // if the name is a single word then it must be a named query, otherwise\n    // we assume it's an SQL query possibly with embedded fragments.\n    return this.expandFragments(\n      name.match(/^\\w+$/)\n        ? this.config.queries[name] || fail(\"Invalid query specified: \", name)\n        : name\n    );\n  }\n  expandFragments(query) {\n    const fragments = this.config.fragments;\n    let sql = query;\n    let max = this.config.maxExpansion;\n    let runaway = 0;\n    let expanded = [ ];\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let replaced = false;\n      sql = sql.replace(\n        /<(\\w+?)>/g,\n        (match, word) => {\n          replaced = true;\n          expanded.push(word);\n          return fragments[word] || fail(\"Invalid fragment in SQL expansion: <\", word, \">\");\n        }\n      );\n      if (! replaced) {\n        break;\n      }\n      if (++runaway >= max) {\n        fail(\n          \"Maximum SQL expansion limit (maxExpansion=\", max, \") exceeded: \",\n          expanded.join(' -> ', )\n        )\n      }\n    }\n    this.debugData(\"expandFragments()\", { query, sql });\n    return sql;\n  }\n}\n\nexport const queries = (schema) =>\n  new Queries(schema)\n\nexport default Queries",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Queries.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "defaults",
    "memberof": "src/Queries.js",
    "static": true,
    "longname": "src/Queries.js~defaults",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"maxExpansion\": number, \"fragments\": *, \"queries\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "class",
    "name": "Queries",
    "memberof": "src/Queries.js",
    "static": true,
    "longname": "src/Queries.js~Queries",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Queries}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "query",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#query",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "expandFragments",
    "memberof": "src/Queries.js~Queries",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Queries.js~Queries#expandFragments",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "queries",
    "memberof": "src/Queries.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Queries.js~queries",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{queries}",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "file",
    "name": "src/Query.js",
    "content": "import { fail } from \"@abw/badger-utils\";\nimport { notImplementedInBaseClass } from \"./Utils.js\";\n\nconst notImplemented = notImplementedInBaseClass('Query');\n\nexport class Query {\n  async execute() {\n    notImplemented(\"execute()\")\n  }\n  async all() {\n    notImplemented(\"all()\")\n  }\n  async any() {\n    notImplemented(\"any()\")\n  }\n  async one(params) {\n    const rows = await this.all(params);\n    if (rows.length === 1) {\n      return rows[0];\n    }\n    else if (rows.length === 0) {\n      fail(\"No rows returned when one was expected\");\n    }\n    else {\n      fail(`${rows.length} rows returned when one was expected`);\n    }\n  }\n}\n\nexport default Query",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Query.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 249,
    "kind": "variable",
    "name": "notImplemented",
    "memberof": "src/Query.js",
    "static": true,
    "longname": "src/Query.js~notImplemented",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "Query",
    "memberof": "src/Query.js",
    "static": true,
    "longname": "src/Query.js~Query",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Query}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "execute",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#execute",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "all",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#all",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "any",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#any",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "one",
    "memberof": "src/Query.js~Query",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Query.js~Query#one",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "file",
    "name": "src/Record.js",
    "content": "import relations from \"./Relation/index.js\";\nimport { fail } from \"@abw/badger-utils\";\nimport { addDebugMethod } from \"./Utils/Debug.js\";\nimport { throwDeletedRecordError } from \"./Utils/Error.js\";\nimport { relationConfig } from \"./Utils/Relation.js\";\n\nexport class Record {\n  constructor(table, row, config={}) {\n    this.table     = table;\n    this.database  = table.database;\n    this.row       = row;\n    this.relations = { };\n    this.config    = config;\n    addDebugMethod(this, 'record', { debugPrefix: `Record:${this.table.table}\\n----------> ` }, config);\n  }\n  async update(set) {\n    this.debugData(\"update()\", { set });\n    this.assertNotDeleted('update');\n    const where = this.table.identity(this.row);\n    const update = await this.table.updateOneRow(set, where, { reload: true });\n    Object.assign(this.row, update);\n    return this;\n  }\n  async delete() {\n    this.debugData(\"delete()\");\n    this.assertNotDeleted('delete');\n    const where = this.table.identity(this.row);\n    await this.table.delete(where);\n    this.deleted = true;\n    return this;\n  }\n  assertNotDeleted(action) {\n    if (this.deleted) {\n      throwDeletedRecordError(\n        'action',\n        {\n          action,\n          table: this.table.table,\n          id:    this.table.keys.map( key => this.row[key] ).join('/')\n        }\n      )\n    }\n  }\n  async relation(name) {\n    this.debug('relation(%s)', name);\n    return this.relations[name]\n      ||=  await this.initRelation(name);\n  }\n  async initRelation(name) {\n    this.debug('initRelation(%s)', name);\n    const table = this.table.table;\n    const relation = relationConfig(\n      table, name,\n      this.table.relations[name]\n        || fail(`Invalid \"${name}\" relation specified for ${table} table`)\n    )\n    const rfunc = relations[relation.type]\n      || fail(`Invalid \"${relation.type}\" relation type specified for ${name} relation in ${table} table`);\n    return await rfunc(this, relation);\n  }\n}\n\nexport default Record;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "Record",
    "memberof": "src/Record.js",
    "static": true,
    "longname": "src/Record.js~Record",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Record}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 257,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "table",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#table",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "database",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#database",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "row",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#row",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "relations",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#relations",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "config",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#config",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "update",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Record.js~Record#update",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Record.js~Record#delete",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "deleted",
    "memberof": "src/Record.js~Record",
    "static": false,
    "longname": "src/Record.js~Record#deleted",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "assertNotDeleted",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Record.js~Record#assertNotDeleted",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "relation",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Record.js~Record#relation",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "initRelation",
    "memberof": "src/Record.js~Record",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Record.js~Record#initRelation",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "file",
    "name": "src/Relation/many.js",
    "content": "export const many = async (record, spec={}) => {\n  const lkey  = spec.from;\n  const rkey  = spec.to;\n  const order = spec.order;\n  let where   = spec.where   || { };\n  if (lkey && rkey) {\n    where[rkey] = record.row[lkey];\n  }\n  const options = order ? { order } : { };\n  if (spec.debug) {\n    console.log('many() relation: ', spec);\n    console.log('many() relation table: ', spec.table);\n    console.log('many() relation where: ', where);\n  }\n  const table = await record.database.table(spec.table);\n  return await table.allRecords(where, options);\n}\n\nexport default many\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Relation/many.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 270,
    "kind": "function",
    "name": "many",
    "memberof": "src/Relation/many.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Relation/many.js~many",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{many}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      },
      {
        "name": "spec",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "src/Relation/one.js",
    "content": "export const one = async (record, spec={}) => {\n  // console.log('relation:one record: ', record);\n  // console.log('relation:one spec: ', spec);\n  const lkey  = spec.from;\n  const rkey  = spec.to;\n  let where   = spec.where || { };\n  if (lkey && rkey) {\n    where[rkey] = record.row[lkey];\n  }\n  if (spec.debug) {\n    console.log('one() relation: ', spec);\n    console.log('one() relation table: ', spec.table);\n    console.log('one() relation where: ', where);\n  }\n  const table = await record.database.table(spec.table);\n  return await table.oneRecord(where);\n}\n\nexport default one",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Relation/one.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "function",
    "name": "one",
    "memberof": "src/Relation/one.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/Relation/one.js~one",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{one}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "record",
        "types": [
          "*"
        ]
      },
      {
        "name": "spec",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "file",
    "name": "src/Schema.js",
    "content": "// DEPRECATED\nimport Queries from \"./Queries.js\";\nimport { hasValue, isString, splitList, splitHash, fail, objMap, isArray } from \"@abw/badger-utils\";\nimport { addDebug } from \"@abw/badger\";\n\nconst DEFAULT_ID = 'id';\nconst COLUMN_SET_PREFIX = /^(@|\\.\\.\\.)/;\n\nexport class Schema {\n  constructor(database, schema) {\n    this.database       = database || fail(\"No database specified\");\n    this.table          = schema.table || fail(\"No table name specified\");\n    this.relations      = schema.relations || { };\n    this.prepareColumns(schema);\n    this.prepareKeys(schema);\n    this.prepareColumnSets(schema);\n    this.prepareFragments(schema);\n    this.queries = new Queries({\n      queries:   schema.queries,\n      fragments: this.fragments\n    });\n    // TODO: column sets for select, update, etc.\n\n    addDebug(this, schema.debug, schema.debugPrefix || 'Schema', schema.debugColor);\n    this.debug('columnIndex: ', this.columnIndex);\n    this.debug('fragments: ', this.fragments);\n  }\n  prepareColumns(schema) {\n    const table      = schema.table;\n    const columns    = schema.columns;\n    const index      = splitHash(columns, () => ({ }))\n    this.columnIndex = objMap(\n      index,\n      (value, key) => {\n        // column name can be defined in column spec as 'column' in case\n        // the database column name doesn't match the name you want to use\n        const column = value.column || (value.column = key);\n        // tableColumn is the full \"table.column\"\n        value.tableColumn = table + '.' + column;\n        return value;\n      }\n    )\n    this.columnNames    = Object.keys(this.columnIndex);\n    this.virtualColumns = schema.virtualColumns || { };\n    this.allColumns     = {\n      // ...splitHash(this.columnNames),\n      // ...splitHash(Object.keys(this.virtualColumns))\n      ...this.columnIndex,\n      ...this.virtualColumns\n    };\n  }\n  prepareColumnSets(schema) {\n    const index = splitHash(schema.columnSets, () => ({ }))\n    this.columnSets = objMap(\n      index,\n      (spec) => {\n        const basis   = (isString(spec) || isArray(spec)) ? splitList(spec) : this.columnNames;\n        const include = splitList(spec.include);\n        const exclude = splitHash(spec.exclude);\n        const result = [...basis, ...include]\n          .filter( column => ! exclude[column] );\n        return result;\n      }\n    )\n  }\n  prepareKeys(schema) {\n    this.keys = splitList(schema.keys);\n    if (schema.id) {\n      this.id = schema.id;\n      this.keys.unshift(this.id);\n    }\n    else if (this.keys.length === 0) {\n      this.id = DEFAULT_ID;\n      this.keys.unshift(this.id);\n    }\n    this.keyIndex = splitHash(this.keys);\n  }\n  prepareFragments(schema) {\n    const quote     = this.database.quote.bind(this.database);\n    const fragments = schema.fragments || { };\n    const vcolumns  = Object.entries(this.virtualColumns).reduce(\n      (result, [name, defn]) => {\n        result[name] = `${defn} as ${name}`;\n        return result;\n      },\n      { }\n    );\n    this.fragments = {\n      table:    quote(this.table),\n      columns:  this.columnNames.map(quote).join(', '),\n      tcolumns: this.columnNames.map( n => quote(this.columnIndex[n].tableColumn) ).join(', '),\n      ...vcolumns,\n      ...fragments\n    };\n  }\n  query(name) {\n    return this.queries.query(name);\n  }\n\n  // TODO: refactor remaining methods\n  column(name) {\n    return this.columnIndex[name]\n      ? this.columnIndex[name].tableColumn\n      : this.virtualColumns[name]\n        ? this.database.raw(`${this.virtualColumns[name]} as ${name}`)\n        : fail('Invalid column specified: ', name);\n  }\n  columnSet(name) {\n    return this.columnSets[name]\n      || fail('Invalid columnSet specified: ', name);\n  }\n  defaultColumns() {\n    return this.columnSets.default\n      || this.columns;\n  }\n  columns(names) {\n    return hasValue(names)\n      ? this.resolveColumns(names)\n      : this.defaultColumns().map( name => this.column(name) );\n  }\n  resolveColumns(names) {\n    const list = splitList(names);\n    let cols = [ ];\n    list.forEach(\n      name => {\n        this.debug(\"resolveColumns(%s) / %s\", names, name);\n        if (isString(name)) {\n          if (name.match(COLUMN_SET_PREFIX)) {\n            this.debug(\"%s is a columnSet %s\", name, name.replace(COLUMN_SET_PREFIX, ''));\n            cols.push(\n              ...this.columnSet(name.replace(COLUMN_SET_PREFIX, ''))\n                .map( name => this.column(name) )\n            );\n          }\n          else {\n            this.debug(\"%s is a column\", name);\n            cols.push(this.column(name));\n          }\n        }\n        else {\n          fail(\"resolveColumns() can only currently resolve strings\");\n        }\n      }\n    )\n    this.debug(\"resolveColumns(%s) => \", names, cols)\n    return cols;\n  }\n  identity(data) {\n    return this.keys.reduce(\n      (result, key) => {\n        result[key] = data[key]\n        return result\n      },\n      {}\n    );\n  }\n}\n\nexport const schema = (database, schema) =>\n  new Schema(database, schema);\n\nexport default Schema\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Schema.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "DEFAULT_ID",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~DEFAULT_ID",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "COLUMN_SET_PREFIX",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~COLUMN_SET_PREFIX",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "class",
    "name": "Schema",
    "memberof": "src/Schema.js",
    "static": true,
    "longname": "src/Schema.js~Schema",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Schema}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 277,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "database",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#database",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "table",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#table",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "relations",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#relations",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#queries",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "prepareColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareColumns",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "columnIndex",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnIndex",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "columnNames",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnNames",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "virtualColumns",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#virtualColumns",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "allColumns",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#allColumns",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "{...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "prepareColumnSets",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareColumnSets",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "columnSets",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#columnSets",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "prepareKeys",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareKeys",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "keys",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#keys",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "id",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#id",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "keyIndex",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#keyIndex",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "prepareFragments",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#prepareFragments",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "fragments",
    "memberof": "src/Schema.js~Schema",
    "static": false,
    "longname": "src/Schema.js~Schema#fragments",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "{\"table\": *, \"columns\": *, \"tcolumns\": *, ...vcolumns: Object, ...fragments: Object}"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "query",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#query",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "column",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#column",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "columnSet",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#columnSet",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "defaultColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#defaultColumns",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "columns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#columns",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "resolveColumns",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#resolveColumns",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "identity",
    "memberof": "src/Schema.js~Schema",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Schema.js~Schema#identity",
    "access": "public",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "function",
    "name": "schema",
    "memberof": "src/Schema.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Schema.js~schema",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{schema}",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "database",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "file",
    "name": "src/Table.js",
    "content": "import Queries from \"./Queries.js\";\nimport Record from \"./Record.js\";\nimport rowProxy from \"./Proxy/Row.js\";\nimport rowsProxy from \"./Proxy/Rows.js\";\nimport recordProxy from \"./Proxy/Record.js\";\nimport { fail, firstValue, isArray, noValue, splitList } from \"@abw/badger-utils\";\nimport { prepareColumns, prepareKeys } from \"./Utils/Columns.js\";\nimport { throwColumnValidationError, unexpectedRowCount } from \"./Utils/Error.js\";\nimport { addDebugMethod } from \"./Utils/Debug.js\";\n\nexport class Table {\n  constructor(database, schema) {\n    this.database      = database || fail(\"No database specified\");\n    this.engine        = database.engine;\n    this.table         = schema.table;\n    this.columns       = prepareColumns(schema);\n    this.readonly      = Object.keys(this.columns).filter( key => this.columns[key].readonly );\n    this.required      = Object.keys(this.columns).filter( key => this.columns[key].required );\n    this.keys          = prepareKeys(schema, this.columns);\n    this.id            = schema.id;\n    this.recordClass   = schema.recordClass || Record;\n    this.recordConfig  = schema.recordConfig;\n    this.rowProxy      = rowProxy(this);\n    this.rowsProxy     = rowsProxy(this);\n    this.fragments     = this.prepareFragments(schema);\n    this.relations     = schema.relations || { };\n    this.queries       = new Queries({ ...schema, debugPrefix: `Queries:${this.table}\\n----------> ` });\n\n    // method aliases\n    this.insertRow     = this.insertOneRow;\n    this.insertRows    = this.insertAllRows;\n    this.insertRecord  = this.insertOneRecord;\n    this.insertRecords = this.insertAllRecords;\n    this.updateRow     = this.updateOneRow;\n    this.updateRows    = this.updateAllRows;\n    addDebugMethod(this, 'table', { debugPrefix: `Table:${this.table}\\n----------> ` }, schema);\n  }\n  prepareFragments(schema) {\n    const quote       = this.database.quote.bind(this.database);\n    const fragments   = schema.fragments ||= { };\n    fragments.table   = quote(this.table);\n    fragments.columns = Object.values(this.columns).map(\n      spec => quote(spec.tableColumn)\n    ).join(', ');\n    return fragments;\n  }\n\n  //-----------------------------------------------------------------------------\n  // Column validation\n  //-----------------------------------------------------------------------------\n  checkColumnNames(names) {\n    const table = this.table;\n    splitList(names).forEach(\n      column => this.columns[column]\n          || throwColumnValidationError('unknown', { column, table })\n    )\n  }\n  checkColumns(data={}, cols=[], vals=[], options={}) {\n    const table = this.table;\n    // check that all the values supplied correspond to valid columns\n    Object.keys(data).forEach(\n      column => {\n        const spec = this.columns[column]\n          || throwColumnValidationError('unknown', { column, table });\n        if (options.writable && spec.readonly) {\n          throwColumnValidationError('readonly', { column, table });\n        }\n        cols.push(spec.column);\n        vals.push(data[column])\n      }\n    )\n    return [cols, vals];\n  }\n  checkWritableColumns(data, cols=[], vals=[]) {\n    return this.checkColumns(data, cols, vals, { writable: true })\n  }\n  checkWhereColumns(...args) {\n    return this.checkColumns(...args)\n  }\n  checkRequiredColumns(data) {\n    const table = this.table;\n    this.required.forEach(\n      column => {\n        if (noValue(data[column])) {\n          throwColumnValidationError('required', { column, table });\n        }\n      }\n    );\n  }\n\n  //-----------------------------------------------------------------------------\n  // Engine methods\n  //-----------------------------------------------------------------------------\n  query(name) {\n    return this.queries.query(name);\n  }\n  run(query, params, options) {\n    this.debugData(\"run()\", { query, params, options });\n    return this.engine.run(this.query(query), params, options)\n  }\n  any(query, params, options) {\n    this.debugData(\"any()\", { query, params, options });\n    return this.engine.any(this.query(query), params, options)\n  }\n  all(query, params, options) {\n    this.debugData(\"all()\", { query, params, options });\n    return this.engine.all(this.query(query), params, options)\n  }\n  one(query, params, options) {\n    this.debugData(\"one()\", { query, params, options });\n    return this.engine.one(this.query(query), params, options)\n  }\n\n  //-----------------------------------------------------------------------------\n  // Basic queries - insert\n  //-----------------------------------------------------------------------------\n  async insert(data, options) {\n    return isArray(data, options)\n      ? this.insertAllRows(data, options)\n      : this.insertOneRow(data, options)\n  }\n  async insertOneRow(data, options={}) {\n    this.debugData(\"insertOneRow()\", { data, options });\n    const [cols, vals] = this.checkWritableColumns(data);\n    this.checkRequiredColumns(data);\n    const insert = await this.engine.insert(this.table, cols, vals, this.keys);\n    return options.reload || options.record\n      ? this.insertReload(data, insert, options)\n      : insert;\n  }\n  async insertAllRows(data, options) {\n    this.debugData(\"insertAllRows()\", { data, options });\n    let rows = [ ];\n    for (const row of data) {\n      rows.push(await this.insertOneRow(row, options));\n    }\n    return rows;\n  }\n  async insertOneRecord(data, options={}) {\n    this.debugData(\"insertOneRecord()\", { data, options });\n    return this.insertOneRow(data, { ...options, record: true })\n  }\n  async insertAllRecords(data, options={}) {\n    this.debugData(\"insertAllRecords()\", { data, options });\n    return this.insertAllRecords(data, { ...options, record: true })\n  }\n  //-----------------------------------------------------------------------------\n  // update\n  //-----------------------------------------------------------------------------\n  prepareUpdate(set, where) {\n    const [dcols, dvals] = this.checkWritableColumns(set);\n    const [wcols, wvals] = this.checkWhereColumns(where);\n    return [dcols, dvals, wcols, wvals];\n  }\n  async update(...args) {\n    return this.updateAllRows(...args);\n  }\n  async updateOneRow(set, where, options={}) {\n    this.debugData(\"updateOneRow()\", { set, where, options });\n    const args = this.prepareUpdate(set, where);\n    const update = await this.engine.update(this.table, ...args);\n    if (update.changes !== 1) {\n      return unexpectedRowCount(update.changes, 'updated');\n    }\n    return options.reload\n      ? this.updateReload(set, where)\n      : update;\n  }\n  async updateAnyRow(set, where, options={}) {\n    this.debugData(\"updateAnyRow()\", { set, where, options });\n    const args = this.prepareUpdate(set, where);\n    const update = await this.engine.update(this.table, ...args);\n    if (update.changes > 1) {\n      return unexpectedRowCount(update.changes, 'updated');\n    }\n    return options.reload\n      ? update.changes === 1\n        ? this.updateReload(set, where)\n        : undefined\n      : update;\n  }\n  async updateAllRows(set, where, options={}) {\n    this.debugData(\"updateAllRows()\", { set, where, options });\n    const args   = this.prepareUpdate(set, where);\n    const update = await this.engine.update(this.table, ...args);\n    // return update;\n    //let rows = [ ];\n    //for (const row of data) {\n    //  rows.push(await this.insertOne(row, options));\n    //}\n    //return rows;\n    return options.reload\n      ? fail(\"Cannot reload multiple updated rows\")\n      : update;\n  }\n\n  //-----------------------------------------------------------------------------\n  // delete\n  //-----------------------------------------------------------------------------\n  async delete(where) {\n    this.debugData(\"delete()\", { where });\n    const [cols, vals] = this.checkWhereColumns(where);\n    return this.engine.delete(this.table, cols, vals);\n  }\n\n  //-----------------------------------------------------------------------------\n  // oneRow(), anyRow() and allRows()\n  //-----------------------------------------------------------------------------\n  prepareFetch(where, params) {\n    params.columns ||= Object.keys(this.columns);\n    this.checkColumnNames(params.columns);\n    return this.checkWhereColumns(where);\n  }\n  async oneRow(where, options={}) {\n    this.debugData(\"oneRow()\", { where, options });\n    const params = { ...options };\n    const [wcols, wvals] = this.prepareFetch(where, params);\n    const row = await this.engine.selectOne(this.table, wcols, wvals, params);\n    return options.record\n      ? this.record(row)\n      : row;\n  }\n  async anyRow(where, options={}) {\n    this.debugData(\"anyRow()\", { where, options });\n    const params = { ...options };\n    const [wcols, wvals] = this.prepareFetch(where, params);\n    const row = await this.engine.selectAny(this.table, wcols, wvals, params);\n    return row\n      ? options.record\n        ? this.record(row)\n        : row\n      : undefined;\n  }\n  async allRows(where, options={}) {\n    this.debugData(\"allRows()\", { where, options });\n    const params = { ...options };\n    const [wcols, wvals] = this.prepareFetch(where, params);\n    const rows = await this.engine.selectAll(this.table, wcols, wvals, params);\n    return options.record\n      ? this.records(rows)\n      : rows;\n  }\n\n  //-----------------------------------------------------------------------------\n  // oneRecord(), anyRecord() and allRecords()\n  //-----------------------------------------------------------------------------\n  async oneRecord(where, options={}) {\n    this.debugData(\"oneRecord()\", { where, options });\n    return this.oneRow(where, { ...options, record: true });\n  }\n  async anyRecord(where, options={}) {\n    this.debugData(\"anyRecord()\", { where, options });\n    return this.anyRow(where, { ...options, record: true });\n  }\n  async allRecords(where, options={}) {\n    this.debugData(\"allRecords()\", { where, options });\n    return this.allRows(where, { ...options, record: true });\n  }\n\n  // select() is the old name for fetchAll() which I'm in the process of\n  // reworking.\n  async select(where, options={}) {\n    this.debug(\"select: \", where, options);\n    if (options.columns) {\n      this.checkColumnNames(options.columns);\n    }\n    const [wcols, wvals] = this.checkColumns(where);\n    return this.engine.select(this.table, wcols, wvals, options);\n  }\n\n  tableFragments() {\n    return this.tableFragments\n  }\n  identity(data) {\n    return this.keys.reduce(\n      (result, key) => {\n        result[key] = data[key]\n        return result\n      },\n      {}\n    );\n  }\n  async insertReload(input, output, options={}) {\n    // For insert queries where the input data is used to run the query,\n    // and the output data is returned from the query. We should have\n    // values for each of this.keys because they should always be\n    // either specified in the input data, or returned by the database\n    const fetch = { };\n    this.keys.map(\n      key => fetch[key] = firstValue(output[key], input[key])\n    );\n    return options.record\n      ? this.oneRecord(fetch)\n      : this.oneRow(fetch);\n  }\n  async updateReload(set, where) {\n    // For update queries things are a little more complicated.  In the\n    // usual case we can reload the rows using the original selection\n    // criteria (where).  But we might have done an update which changes\n    // that selection criteria (set), so we should use those values instead.\n    const fetch = { };\n    Object.keys(where).map(\n      key => fetch[key] = firstValue(set[key], where[key])\n    );\n    return this.oneRow(fetch);\n  }\n  newRecord(row) {\n    return recordProxy(\n      new this.recordClass(this, row, this.recordConfig)\n    );\n  }\n  record(row) {\n    this.debug(\"record()\", row);\n    return Promise.resolve(\n      this.newRecord(row)\n    );\n  }\n  records(rows) {\n    this.debug(\"records()\", rows);\n    return Promise.resolve(\n      rows.map(\n        row => this.newRecord(row)\n      )\n    );\n  }\n}\n\nexport default Table;\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Table.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "class",
    "name": "Table",
    "memberof": "src/Table.js",
    "static": true,
    "longname": "src/Table.js~Table",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Table}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "database",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#database",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "engine",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#engine",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "table",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#table",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "columns",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#columns",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "readonly",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#readonly",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "member",
    "name": "required",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#required",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "member",
    "name": "keys",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#keys",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "member",
    "name": "id",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#id",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "recordClass",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#recordClass",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "recordConfig",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#recordConfig",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "rowProxy",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#rowProxy",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "rowsProxy",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#rowsProxy",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "fragments",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#fragments",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "relations",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#relations",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "queries",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#queries",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "insertRow",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#insertRow",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "insertRows",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#insertRows",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "insertRecord",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#insertRecord",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "insertRecords",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#insertRecords",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "updateRow",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#updateRow",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "updateRows",
    "memberof": "src/Table.js~Table",
    "static": false,
    "longname": "src/Table.js~Table#updateRows",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "prepareFragments",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#prepareFragments",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "checkColumnNames",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkColumnNames",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "names",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "checkColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkColumns",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "cols",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "vals",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "checkWritableColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkWritableColumns",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "cols",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "vals",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "checkWhereColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkWhereColumns",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "checkRequiredColumns",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#checkRequiredColumns",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "query",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#query",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "run",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#run",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "any",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#any",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "all",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#all",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "one",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#one",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "insert",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insert",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "insertOneRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertOneRow",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "insertAllRows",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertAllRows",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "insertOneRecord",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertOneRecord",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "insertAllRecords",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertAllRecords",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "prepareUpdate",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#prepareUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "update",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#update",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "updateOneRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#updateOneRow",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "updateAnyRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#updateAnyRow",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "updateAllRows",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#updateAllRows",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "delete",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#delete",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "prepareFetch",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#prepareFetch",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "oneRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#oneRow",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "anyRow",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#anyRow",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "allRows",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#allRows",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "oneRecord",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#oneRecord",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "anyRecord",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#anyRecord",
    "access": "public",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "allRecords",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#allRecords",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "select",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#select",
    "access": "public",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "where",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "tableFragments",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#tableFragments",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "identity",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#identity",
    "access": "public",
    "description": null,
    "lineNumber": 274,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "insertReload",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#insertReload",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "output",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "updateReload",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/Table.js~Table#updateReload",
    "access": "public",
    "description": null,
    "lineNumber": 296,
    "undocument": true,
    "params": [
      {
        "name": "set",
        "types": [
          "*"
        ]
      },
      {
        "name": "where",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "newRecord",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#newRecord",
    "access": "public",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "params": [
      {
        "name": "row",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "record",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#record",
    "access": "public",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "params": [
      {
        "name": "row",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "records",
    "memberof": "src/Table.js~Table",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Table.js~Table#records",
    "access": "public",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "params": [
      {
        "name": "rows",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "src/Tables.js",
    "content": "export class Tables {\n  constructor(tables={}) {\n    this.tables = tables;\n  }\n  table(name) {\n    return this.tables[name];\n  }\n}\n\nexport default Tables;",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Tables.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "class",
    "name": "Tables",
    "memberof": "src/Tables.js",
    "static": true,
    "longname": "src/Tables.js~Tables",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{Tables}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 367,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Tables.js~Tables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Tables.js~Tables#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 368,
    "kind": "member",
    "name": "tables",
    "memberof": "src/Tables.js~Tables",
    "static": false,
    "longname": "src/Tables.js~Tables#tables",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "table",
    "memberof": "src/Tables.js~Tables",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Tables.js~Tables#table",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/Utils/Columns.js",
    "content": "import { fail, isArray, isObject, isString, objMap, splitList } from \"@abw/badger-utils\";\nimport { bitSplitter, defaultIdColumn } from \"../Constants.js\";\nimport { throwColumnValidationError } from \"./Error.js\";\n\nexport const prepareColumns = (schema) => {\n  const columns = schema.columns\n    || throwColumnValidationError('noColumns', { table: schema.table });\n\n  if (isString(columns)) {\n    return prepareColumnsString(columns, schema);\n  }\n  else if (isArray(columns)) {\n    return prepareColumnsArray(columns, schema);\n  }\n  else if (isObject(columns)) {\n    return prepareColumnsHash(columns, schema);\n  }\n  else {\n    return throwColumnValidationError('invalidColumns', { table: schema.table, columns });\n  }\n}\n\nconst prepareColumnsString = (columns, schema) => {\n  // columns can be a string of whitespace delimited values, which\n  // is equivalent to passing an array of strings\n  return prepareColumnsArray(splitList(columns), schema);\n}\n\nconst prepareColumnsArray = (columns, schema) => {\n  // columns can be an array of strings, each of which should be a\n  // name, optionally followed by a series of flags or key=value\n  // items, separated by colons, e.g. 'name:required', 'name:type=text',\n  // 'name:required:type=text'\n  let index = { };\n  columns.forEach(\n    item => {\n      const bits  = item.split(bitSplitter);\n      const name  = bits.shift();\n      index[name] = prepareColumnBits(name, bits, schema);\n    }\n  )\n  return prepareColumnsHash(index, schema);\n}\n\nconst prepareColumnsHash = (columns, schema) => {\n  return objMap(\n    columns,\n    (value, name) => {\n      if (isString(value)) {\n        return prepareColumnBits(name, value.split(bitSplitter), schema)\n      }\n      else if (isObject(value)) {\n        // column name can be defined in column spec as 'column' in case\n        // the database column name doesn't match the name you want to use\n        const column = value.column || (value.column = name);\n        // tableColumn is the full \"table.column\"\n        value.tableColumn = schema.table + '.' + column;\n        return value;\n      }\n      else {\n        fail(`Invalid \"${name}\" columns specified in ${schema.table} table: ${value}`)\n      }\n    }\n  )\n}\n\nconst prepareColumnBits = (name, bits, schema) => {\n  return bits.reduce(\n    (result, bit) => {\n      const kv = bit.split('=', 2);\n      const key = kv.shift();\n      result[key] = kv.length ? kv[0] : true;\n      return result\n    },\n    { column: name, tableColumn: schema.table + '.' + name }\n  );\n}\n\nexport const prepareKeys = (schema, columns={}) => {\n  let keys  = splitList(schema.keys);\n  const ids = Object.keys(columns).filter( key => columns[key].id );\n  if (ids.length > 1) {\n    return throwColumnValidationError('multipleIds', { table: schema.table });\n  }\n  if (keys.length === 0) {\n    keys = Object.keys(columns).filter( key => columns[key].key );\n  }\n  if (schema.id) {\n    keys.unshift(schema.id);\n  }\n  else if (ids.length) {\n    schema.id = ids[0];\n    keys.unshift(schema.id);\n  }\n  else if (keys.length === 0) {\n    schema.id = defaultIdColumn;\n    keys.unshift(schema.id);\n  }\n  return keys;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Columns.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "function",
    "name": "prepareColumns",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumns",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{prepareColumns}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "function",
    "name": "prepareColumnsString",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsString",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "prepareColumnsArray",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsArray",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "prepareColumnsHash",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnsHash",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "columns",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "prepareColumnBits",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareColumnBits",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "bits",
        "types": [
          "*"
        ]
      },
      {
        "name": "schema",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "prepareKeys",
    "memberof": "src/Utils/Columns.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Columns.js~prepareKeys",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{prepareKeys}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "schema",
        "types": [
          "*"
        ]
      },
      {
        "name": "columns",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "file",
    "name": "src/Utils/Database.js",
    "content": "import { hasValue, isString, remove } from \"@abw/badger-utils\";\nimport { databaseAliases, databaseStringElements, databaseStringRegex } from \"../Constants.js\";\nimport { invalid, missing } from \"./Error.js\";\n\n\n//-----------------------------------------------------------------------------\n// Database configuration\n//-----------------------------------------------------------------------------\n// databaseConfig(string)\n// databaseConfig({ database: { engine: xxx, ... } })\n//-----------------------------------------------------------------------------\nexport const databaseConfig = config => {\n  let database = config.database || missing('database');\n\n  if (isString(database)) {\n    // parse connection string\n    config.database = database = parseDatabaseString(database);\n  }\n\n  // extract the engine name to top level config\n  config.engine ||= database.engine || missing('database.engine');\n  delete database.engine;\n\n  // fixup any aliases\n  Object.entries(databaseAliases).map(\n    ([key, value]) => {\n      if (hasValue(database[key])) {\n        database[value] ||= remove(database, key);\n      }\n    }\n  )\n\n  return config;\n}\n\n\n//-----------------------------------------------------------------------------\n// Parse Database String\n//-----------------------------------------------------------------------------\n// parseDatabaseString('postgresql://user:password@host:port/database')\n// parseDatabaseString('sqlite://filename.db')\n// parseDatabaseString('sqlite://:memory:')\n// parseDatabaseString('sqlite:memory')\n// parseDatabaseString('driver://user:password@host:port/database')\n//                    1^^^^^   2^^^ 3^^^^^^^ 4^^^ 5^^^ 6^^^^^^^\n//-----------------------------------------------------------------------------\nexport const parseDatabaseString = string => {\n  let config = { };\n  let match;\n\n  if (string.match(/^postgres(ql)?:/)) {\n    // special case for postgres which can handle a connectionString\n    // NOTE: we accept postgresql: or postgres: as prefixes and Do The\n    // Right Thing\n    config.engine = 'postgres';\n    config.connectionString = string.replace(/^postgres:/, 'postgresql:');\n  }\n  else if ((match = string.match(/^sqlite:\\/\\/(.*)/))) {\n    // special case for sqlite which only has a filename (or \":memory:\")\n    config.engine   = 'sqlite';\n    config.filename = match[1];\n  }\n  else if (string === 'sqlite:memory') {\n    // special case for sqlite allowing 'sqlite:memory' as short for 'sqlite://:memory:'\n    config.engine   = 'sqlite';\n    config.filename = ':memory:';\n  }\n  else if ((match = string.match(databaseStringRegex))) {\n    // all other cases (e.g. mysql)\n    Object.entries(databaseStringElements).map(\n      ([key, index]) => {\n        const value = match[index];\n        if (hasValue(value)) {\n          config[key] = value;\n        }\n      }\n    );\n  }\n  else {\n    invalid('database', string);\n  }\n  return config;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 378,
    "kind": "function",
    "name": "databaseConfig",
    "memberof": "src/Utils/Database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Database.js~databaseConfig",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{databaseConfig}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "function",
    "name": "parseDatabaseString",
    "memberof": "src/Utils/Database.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Database.js~parseDatabaseString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{parseDatabaseString}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 380,
    "kind": "file",
    "name": "src/Utils/Debug.js",
    "content": "import { addDebug, ANSIescape, ANSIreset } from \"@abw/badger\";\nimport { doNothing, fail, isBoolean, isObject } from \"@abw/badger-utils\";\n\nexport let debug = {\n  database: {\n    debug:  false,\n    prefix: 'Database -> ',\n    color:  'bright magenta',\n  },\n  engine: {\n    debug:  false,\n    prefix: 'Engine ---> ',\n    color:  'red',\n  },\n  queries: {\n    debug:  false,\n    prefix: 'Queries --> ',\n    color:  'blue',\n  },\n  table: {\n    debug:  false,\n    prefix: 'Table ----> ',\n    color:  'bright cyan',\n  },\n  record: {\n    debug:  false,\n    prefix: 'Record ---> ',\n    color:  'green',\n  },\n  test: {\n    debug:  false,\n    prefix: 'Test     -> ',\n    color:  'green'\n  },\n}\n\nconst invalidDebugItem = item =>\n  fail(`Invalid debug item \"${item}\" specified`)\n\nexport const setDebug = options => {\n  Object.entries(options).map(\n    ([key, value]) => {\n      const set = debug[key] || invalidDebugItem(key);\n      if (isBoolean(value)) {\n        set.debug = value;\n      }\n      else if (isObject(value)) {\n        Object.assign(set, value);\n      }\n    }\n  )\n}\n\nexport const getDebug = (name, ...configs) => {\n  const defaults = debug[name] || invalidDebugItem(name);\n  return Object.assign(\n    {},\n    defaults,\n    ...configs\n  );\n}\n\nexport const addDebugMethod = (object, name, ...configs) => {\n  const options = getDebug(name, ...configs);\n  const enabled = options.debug;\n  const prefix  = options.debugPrefix || options.prefix;\n  const color   = options.debugColor  || options.color;\n  addDebug(object, enabled, prefix, color);\n  object.debugData = DataDebugger(enabled, prefix, color);\n}\n\nexport function DataDebugger(enabled, prefix, color, length=10) {\n  return enabled\n    ? (message, data={}) => {\n        console.log(\n          '%s' + prefix + '%s' + message,\n          color ? ANSIescape(color) : '',\n          color ? ANSIreset() : ''\n        );\n        Object.entries(data).map(\n          ([key, value]) => console.log(\n            '%s' + key.padStart(length, ' ') + '%s:',\n            color ? ANSIescape(color) : '',\n            color ? ANSIreset() : '',\n            value\n          )\n        )\n      }\n    : doNothing;\n}\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Debug.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 381,
    "kind": "variable",
    "name": "debug",
    "memberof": "src/Utils/Debug.js",
    "static": true,
    "longname": "src/Utils/Debug.js~debug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{debug}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"database\": *, \"engine\": *, \"queries\": *, \"table\": *, \"record\": *, \"test\": *}"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "invalidDebugItem",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~invalidDebugItem",
    "access": "public",
    "export": false,
    "importPath": "@abw/badger-database",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "setDebug",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~setDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{setDebug}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "getDebug",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~getDebug",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{getDebug}",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "configs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "addDebugMethod",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~addDebugMethod",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{addDebugMethod}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "configs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "DataDebugger",
    "memberof": "src/Utils/Debug.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Debug.js~DataDebugger",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{DataDebugger}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      },
      {
        "name": "length",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 10,
        "defaultValue": "10"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "file",
    "name": "src/Utils/Error.js",
    "content": "import { fail } from \"@abw/badger-utils\"\nimport { format } from \"./Format.js\"\n\n//-----------------------------------------------------------------------------\n// General purpose error messages\n//-----------------------------------------------------------------------------\nexport const missing = (item) =>\n  fail(`No \"${item}\" specified`)\n\nexport const invalid = (item, value) =>\n  fail(`Invalid \"${item}\" specified: ${value}`)\n\nexport const notImplemented = (method, module) =>\n  fail(`${method} is not implemented in ${module}`)\n\nexport const notImplementedInModule = module => method =>\n  notImplemented(method, module)\n\nexport const notImplementedInBaseClass = module =>\n  notImplementedInModule(`the ${module} base class`)\n\n//-----------------------------------------------------------------------------\n// Custom error classes\n//-----------------------------------------------------------------------------\nexport class CustomError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class UnexpectedRowCount extends CustomError { }\nexport class ColumnValidationError extends CustomError { }\nexport class InsertValidationError extends CustomError { }\nexport class DeletedRecordError extends CustomError { }\n\nexport function unexpectedRowCount(n, action='returned') {\n  throw new UnexpectedRowCount(`${n} rows were ${action} when one was expected`)\n}\n\n\nexport const thrower = (formats, error=Error) =>\n  (fmt, data) => {\n    const message = format(\n      formats[fmt] || fail(\"Invalid message format: \", fmt),\n      data\n    );\n    throw new error(message)\n  }\n\nexport const throwColumnValidationError = thrower(\n  {\n    unknown:        'Unknown \"<column>\" column in the <table> table',\n    readonly:       'The \"<column>\" column is readonly in the <table> table',\n    required:       'Missing required column \"<column>\" for the <table> table',\n    multipleIds:    'Multiple columns are marked as \"id\" in the <table> table',\n    noColumns:      'No \"columns\" specified for the <table> table',\n    invalidColumns: 'Invalid \"columns\" specified for the <table> table: <columns>',\n  },\n  ColumnValidationError\n)\n\nexport const throwDeletedRecordError = thrower(\n  {\n    action: 'Cannot <action> deleted <table> record #<id>',\n  },\n  DeletedRecordError\n)\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Error.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "function",
    "name": "missing",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~missing",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{missing}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "invalid",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~invalid",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{invalid}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "notImplemented",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplemented",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{notImplemented}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "method",
        "types": [
          "*"
        ]
      },
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "notImplementedInModule",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplementedInModule",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{notImplementedInModule}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "notImplementedInBaseClass",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~notImplementedInBaseClass",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{notImplementedInBaseClass}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 393,
    "kind": "class",
    "name": "CustomError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~CustomError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{CustomError}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 394,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Utils/Error.js~CustomError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Utils/Error.js~CustomError#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 395,
    "kind": "member",
    "name": "name",
    "memberof": "src/Utils/Error.js~CustomError",
    "static": false,
    "longname": "src/Utils/Error.js~CustomError#name",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "class",
    "name": "UnexpectedRowCount",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~UnexpectedRowCount",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{UnexpectedRowCount}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "ColumnValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~ColumnValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{ColumnValidationError}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 398,
    "kind": "class",
    "name": "InsertValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~InsertValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{InsertValidationError}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 399,
    "kind": "class",
    "name": "DeletedRecordError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~DeletedRecordError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{DeletedRecordError}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "CustomError"
    ]
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "unexpectedRowCount",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~unexpectedRowCount",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{unexpectedRowCount}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "n",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "returned",
        "defaultValue": "returned"
      }
    ],
    "return": null
  },
  {
    "__docId__": 401,
    "kind": "function",
    "name": "thrower",
    "memberof": "src/Utils/Error.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Error.js~thrower",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{thrower}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "formats",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "Error",
        "defaultValue": "Error"
      }
    ],
    "return": null
  },
  {
    "__docId__": 402,
    "kind": "variable",
    "name": "throwColumnValidationError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~throwColumnValidationError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{throwColumnValidationError}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "variable",
    "name": "throwDeletedRecordError",
    "memberof": "src/Utils/Error.js",
    "static": true,
    "longname": "src/Utils/Error.js~throwDeletedRecordError",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{throwDeletedRecordError}",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "file",
    "name": "src/Utils/Format.js",
    "content": "import { fail, noValue } from \"@abw/badger-utils\";\n\nexport const format = (msg, data) =>\n  msg.replace(\n    /<(\\w+)>/g,\n    (_, key) => {\n      const val = data[key];\n      if (noValue(val)) {\n        fail(`Invalid variable expansion <${key}> in message format: ${msg}`);\n      }\n      return val;\n    }\n  );\n",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Format.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "format",
    "memberof": "src/Utils/Format.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Format.js~format",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{format}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "file",
    "name": "src/Utils/Relation.js",
    "content": "import { fail, hasValue, isString, noValue, remove } from \"@abw/badger-utils\";\n\nexport const relationStringRegex = /^(\\w+)\\s*([-=]>)\\s*(\\w+)\\.(\\w+)$/;\nexport const relationType = {\n  '->': 'one',\n  '=>': 'many'\n};\nexport const relationAliases = {\n  localKey:   'from',\n  local_key:  'from',\n  remoteKey:  'to',\n  remote_key: 'to',\n  orderBy:    'order',\n  order_by:   'order',\n};\n\nexport const relationConfig = (table, name, config) => {\n  if (isString(config)) {\n    config = parseRelationString(config);\n  }\n\n  // fix up any aliases\n  Object.entries(relationAliases).map(\n    ([key, value]) => {\n      if (hasValue(config[key])) {\n        config[value] ||= remove(config, key);\n      }\n    }\n  );\n\n  // check for missing parameters\n  ['type', 'table', 'to', 'from'].forEach(\n    key => {\n      if (noValue(config[key])) {\n        fail(`Missing \"${key}\" in ${name} relation for ${table} table`);\n      }\n    }\n  )\n\n  // set the name\n  config.name = `${table}.${name}`;\n\n  return config;\n}\n\nexport const parseRelationString = string => {\n  let match;\n  return ((match = string.match(relationStringRegex)))\n    ? {\n        from:  match[1],\n        type:  relationType[match[2]] || fail('Invalid type \"', match[2], '\" specified in relation: ', string),\n        table: match[3],\n        to:    match[4],\n      }\n    : fail(\"Invalid relation string specified: \", string);\n}",
    "static": true,
    "longname": "/Users/abw/js/badger-database-js/src/Utils/Relation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 407,
    "kind": "variable",
    "name": "relationStringRegex",
    "memberof": "src/Utils/Relation.js",
    "static": true,
    "longname": "src/Utils/Relation.js~relationStringRegex",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{relationStringRegex}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "undefined"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "variable",
    "name": "relationType",
    "memberof": "src/Utils/Relation.js",
    "static": true,
    "longname": "src/Utils/Relation.js~relationType",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{relationType}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"->\": string, \"=>\": string}"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "variable",
    "name": "relationAliases",
    "memberof": "src/Utils/Relation.js",
    "static": true,
    "longname": "src/Utils/Relation.js~relationAliases",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{relationAliases}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"localKey\": string, \"local_key\": string, \"remoteKey\": string, \"remote_key\": string, \"orderBy\": string, \"order_by\": string}"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "function",
    "name": "relationConfig",
    "memberof": "src/Utils/Relation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Relation.js~relationConfig",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{relationConfig}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "table",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "function",
    "name": "parseRelationString",
    "memberof": "src/Utils/Relation.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils/Relation.js~parseRelationString",
    "access": "public",
    "export": true,
    "importPath": "@abw/badger-database",
    "importStyle": "{parseRelationString}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Badger Database\n\nThis is a simple but powerful database management tool that allows you to\nbuild database abstraction layers for your Javascript projects. It has\nsupport for accessing Postgres, MySQL and Sqlite databases.\n\nThe aim is to provide a *Separation of Concerns* between your application\ncode and your database code so that you can write application code at a\nhigher level of abstraction, with the details of the database hidden away\nin the lower levels.\n\n## Philosophy\n\nIt is based on the philosphy that ORMs and SQL query builders are considered\n*Mostly Harmful*.  SQL is an industry standard and has been for nearly 40\nyears.  Although there are some minor differences between dialects, it is\nthe most portable and widely understood way to communicate with a relational\ndatabase.  Any developer who has experience with using relational databases\nshould know at least the basics of SQL, regardless of the programming language\nor database toolkits they are most familiar with.\n\nUnlike most ORMs and SQL query builders which try to insulate developers from\nSQL, this library embraces it and encourages you to use it in the way it was\nintended to be used.  One of the keys benefits is transparency.  Your SQL\nqueries should not be hidden behind an abstraction that can obscure the\nintention or subtly transform the meaning.  This avoids a whole class of\n\"translation errors\" that can result in the generated queries returning\nthe wrong results, being inefficient, or hard to reason about.\n\nThat said, there are a number of useful benefits that ORMs and SQL query\nbuilders provide which this library has adopted.\n\n* Abstraction of the underlying database engine.  Although it's probably not\nthat common for a project to migrate from one database engine to another\n(and if that does happens you'll have plenty of other things to worry about),\nit is quite common for developers to work on a number of projects over a\nperiod of time that use different databases.  Having a library that\nsmooths over the differences between them can make it easier to switch from\none project to another.\n\n* Automatic generation of \"trivial\" queries to insert, select, update and delete\nrecords (aka \"CRUD\" - create, read, update, delete).  As well as removing the\nneed to write lots of \"boilerplate\" queries to get your project up and running,\nthis is also useful when you modify tables at a later date to add or remove\ncolumns.  Those basic operations should automatically adapt to the new\nschema without requiring you to rewrite lots of queries.\n\n* The ability to compose complex queries in parts, allowing SQL fragments\nto be reused in different queries that are similar, but not identical.\nDoing this programmatically can not only save time, but also avoid potential\nerrors, either when writing them initially, or when updating them at a later\ndate to accommodate changes in the database schema.\n\n* Entity models to help organise table and record-based code.  Each database\ntable can have its own table module defined where you can add custom methods\nfor inserting, selecting or performing other operations on rows in the table.\nSimilarly, every entity type can have its own record module where you can\nadd methods for performing operations on an individual entity instance.  This\nis a lightweight variant of the Active Record pattern.\n\n## Caveat\n\nThis is currently a work in progress loosely based on the Perl\n[Badger::Database](https://github.com/abw/Badger-Database) library.\nIt is being written to help migrate a number of old Perl projects\nto Javascript.\n\nFeel free to use it for your own projects but be warned that\nI wrote it to help me get my own job done.  I don't plan to spend\ntoo much time supporting it, updating it, or adding features that\naren't immediately useful to me.\n\nThat said, it's a simple project totalling around 1,500 lines\nof code.  An experienced Javascript programmer with knowledge of\nSQL should be able to grok the code in an hour or so.  If you're\nhappy to use the source, Luke, then it may be the droids you're looking\nfor.  But if you're looking for a fully-featured, production-ready\nsolution then it might not be for you - there are *plenty* of other\nJavascript ORMs that might be a better place to start.\n\nFor further information please read the\n[manual](https://abw.github.io/badger-database-js/docs/manual/index.html).\n\n## Installation\n\nUse your favourite package manager (we'll assume `npm` in these examples)\nto install `@abw/badger-database` and at least one of the driver modules.\n\n```sh\n    $ npm install @abw/badger-database\n\n    # Then add one of the following:\n    $ npm install pg\n    $ npm install better-sqlite3\n    $ npm install mysql2\n```\n\n## Quick Start\n\nImport the `connect` function from `@abw/badger-database`\nand create a database connection.  This example shows a `sqlite3`\nin-memory database which is ideal for testing.\n\n```js\nconst database = connect({\n  database: 'sqlite:memory',\n})\n```\n\nUse the [run()](https://abw.github.io/badger-database-js/docs/manual/basic_queries.html#run--)\nmethod to run SQL queries.  For example, to create a `users` table:\n\n```js\nawait database.run(`\n  CREATE TABLE users (\n    id INTEGER PRIMARY KEY ASC,\n    name TEXT,\n    email TEXT\n  )`\n)\n```\n\nOr to insert a row of data:\n\n```js\nconst insert = await database.run(\n  'INSERT INTO users (name, email) VALUES (?, ?)',\n  ['Bobby Badger', 'bobby@badgerpower.com']\n);\nconsole.log(\"Inserted ID:\", insert.lastInsertRowid);\n```\n\nUse the [one()](https://abw.github.io/badger-database-js/docs/manual/basic_queries.html#one--)\nmethod to fetch a row of data:\n\n```js\nconst select = await database.one(\n  'SELECT name, email FROM users WHERE email=?',\n  ['bobby@badgerpower.com']\n);\nconsole.log(\"User Name:\", select.name);\n```\n\nDefine named queries and reusable query fragments up front so that you\ndon't have to embed SQL in your application code:\n\n```js\nconst database = connect({\n  database: 'sqlite:memory',\n  fragments: {\n    selectUser: `\n      SELECT name, email\n      FROM users\n    `\n  },\n  queries: {\n    createUsers: `\n      CREATE TABLE users (\n        id INTEGER PRIMARY KEY ASC,\n        name TEXT,\n        email TEXT\n      )`,\n    insertUser: `\n      INSERT INTO users (name, email)\n      VALUES (?, ?)\n    `,\n    selectUserByEmail: `\n      &lt;selectUser&gt;\n      WHERE email=?\n    `,\n    selectUserByName: `\n      &lt;selectUser&gt;\n      WHERE name=?\n    `,\n  }\n})\nawait database.run('createUsers');\nawait database.run(\n  'insertUser',\n  ['Bobby Badger', 'bobby@badgerpower.com']\n);\nconst select1 = await database.one(\n  'selectUserByEmail',\n  ['bobby@badgerpower.com']\n);\nconst select2 = await database.one(\n  'selectUserByName',\n  ['Bobby Badger']\n);\n```\n\nDefine tables to benefit from table-scoped queries and automatically generated\nqueries:\n\n```js\nconst database = connect({\n  database: 'sqlite:memory',\n  tables: {\n    users: {\n      columns: 'id:readonly name:required email:required'\n      queries: {\n        create: `\n          CREATE TABLE users (\n            id INTEGER PRIMARY KEY ASC,\n            name TEXT,\n            email TEXT\n          )`,\n      }\n    }\n  }\n})\nawait users = database.table('users');\nawait users.run('create');\nawait users.insert({\n  name: 'Bobby Badger',\n  email: 'bobby@badgerpower.com',\n});\nconst select = await users.oneRow({\n  email: 'bobby@badgerpower.com'\n});\n```\n\nUse records to perform further operations on rows.\n\n```js\nconst record = await users.oneRecord({\n  email: 'bobby@badgerpower.com'\n});\nawait record.update({\n  name: 'Robert Badger'\n});\nawait record.delete();\n```\n\nYou can also define relations to connect records to related records,\nand define your own custom table and record modules to\nperform custom processing and implement your business logic.\n\nRead the [fine manual](https://abw.github.io/badger-database-js/docs/manual/) for\nfurther information.\n\n# Author\n\nAndy Wardley <abw@wardley.org>\n",
    "longname": "/Users/abw/js/badger-database-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@abw/badger-database\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Javascript database abstraction layer\",\n  \"type\": \"module\",\n  \"main\": \"dist/badger-database.cjs.js\",\n  \"module\": \"dist/badger-database.esm.js\",\n  \"exports\": \"./dist/badger-database.esm.js\",\n  \"author\": \"Andy Wardley\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"dist\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/abw/badger-database-js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/abw/badger-database-js/issues\"\n  },\n  \"scripts\": {\n    \"build\": \"rollup -c\",\n    \"dev\": \"rollup -c -w\",\n    \"lint\": \"eslint 'src/**/*'\",\n    \"docs:build\": \"esdoc\",\n    \"docs:serve\": \"serve docs\",\n    \"test\": \"ava --serial\",\n    \"pretest\": \"pnpm run build\"\n  },\n  \"keywords\": [\n    \"badger\",\n    \"database\",\n    \"sql\"\n  ],\n  \"devDependencies\": {\n    \"@itsjamie/esdoc-cli\": \"^0.5.0\",\n    \"@itsjamie/esdoc-core\": \"^0.5.0\",\n    \"@itsjamie/esdoc-importpath-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-inject-style-plugin\": \"^0.5.0\",\n    \"@itsjamie/esdoc-standard-plugin\": \"^0.5.0\",\n    \"@rollup/plugin-commonjs\": \"^11.0.1\",\n    \"@rollup/plugin-json\": \"^4.1.0\",\n    \"@rollup/plugin-node-resolve\": \"^7.1.3\",\n    \"ava\": \"^4.3.0\",\n    \"better-sqlite3\": \"^7.6.2\",\n    \"dotenv\": \"^16.0.1\",\n    \"eslint\": \"^8.20.0\",\n    \"mysql2\": \"^2.3.3\",\n    \"pg\": \"^8.8.0\",\n    \"rollup\": \"^2\",\n    \"rollup-plugin-terser\": \"^7.0.2\",\n    \"sqlite3\": \"^5.1.1\"\n  },\n  \"dependencies\": {\n    \"@abw/badger\": \"^1.0.8\",\n    \"@abw/badger-utils\": \"^1.0.12\",\n    \"proxymise\": \"^1.0.2\",\n    \"tarn\": \"^3.0.2\"\n  }\n}\n",
    "longname": "/Users/abw/js/badger-database-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# badger-database\n\n<img src=\"./images/badger2.svg\" width=\"300\"/>\n\nThis is the manual for the `badger-database` Javascript module.\n\n* [Installation](manual/installation.html) - installing the library\n* [Connecting](manual/connecting.html) - connecting to a database\n* [Basic Queries](manual/basic_queries.html) - performing basic SQL queries\n* [Named Queries](manual/named_queries.html) - defining named SQL queries for abstraction and reusability\n* [Query Fragments](manual/query_fragments.html) - defining named SQL fragments for embedding into queries\n* [Tables](manual/tables.html) - using tables to automatically generate basic queries\n* [Table Columns](manual/table_columns.html) - defining table columns\n* [Table Methods](manual/table_methods.html) - calling table methods\n* [Table Class](manual/table_class.html) - defining custom table classes\n* [Records](manual/records.html) - using records\n* [Record Methods](manual/record_methods.html) - calling record methods\n* [Record Class](manual/record_class.html) - defining custom record classes\n* [Relations](manual/relations.html) - defining relations between tables\n* [Model](manual/model.html) - accessing database tables in a simpler form\n* [Waiter](manual/waiter.html) - chaining together asynchronous operations\n* [Debugging](manual/debugging.html) - enabling debugging messages\n* [Extending](manual/extending.html) - extending badger-database to add your own functionality\n* [Limitations](manual/limitations.html) - coping with the limitations of badger-database\n\n## NOTE:\n\nI'm in the process of rewriting the library to remove Knex.  These\npages haven't been updated yet and so will be out of date.\n\n* [Database](manual/database.html)\n* [Table](manual/table.html)\n* [Record](manual/record.html)\n* [Model](manual/model.html)\n* [Queries](manual/queries.html)\n\n\nThese manual pages describe some of the internal implementation.\nYou probably don't need to worry about them too much unless you're\nlooking under the hood.\n\n* [Connection](manual/connection.html)\n* [Schema](manual/schema.html)\n* [Tables](manual/tables.html)\n\n# Author\n\n[Andy Wardley](https://github.com/abw)\n",
    "longname": "/Users/abw/js/badger-database-js/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/installation.md",
    "name": "./manual/installation.md",
    "content": "# Installation\n\nUse your favourite package manager to install the module\nfrom `@abw/badger-database`.  You should also install\nat least one of the database driver modules:\n\n* `pg` for Postgres\n* `mysql2` for Mysql\n* `better-sqlite3` for Sqlite.\n\n### npm\n\n    // postgres\n    npm install @abw/badger-database pg\n    // mysql\n    npm install @abw/badger-database mysql2\n    // sqlite\n    npm install @abw/badger-database better-sqlite3\n\n### pnpm\n\n    // postgres\n    pnpm add @abw/badger-database pg\n    // mysql\n    pnpm add @abw/badger-database mysql2\n    // sqlite\n    pnpm add @abw/badger-database better-sqlite\n\n### yarn\n\n    // postgres\n    yarn add @abw/badger-database pg\n    // mysql\n    yarn add @abw/badger-database mysql\n    // sqlite\n    yarn add @abw/badger-database better-sqlite\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/connecting.md",
    "name": "./manual/connecting.md",
    "content": "# Connecting\n\nThe `connect()` function is used to connect to a database.  It is the default\nexport from the `@abw/badger-database` module.\n\n```js\nimport connect from '@abw/badger-database'\n```\n\nYou can also use named imports.\n\n```js\nimport { connect } from '@abw/badger-database'\n```\n\nOr you can use `require()` if you're still using Common JS format.\n\n```js\nconst { connect } = require('@abw/badger-database')\n```\n\n## Connection String\n\nThe simplest way to connect to a database is using a connection string for the\n`database` parameter. This is a concept that should be familiar to Postgres users.\n\n```js\nconst db = await connect({\n  database: 'postgresql://user:password@hostname:5432/database'\n})\n```\n\nInternally we use the slightly shorter name of `postgres` (no `ql` at the end)\nfor the Postgres engine name.  To avoid any chance of confusion, we also support\nthis in the connection string and automatically \"correct\" it for you.\n\n```js\nconst db = await connect({\n  // 'postgres://...' works the same as 'postgresql://...'\n  database: 'postgres://user:password@hostname:5432/database'\n})\n```\n\nYou can use the same connection string format for Mysql databases:\n\n```js\nconst db = await connect({\n  database: 'mysql://user:password@hostname:3306/database'\n})\n```\n\nAnd also for Sqlite databases, although here the only parameter supported\nis the database filename.\n\n```js\nconst db = await connect({\n  database: 'sqlite://database'\n})\n```\n\nFor an in-memory Sqlite database, use `:memory:` as the database name:\n\n```js\nconst db = await connect({\n  database: 'sqlite://:memory:'\n})\n```\n\nOr if you find that a bit clunky, you can use the shortened version:\n\n```js\nconst db = await connect({\n  database: 'sqlite:memory'\n})\n```\n\nMost of the elements are optional for Postgres and Mysql databases.\nHere are the minimal versions which assume the default host (`localhost`),\nport (`3306` for Mysql and `5432` for Postgres) and no username or password.\n\n```js\nconst db = await connect({\n  database: 'postgresql://database'\n})\n```\n\n```js\nconst db = await connect({\n  database: 'mysql://database'\n})\n```\n\n## Connection Parameters\n\nThe connection strings shown in the previous sections are short-hand versions\nfor the more verbose form.  If your connection parameters are stored in a file,\nloaded via an API call, or fetched in some other way then it may be more\nconvenient to use this form.\n\n```js\nconst db = await connect({\n  // \"postgres://badger:s3cr3t@dbhost.com:5433/animals\" is short for:\n  database: {\n    engine:   'postgres',   // or 'postgresql'\n    user:     'badger',\n    password: 's3cr3t',\n    host:     'dbhost.com',\n    port:     '5433',\n    database: 'animals',\n  }\n})\n```\n\nThe same configuration options apply to Mysql.  For Sqlite the only supported\noption is `filename`.\n\n```js\nconst db = await connect({\n  database: {\n    engine:   'sqlite',\n    filename: 'animals.db',\n  }\n})\n```\n\nYou can also use `:memory:` as the `filename` for an in-memory database.\n\n```js\nconst db = await connect({\n  database: {\n    engine:   'sqlite',\n    filename: ':memory:',\n  }\n})\n```\n\n## Connection Parameter Aliases\n\nI don't know about you, but whenever I'm writing the code to connect to a database there's\na good chance I'll get one of the parameter names wrong.  Is it `user` or `username`?\n`pass` or `password`? `host` or `hostname`? `file` or `filename`?\n\nOf course you could google it, but there's no need. You can specify any of the \"incorrect\"\nparameters and we'll automatically fix them for you.\n\nFor example, if you specify `file` instead of `filename` for a Sqlite database, we'll\nsilently correct it.\n\n```js\nconst db = await connect({\n  database: {\n    engine: 'sqlite',\n    file:   'animals.db',   // converted to 'filename'\n  }\n})\n```\n\nThis also just works:\n\n```js\nconst db = await connect({\n  database: {\n    engine:   'postgres',\n    database: 'animals',\n    user:     'badger',\n    pass:     's3cr3t',     // converted to 'password'\n    host:     'dbhost.com',\n    port:     '5433',\n  }\n})\n```\n\nAnd this works too:\n\n```js\nconst db = await connect({\n  database: {\n    engine:   'postgres',\n    database: 'animals',\n    username: 'badger',     // converted to 'user'\n    password: 's3cr3t',\n    hostname: 'dbhost.com', // converted to 'host'\n    port:     '5433',\n  }\n})\n```\n\n## Pool Options\n\nThe Postgres and Mysql database engines use a connection pool for efficiency.\nBy default, the minimum number of connections is 2 and the maximum is 10.  You\ncan change these values using the `pool` option.\n\n```js\nconst db = await connect({\n  database: { ... },\n  pool: {\n    min: 5,\n    max: 20\n  }\n})\n```\n\nThe Sqlite engine uses [better-sqlite3](https://github.com/WiseLibs/better-sqlite3)\nwhich uses synchronous functions.  This is because Sqlite serialises all queries\nand there is nothing to gain (and the potential for problems) by using a connection\npool and/or asynchronous function (for further information about this from the author\nof better-sqlite3, see [here](https://github.com/WiseLibs/better-sqlite3/issues/32)).\n\nAs such, the pool is effectively disabled for Sqlite by setting the `min` and `max`\nvalues to 1.\n\n## Disconnecting\n\nWhen you're finished using the database you should call the `disconnect()` method on\nit.\n\n```js\ndb.disconnect()\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/basic_queries.md",
    "name": "./manual/basic_queries.md",
    "content": "# Basic Queries\n\nIn these examples we'll look at some of the basic functionality of the\nlibrary using a database of users.\n\nThis first example shows how to connect to a database, create a table,\ninsert a row and then fetch it out again.\n\n```js\nimport connect from '@abw/badger-database'\n\nasync function main() {\n  // connect to a Sqlite database\n  const db = await connect({ database: 'sqlite:test.db' });\n\n  // create a table\n  await db.run(\n    `CREATE TABLE users (\n      id    INTEGER PRIMARY KEY ASC,\n      name  TEXT,\n      email TEXT\n    )`\n  );\n\n  // insert a row\n  const insert = await db.run(\n    'INSERT INTO users (name, email) VALUES (?, ?)',\n    ['Bobby Badger', 'bobby@badgerpower.com']\n  );\n  console.log(\"Inserted ID:\", insert.lastInsertRowid);\n\n  // fetch a row\n  const bobby = await db.one(\n    'SELECT * FROM users WHERE email=?',\n    ['bobby@badgerpower.com']\n  );\n  console.log(\"Fetched row:\", bobby);\n\n  // cleanup\n  db.destroy();\n}\n\nmain()\n```\n\nNote that most of the database functions are asynchronous and return\npromises.  In these examples we've wrapped the code in an `async` function\ncalled `main()` so that we can use the `await` keyword to wait for requests\nto complete. You can, of course, use `.then(...)` if you prefer.\n\n```js\nimport connect from '@abw/badger-database'\n\nconnect({ database: 'sqlite:memory' }).then(\n  db => {\n    db.run(\n      `CREATE TABLE users (\n        id    INTEGER PRIMARY KEY ASC,\n        name  TEXT,\n        email TEXT\n      )`\n    ).then(\n      () => db.run(\n        'INSERT INTO users (name, email) VALUES (?, ?)',\n        ['Bobby Badger', 'bobby@badgerpower.com']\n      )\n    ).then(\n      insert => console.log(\"Inserted ID:\", insert.lastInsertRowid)\n    ).then(\n      () => db.one(\n        'SELECT * FROM users WHERE email=?',\n        ['bobby@badgerpower.com']\n      )\n    ).then(\n      bobby => console.log(\"Fetched row:\", bobby)\n    ).then(\n      () => db.destroy()\n    )\n  }\n);\n```\n\n## run(query, values, options)\n\nThe `run()` method is used to execute a query where you're not expecting\nto return any rows from the database.  However, the method does return some\ndata include the number of rows changed, and in the case of `INSERT` queries,\nthe generated id for the record.\n\nDifferent database engines return different values here.  For Sqlite it's\n`changes` for the number of rows affected and `lastInsertRowid` for the id\nof the insert row.  For Mysql it's `affectedRows` and `insertId`.  For\nPostgres it's `rowCount` and if you want to get the id then you must add\n`RETURNING id` to the end of the query.\n\nWe'll see in later examples using `tables` how the badger-database library\nautomatically standardises this response so that you always get back `changes`\nand `id` (or whatever your id column is called) regardless of the database\nengine.  But if you really can't wait until then, the trick is to pass a third\nargument to the `run()` method as an object containing the `sanitizeResult`\nkey set to a `true` value.  Then you will always get back `changes` and `id`\nfor all database engines.\n\n```js\n// insert a row\nconst insert = await db.run(\n  'INSERT INTO users (name, email) VALUES (?, ?)',\n  ['Bobby Badger', 'bobby@badgerpower.com'],\n  { sanitizeResult: true }\n);\nconsole.log(\"Rows changed:\", insert.changes);\nconsole.log(\"Inserted ID:\", insert.id);\n```\n\n## one(query, values, options)\n\nThe `one()` method should be used when you're expecting to fetch *exactly*\none row from the database.  The first argument is an SQL query string.  If\nyou  have any parameters to include in the query then they should be embedded\nin the SQL using placeholders (`?` for Mysql and Sqlite, `$1`, `$2`, `$3`, etc.,\nfor Postgres).  Then pass the parameter values in an array as the second\nargument.\n\n```js\nconst bobby = await db.one(\n  'SELECT * FROM users WHERE email=?',\n  ['bobby@badgerpower.com']\n);\nconsole.log(\"Fetched row:\", bobby);\n```\n\nThe `one()` method will throw an `UnexpectedRowCount` exception if no rows, or\nmore than one row is returned with a message of the form\n`N rows were returned when one was expected`.\n\n## any(query, values, options)\n\nThe `any()` method can be used if you want to get one row which may or may not exist.\n\n```js\nconst bobby = await db.any(\n  'SELECT * FROM users WHERE email=?',\n  ['bobby@badgerpower.com']\n);\nif (bobby) {\n  console.log(\"Fetched row:\", bobby);\n}\nelse {\n  console.log(\"Bobby Badger has gone missing!\");\n}\n```\n\n## all(query, values, options)\n\nThe `all()` method can be used to return multiple rows.\n\n```js\nconst bobbies = await db.all(\n  'SELECT * FROM users WHERE name=?',\n  ['Bobby Badger']\n);\nif (bobbies.length) {\n  console.log(\"Fetched %s users called 'Bobby Badger':\", bobbies.length);\n}\nelse {\n  console.log(\"There aren't any users called 'Bobby Badger'\");\n}\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/named_queries.md",
    "name": "./manual/named_queries.md",
    "content": "# Named Queries\n\nInstead of embedding SQL queries directly into your code, you can\ndefine them as named queries.  This allows you to hide away some of the\ndetails of the database implemenentation so that your application code\ncan be simpler and clearer.\n\nTo keep things simple, this example has all the code in one file,\nwhich isn't really hiding anything at all.  In practice, you would usually\nmove the database definition into a separate module.\n\n```js\nimport connect from '@abw/badger-database'\n\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  queries: {\n    createUsersTable:`\n      CREATE TABLE users (\n        id INTEGER PRIMARY KEY ASC,\n        name TEXT,\n        email TEXT\n      )`,\n    insertUser:\n      'INSERT INTO users (name, email) VALUES (?, ?)',\n    selectUserByEmail:\n      'SELECT * FROM users WHERE email=?'\n  }\n};\n\nasync function main() {\n  // connect to the database\n  const db = await connect(dbConfig);\n\n  // create the users table using a named query\n  await db.run('createUsersTable');\n\n  // insert a row using a named query\n  const insert = await db.run(\n    'insertUser',\n    ['Bobby Badger', 'bobby@badgerpower.com']\n  );\n  console.log(\"Inserted ID:\", insert.lastInsertRowid);\n\n  // fetch a row using a named query\n  const bobby = await db.one(\n    'selectUserByEmail',\n    ['bobby@badgerpower.com']\n  );\n  console.log(\"Fetched row:\", bobby);\n}\n\nmain()\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/query_fragments.md",
    "name": "./manual/query_fragments.md",
    "content": "# Query Fragments\n\nYou might want to define a number of different queries for fetching user\nrows using different search terms.  For example, to select a user by\n`email` or `name`.\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  queries: {\n    selectUserByEmail:\n      'SELECT * FROM users WHERE email=?',\n    selectUserByName:\n      'SELECT * FROM users WHERE name=?'\n  }\n};\n```\n\nTo avoid repetition, you can define named SQL `fragments` that can be embedded\ninto other queries.  Named fragments can be embedded into queries inside angle\nbrackets, e.g. `<fragmentName>`.\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  fragments: {\n    selectUser:\n      'SELECT * FROM users'\n  },\n  queries: {\n    selectUserByEmail:\n      '&lt;selectUser&gt; WHERE email=?',\n    selectUserByName:\n      '&lt;selectUser&gt; WHERE name=?'\n  }\n};\n```\n\nFragments can reference other fragments.  This can be useful when you're building\nmore complex queries, as shown in this somewhat contrived example:\n\n```js\nconst dbConfig = {\n  database: 'sqlite:test.db',\n  fragments: {\n    selectUserCompany:\n      'SELECT users.*, companies.* FROM users',\n    joinUserCompany:\n      'JOIN companies on users.company_id=companies.id',\n    selectEmployee:\n      '&lt;selectUserCompany&gt; &lt;joinUserCompany&gt;',\n  },\n  queries: {\n    selectEmployeeByEmail:\n      '&lt;selectEmployee&gt; WHERE email=?',\n    selectEmployeeByName:\n      '&lt;selectEmployee&gt; WHERE name=?'\n  }\n};\n```\n\nYou can also embed fragments into ad-hoc queries passed to the\n`run()`, `one()`, `any()` and `all()` methods.  For example,\ngiven the above configuration you could write a custom query that\nincludes the `selectEmployee` fragment like so:\n\n```js\nconst badgers = await db.all(\n  '&lt;selectEmployee&gt; WHERE companies.name=?',\n  ['Badgers Inc.']\n);\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/tables.md",
    "name": "./manual/tables.md",
    "content": "# Tables\n\nIt can quickly get tedious if you've got to write lots of different\nqueries for trivial operations like inserting, updating, selecting\nand deleting rows.\n\nIn this example we introduce the concept of `tables`.  This allows you\nto specify the columns in each table and use higher level methods to\nautomatically insert, update, select and delete rows from the table.\n\nNote that we're using the same database from the previous examples\nand assuming that the `users` table has already been created.\n\n```js\n// define the users table and the columns it contains\nconst db = await connect({\n  database: 'sqlite:test.db',\n  tables: {\n    users: {\n      columns: 'id name email'\n    }\n  }\n});\n\n// fetch the users table\nconst users = await db.table('users');\n\n// insert a row\nawait users.insert({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\n\n// update a row\nawait users.update(\n  { name: 'Brian \"The Brains\" Badger' },  // set...\n  { email: 'brian@badgerpower.com' }      // where...\n);\n\n// fetch a row\nconst brian = await users.oneRow({\n  email: 'brian@badgerpower.com'\n});\nconsole.log(brian);\n\n// delete a row\nawait users.delete({\n  email: 'brian@badgerpower.com'\n});\n```\n\nIn the next few sections we'll look at how [table columns](manual/table_columns.html)\nare defined, the [table methods](manual/table_methods.html) that are provided, and how\nto define your own custom [table class](manual/table_class.html) where you can put\nadditional functionality relating to a table.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/table_columns.md",
    "name": "./manual/table_columns.md",
    "content": "# Table Columns\n\nFor simple cases you can define table columns using a whitespace delimited string,\ne.g. `id name email`.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: 'id name email'\n    }\n  }\n});\nconst users = await db.table('users');\n```\n\nYou don't have to include all of the columns in the database table if you don't\nwant to for some reason.  If there are columns that you don't want or need to\naccess from your application code then you can omit them.  Just be warned that\nyou won't be able to access any columns that aren't defined here.\n\nYou can add flags to the column names.  These include `id` to denote the unique\nidentifier (this is optional if the column is already called `id` as we assume\nthat's the default name for the id column), `required` to indicate\nthat a column must be provided when a row is inserted, and `readonly` to indicate\nthat a column cannot be inserted or updated.  Multiple flags can be added, each\nseparated by a colon.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: 'id:readonly name:required email:required'\n    }\n  }\n});\n```\n\nIf you try to insert a row without providing any of the `required` columns\nthen an error will be throw.\n\n```js\n// Throws a ColumnValidationError: 'Missing required column \"email\" for the users table'\nawait users.insert({\n  name: 'Brian Badger',\n});\n```\n\nThe same thing will happen if you try to insert or update a `readonly` column.\n\n```js\n// Throws a ColumnValidationError: 'The \"id\" column is readonly in the users table'\nawait users.insert({\n  id:    999,\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com',\n});\n```\n\nThere may be times when you want to insert rows with pre-defined ids.  That's fine -\nyou don't have to define your id column as being readonly in this case.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: 'id name:required email:required'\n    }\n  }\n});\nconst users = await db.table('users');\n\n// This is fine - id isn't readonly\nawait users.insert({\n  id:    999,\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com',\n});\n```\n\nIf your unique ID column isn't called `id` then you can mark the relevant column\nusing the `id` tag.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: 'user_id:readonly:id name:required email:required'\n    }\n  }\n});\n```\n\nIn the rare cases where you don't have a unique id column and instead you have multiple\nkeys that are used to uniquely identify a row then you can mark them with the `key` tag.\nFor example, you might have an `employee` table which has rows that are uniquely identified\nby the `company_id` and `user_id` columns.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    employees: {\n      columns: 'company_id:key user_id:key job_title'\n    }\n  }\n});\n```\n\nNote that some databases (e.g. Sqlite) will automatically create an `id` for each\nrow regardless.  There certainly are valid cases where you might chose to NOT have\na unique id column in a database but they are generally few and far between.\nSee [this Stack Overflow post](https://stackoverflow.com/questions/1207983/in-general-should-every-table-in-a-database-have-an-identity-field-to-use-as-a) for\nfurther enlightenment.\n\nDefining the columns using a string is a convenient short hand for simpler\ntables.  The more explicit form is to use an object with the column names as\nkeys.  The corresponding values can be strings containing any flags for the\ncolumns, or an empty string if there aren't any.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: {\n        user_id: 'readonly:id',\n        name:    'required',\n        email:   'required',\n        comment: '',\n    }\n  }\n});\n```\n\nOr you can fully expand them like so:\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tables: {\n    users: {\n      columns: {\n        user_id: {\n          readonly: true,\n          id:       true\n        },\n        name: {\n          required: true\n        }\n        email: {\n          required: true\n        }\n        comment: { }\n      }\n    }\n  }\n});\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/table_methods.md",
    "name": "./manual/table_methods.md",
    "content": "# Table Methods\n\nThe table object provides a number of methods for generating and running\nqueries on table rows.\n\nAs per the previous examples, we'll assume the table definition looks\nsomething like this:\n\n```js\n// define the users table and the columns it contains\nconst db = await connect({\n  database: 'sqlite:test.db',\n  tables: {\n    users: {\n      columns: 'id name:required email:required'\n    }\n  }\n});\n\n// fetch the users table\nconst users = await db.table('users');\n```\n\n## insert(data, options)\n\nThe `insert()` method will construct and run an `INSERT` SQL query to insert a\nrow from the column data that you provide.\n\n```js\nconst result = await users.insert({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\nconsole.log('Rows changed:', result.changes);\nconsole.log('Generated id:', result.id);\n```\n\nThe SQL query generated will look like this for Sqlite and Mysql:\n\n```sql\nINSERT INTO users (name, email)\nVALUES (?, ?)\n```\n\nNote the use of value placeholders `?` to prevent SQL injection attacks.\n\nThe format for placeholders in Postgres is slightly different but has the\nexact same effect:\n\n```sql\nINSERT INTO users (name, email)\nVALUES ($1, $2)\n```\n\nThe result returned from the `insert()` method is an object containing the\nnumber of rows affected as `changes` and the generated id, where applicable in\n`id`.  If you have defined a different id field (e.g. `user_id`) then this will\nbe returned instead.  Other data returned by the database engine may also be\ndefined.\n\nYou can insert multiple rows by passing an array of objects to the method.\n\n```js\nconst results = await users.insert([\n  {\n    name:  'Bobby Badger',\n    email: 'bobby@badgerpower.com'\n  },\n  {\n    name:  'Brian Badger',\n    email: 'brian@badgerpower.com'\n  }\n]);\nconsole.log('Generated id #1:', results[0].id )\nconsole.log('Generated id #2:', results[1].id )\n```\n\nThe return value will be an array of results the same as those returned by\ncalling the method to insert a single row.\n\nIn some cases you may want to immediately fetch the inserted row back out of the\ndatabase.  This can be the case when you have columns with default values that\nwill be generated by the database (e.g. a `created` timestamp) that you want to\ninspect.\n\nYou could easily do it yourself - the `insert()` method will return a result containing\nthe generated `id` (or other id field) which you can then use to fetch the record.\nOr even easier, pass a second argument to the method as an object containing the\n`reload` option set to a true value.\n\nAfter inserting a row the table `insert()` method will immediately reload it from the\ndatabase and return the data for the row.\n\n```js\nconst frank = await users.insert(\n  {\n    name:  'Frank Ferret',\n    email: 'frank@ferrets-r-us.com'\n  },\n  { reload: true }\n);\nconsole.log(frank.id);      // e.g. 3\nconsole.log(frank.name);    // Frank Ferret\nconsole.log(frank.email);   // frank@ferrets-r-us.com\n```\n\nThe same thing happens if you insert multiple rows and specify the `reload` options.\nThe only difference is that the return value will be an array of rows.\n\n```js\nconst animals = await users.insert(\n  [\n    {\n      name:  'Frank Ferret',\n      email: 'frank@ferrets-r-us.com'\n    },\n    {\n      name:  'Simon Stoat',\n      email: 'simon@stoats-r-superb.com'\n    },\n  ],\n  { reload: true }\n);\nconsole.log(animals.length);        // 2\nconsole.log(animals[0].id);         // e.g. 4\nconsole.log(animals[0].name);       // Frank Ferret\nconsole.log(animals[0].email);      // frank@ferrets-r-us.com\nconsole.log(animals[1].id);         // e.g. 5\nconsole.log(animals[1].name);       // Simon Stoat\nconsole.log(animals[1].email);      // simon@stoats-r-superb.com\n```\n\nThe other option that is supported by the insert methods is `record`.\nThis will reload the row from the database (as per the `reload` option)\nand return it as a record object.  We'll be talking more about\n[records](manual/records.html) shortly but for now you should know that\nit exists.\n\n```js\nconst frank = await users.insert(\n  {\n    name:  'Frank Ferret',\n    email: 'frank@ferrets-r-us.com'\n  },\n  { record: true }\n);\n// frank is a record object but it still behaves like a row\nconsole.log(frank.id);      // e.g. 3\nconsole.log(frank.name);    // Frank Ferret\nconsole.log(frank.email);   // frank@ferrets-r-us.com\n```\n\n## insertOneRow(data, options)\n\nInternally, the [insert()](#insert-data--options-) method calls either\n`insertAllRows()`, if the value passed is an array, or `insertOneRow()`\nif it's a single data object. You can call these methods directly if you prefer.\n\n```js\nconst result = await users.insertOneRow({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\n```\n\nThe `insertRow()` method is provided as an alias for this method.\n\n## insertAllRows(array, options)\n\nHere's an example explicitly calling the `insertAllRows()` method.  It's exactly the\nsame as calling [insert()](#insert-data--options-) with an array of rows to insert.\n\n```js\nconst results = await users.insertAllRows([\n  {\n    name:  'Frank Ferret',\n    email: 'frank@badgerpower.com'\n  }\n  {\n    name:  'Simon Stoat',\n    email: 'simon@badgerpower.com'\n  }\n]);\n```\n\nThe `insertRows()` method is provided as an alias for this method.\n\n## insertOneRecord(data, options)\n\nThis is a wrapper around the [insertOneRow()](#insertonerow-data--options-)\nwhich automatically sets the `record` option for you.  The result returned\nwill be a record object instead of a result object.\n\n```js\nconst record = await users.insertOneRecord({\n  name:  'Brian Badger',\n  email: 'brian@badgerpower.com'\n});\n// a record object still behaves like a row\nconsole.log(record.name);   // Brian Badger\nconsole.log(record.email);  // brian@badgerpower.com\n```\n\nThe `insertRecord()` method is provided as an alias for this method.\n\n## insertAllRecords(array, options)\n\nThis is a wrapper around the [insertAllRows()](#insertallrows-array--options-)\nwhich automatically sets the `record` option for you.  The result returned\nwill be an array of record objects instead of an array of results.\n\n```js\nconst records = await users.insertAllRecords([\n  {\n    name:  'Bobby Badger',\n    email: 'bobby@badgerpower.com'\n  },\n  {\n    name:  'Brian Badger',\n    email: 'brian@badgerpower.com'\n  }\n]);\n// array of records returned, but they behave like rows\nconsole.log(records.length); // 2\nconsole.log(records[0].name);    // Bobby Badger\nconsole.log(records[0].email);   // bobby@badgerpower.com\nconsole.log(records[1].name);    // Brian Badger\nconsole.log(records[1].email);   // brian@badgerpower.com\n```\n\nThe `insertRecords()` method is provided as an alias for this method.\n\n## update(set, where, options)\n\nThe `update()` method, as the name suggests, allows you to update rows.\n\n```js\nawait users.update(\n  { name: 'Brian \"The Brains\" Badger' },  // SET...\n  { email: 'brian@badgerpower.com' }      // WHERE...\n);\n```\n\nThe first argument is an object containing the changes you want to make.\nThe second optional argument is the `WHERE` clause identifying the rows\nyou want to update.  You can omit the second argument if you want to update\nall rows.\n\nThe SQL generated for the method call shown above will look something like this:\n\n```sql\nUPDATE users\nSET    name=?\nWHERE  email=?\n```\n\nAgain, the format for Postgres is slightly different, using `$1` and `$2` for\nplaceholders instead of `?`, but works exactly the same.\n\nIf you want to use comparison operators (other than the default `=`) in the\n`WHERE` clause then specify the value as an array of `[operator, value]`.\n\nFor example, to update all rows where the email address isn't `brian@badgerpower.com`\n(I know, I know, this is a terrible example), then you could write:\n\n```js\nawait users.update(\n  { name: \"He's not the Messiah, he's a very naughty boy\" },\n  { email: ['!=', 'brian@badgerpower.com'] }\n);\n```\n\nThe SQL generated for this example will look something like this:\n\n```sql\nUPDATE users\nSET    name=?\nWHERE  email!=?\n```\n\nAny single value SQL operator can be used, e.g. `=`, `!=`, `<`, `<=`, `>`, `>=`.\nYou can't use operators that expect lists of values, e.g. `in (...)`.\n\n## updateAllRows(set, where, options)\n\nThe [update()](#update-set--where--options-) method is internally a wrapper\naround `updateAllRows()`.  If you want additional checks to be performed to\nensure that you're only updating one row, or if you want to automatically\nreload a row after an update then you can use the\n[updateOneRow()](#updateonerow-set--where--options-) or\n[updateAnyRow()](#updateanyrow-set--where--options-) methods.\n\nThe `updateRows()` method is provided as an alias for this method.\n\n## updateOneRow(set, where, options)\n\nThis is a variant of the [update()](#update-set--where--options-) /\n[updateAllRows()](#updateallrows-set--where--options-) method that has an\nadditional assertion check that exactly one row is updated.  If zero or more\nrows are updated then an `UnexpectedRowCount` error will be thrown with a\nmessage of the form `N rows were updated when one was expected`.\n\nThis method also supports the `reload` option.  When set, the method will\nautomatically reload the row from the database after performing the update.\nThis can be useful if you've got a column which is automatically set when the\nrecord is updated, e.g. a `modified` column, which you want to inspect.\n\n```js\nconst row = await users.updateOneRow(\n  { name: 'Brian \"The Brains\" Badger' },\n  { email: 'brian@badgerpower.com' },\n  { reload: true }\n);\nconsole.log('updated row:', row);\n```\n\nThe `where` clause defaults to using the equality operator, `=`, but as described\nin the [update()](#update-set--where--options-) method, you can use other comparison\noperators by specifying the value as an an array, e.g. `{ year: ['>', 2000] }`\nto match all records where the `year` is greater than `2000`.\n\nOne thing to note: this uses the modification and selection criteria specified\nto reload the data.  If, for example, you change the email address of a row\nthen it will correctly reload the record using the new email address.\n\n```js\nconst row = await users.updateOneRow(\n  { email: 'brian-badger@badgerpower.com' },\n  { email: 'brian@badgerpower.com' },\n  { reload: true }\n);\nconsole.log('new email address:', row.email); // brian-badger@badgerpower.com\n```\n\nHowever, there are edge cases where it's not possible to reload the same row that\nwas modified, based on the criteria provided.  Consider this somewhat contrived\nexample: if the users table has a `friends` column and there is exactly one record\nwhere the `friends` count is set to `0`.  You feel sorry for the poor user and\ndecide to modify their `friends` count to be `1`.  You'll be their friend, right?\n\n```js\nawait users.updateOneRow(\n  { friends: 1 },\n  { friends: 0 },\n  { reload: true }\n);\n```\n\nWhile there may have been exactly one user with `friends` set to `0` *before*\nthe update, once the update has been applied there may be multiple rows which have\nthe `friends` count set to `1`.  The reload will fail with an `UnexpectedRowCount`\nerror.  In these cases you should always provide some other unique attribute to ensure\nthat the correct row can be identified and reloaded:\n\n```js\nawait users.updateOneRow(\n  { friends: 1 },\n  { email: 'bobby@badger.com' },\n  { reload: true }\n);\n```\n\nThe `updateRow()` method is provided as an alias for this method.\n\n## updateAnyRow(set, where, options)\n\nThis is a variant of the [update()](#update-set--where--options-) /\n[updateAllRows()](#updateallrows-set--where--options-) method that has an\nadditional assertion check that no more than one row is updated.  If more\nthan one rows are updated then an `UnexpectedRowCount` error will be thrown\nwith a message of the form `N rows were updated when one was expected`.\n\nThis also supports the `reload` option.  If a row is updated then the complete\nrow data will be returned.  Otherwise it will return `undefined`.\n\n```js\nconst row = await users.updateAnyRow(\n  { name: 'Brian \"The Brains\" Badger' },\n  { email: 'brian@badgerpower.com' },\n  { reload: true }\n);\nif (row) {\n  console.log(\"updated row:\", row);\n}\nelse {\n  console.log(\"could not update row - Brian not found!\")\n}\n```\n\nYou can also use other comparison operator as per the [update()](#update-set--where--options-)\nmethod, e.g. `{ year: ['>', 2000] }` to match all records where the `year` is greater\nthan `2000`.\n\n## delete(where)\n\nYou can probably guess what the `delete()` method does.\n\n```js\nawait users.delete({\n  email: 'brian@badgerpower.com'\n});\n```\n\nThe object passed as the only argument identifies the rows that you want to delete.\n\nThe SQL generated will look something like this:\n\n```sql\nDELETE FROM users\nWHERE email=?\n```\n\nYou can omit the selection criteria if you want to delete all rows in the table.\n\n```js\nawait users.delete()\n```\n\nNaturally, you should use this method with caution.\n\nYou can also use other comparison operator in the `where` clause, as per the\n[update()](#update-set--where--options-) method, e.g. `{ year: ['>', 2000] }`\nto match all records where the `year` is greater than `2000`.\n\n## oneRow(where, options)\n\nThere are three different methods for fetching rows from the table using\nselection criteria.  The `oneRow()` method will return a single row.\nIf the row isn't found or multiple rows match the criteria then an\n`UnexpectedRowCount` error will be thrown with a message of\nthe form `N rows were returned when one was expected`.\n\n```js\n// returns a single row or throws an error\nconst brian = await users.oneRow({\n  email: 'brian@badgerpower.com'\n});\nconsole.log('Brian:', brian);\n```\n\nThe `where` clause default to using the equality operator, `=`, but like the\n[update()](#update-set--where--options-) and [delete()](#delete-where-) method,\nyou can use other comparison operators, e.g. `{ year: ['>', 2000] }` to match\nall records where the `year` is greater than `2000`.\n\nYou can pass a second argument which can contain various options to modify\nthe selection.  For example, the `columns` option can be used to specify\nthe columns that you want to select.  They can be specified as a string\ncontaining the columns names separated by whitespace:\n\n```js\nconst brian = await users.oneRow(\n  { email: 'brian@badgerpower.com' },\n  { columns: 'id name' }\n);\n```\n\nOr as an array:\n\n```js\nconst brian = await users.oneRow(\n  { email: 'brian@badgerpower.com' },\n  { columns: ['id', 'name'] }\n);\n```\n\nThe `record` option can be specified if you want the data returned as a\n[record](manual/record.html) instead of a row.\n\n```js\nconst brian = await users.oneRow(\n  { email: 'brian@badgerpower.com' },\n  { record: true }\n);\n```\n\nThe generated SQL for this method (and also [anyRow()](#anyrow-where--options-)\nand [allRows()](#allrows-where--options-) will look something like this:\n\n```sql\nSELECT \"users\".\"id\", \"users\".\"name\" FROM users\nWHERE email=?\n```\n\n## anyRow(where, options)\n\nThe `anyRow()` method will return a single row if it exists or `undefined` if it doesn't.\n\n```js\n// returns a single row or undefined\nconst brian = await users.anyRow({\n  email: 'brian@badgerpower.com'\n});\nif (brian) {\n  console.log('Brian:', brian);\n}\nelse {\n  console.log('Brian Badger was not found');\n}\n```\n\nThe `where` clause default to using the equality operator, `=`, but like numerous\nother methods described above, you can use other comparison operators e.g.\n`{ year: ['>', 2000] }` to match all records where the `year` is greater\nthan `2000`.\n\nAs per [oneRow()](#onerow-where--options-) you can pass an additional objects\ncontaining options.  For example, to specify the columns you want returned:\n\n```js\nconst brian = await users.anyRow(\n  { email: 'brian@badgerpower.com' },\n  { columns: 'id email' }\n);\n```\n\nOr to return the row as a record object:\n\n```js\nconst brian = await users.anyRow(\n  { email: 'brian@badgerpower.com' },\n  { record: true }\n);\n```\n\n## allRows(where, options)\n\nThe `allRows()` method will return an array of all matching rows.\n\n```js\n// returns an array of all rows (possibly empty)\nconst bobbies = await users.allRows({\n  { name: 'Bobby Badger' }\n);\nif (bobbies.length) {\n  console.log(\"Fetched %s users called 'Bobby Badger':\", bobbies.length);\n}\nelse {\n  console.log(\"There aren't any users called 'Bobby Badger'\");\n}\n```\n\nIf you want to return all matching rows then you can omit the criteria or\nspecify an empty object.\n\n```js\nconst allUsers = await users.allRows();\n```\n\n```js\nconst allUsers = await users.allRows({ });\n```\n\nIt shouldn't surprise you to learn that you can use other comparison operators\nin the `where` clause, e.g. `{ year: ['>', 2000] }` to match all records where\nthe `year` is greater than `2000`.\n\nAs per [oneRow()](#onerow-where--options-) you can pass an additional objects\ncontaining options.  It supports the `columns` and `record` options.  You can\nalso provide `order` (or `orderBy` if you prefer to use a naming convention as\nclose as possible to the SQL equivalent of `ORDER BY`) to specify the order in\nwhich rows should be returned:\n\n```js\nconst allUsers = await users.allRows(\n  { },  // you can specify selection criteria or use an empty object to fetch all rows\n  { order: 'name DESC' }\n);\n```\n\n## oneRecord(where, options)\n\nThis method is a wrapper around [oneRow()](#onerow-where--options-) which returns\nthe row as a record object.  It effectively sets the `record` option for you.\n\nRead more about records [here](manual/records.html).\n\n## anyRecord(where, options)\n\nThis method is a wrapper around [anyRow()](#anyrow-where--options-) which returns\nthe row as a record object.\n\n## allRecords(where, options)\n\nThis method is a wrapper around [allRows()](#allrows-where--options-) which returns\nthe rows as an array of record objects.\n\n## run(sql, values)\n\nThis is a low-level method for running any arbitrary SQL query where\nyou're not expecting to fetch any rows.  It's just like the\n[run()](manual/basic_queries.html#run-query--values--options-)\nmethod on the database object.  The only difference is that there are\nsome table-specific fragments pre-defined: `table` contains the table\nname and `columns` contains a comma separated list of all column names.\nAny other `fragments` that you've specified in your table definition\nwill also be available.\n\nThe columns have the table name prepended and are property quoted for\nthe database.  For example, a `users` table having columns defined as\n`id name email` will expand the `columns` SQL fragment as\n`\"users\".\"id\", \"users\".\"name\", \"users\".\"email\"` for Sqlite and Postgres.\nFor Mysql the backtick character is used instead of double quotes.\n\nAs a trivial example, you can embed the `table` name in a query like so:\n\n```js\nusers.run('DROP TABLE &lt;table&gt;')\n```\n\n## one(query, values, options)\n\nThis is another low-level method for running an SQL query where you're\nexpecting to get exactly one row returned.  It's just like the\ncorresponding [one()](manual/basic_queries.html#one-query--values--options-)\ndatabase method, with the additional table-specific SQL fragments available, as\nper [run()](#run-query--values--options-).\n\n```js\nconst bobby = users.one(\n  'SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE name=?',\n  ['Bobby Badger']\n)\n```\n\n## any(query, values, options)\n\nThis is yet another low-level method for running an SQL query, but where\nyou're expecting to get one row returned which may or may not exist.\nIt's just like the corresponding\n[any()](manual/basic_queries.html#any-query--values--options-)\ndatabase method, with the additional table-specific SQL fragments available,\nas per [run()](#run-query--values--options-).\n\n```js\nconst bobby = users.any(\n  'SELECT &lt;columns&gt; FROM &lt;table&gt; WHERE name=?',\n  ['Bobby Badger']\n)\n```\n\n## all(query, values, options)\n\nThe final low-level method for running an SQL query where you're expecting to\nget multiple rows.  It's just like the corresponding\n[all()](manual/basic_queries.html#all-query--values--options-)\ndatabase method, with the additional table-specific SQL fragments available, as\nper [run()](#run-query--values--options-).\n\n```js\nconst rows = users.all(\n  'SELECT &lt;columns&gt; FROM &lt;table&gt;',\n)\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/table_class.md",
    "name": "./manual/table_class.md",
    "content": "# Table Class\n\nYou can define your own custom table class for each table in the database.\nThis allows you to add your own methods for performing queries on the table.\nYou should extend the `Table` base class and then define it as the `tableClass`\noption in the table definition.\n\nHere's a complete example.\n\n```js\nimport { connect, Table } from '@abw/badger-database';\n\nexport class Users extends Table {\n  badgers() {\n    // custom method to fetch all badgers\n    return this.allRows({ animal: 'Badger' });\n  }\n}\n\nasync function main() {\n  const db = await connect({\n    database: 'sqlite:memory',\n    tables: {\n      users: {\n        // bind in the custom table class\n        tableClass: Users,\n        // column definitions\n        columns: 'id name email animal',\n        // query definitions\n        queries: {\n          create: `\n            CREATE TABLE users (\n              id     INTEGER PRIMARY KEY ASC,\n              name   TEXT,\n              email  TEXT,\n              animal TEXT\n            )`\n        }\n      },\n    }\n  });\n\n  // fetch users table object\n  const users = await db.table('users');\n\n  // run the 'create' query to create the database table\n  await users.run('create');\n\n  // insert some rows\n  await users.insert([\n    {\n      name:   'Bobby Badger',\n      email:  'bobby@badgerpower.com',\n      animal: 'Badger'\n    },\n    {\n      name:   'Brian Badger',\n      email:  'brian@badgerpower.com',\n      animal: 'Badger'\n    },\n    {\n      name:   'Frankie Ferret',\n      email:  'frank@ferret.com',\n      animal: 'Ferret'\n    }\n  ]);\n\n  // now call the custom badgers() method to fetch all badgers\n  const badgers = await users.badgers();\n\n  console.log(badgers.length);    // 2\n  console.log(badgers[0].name);   // Bobby Badger\n  console.log(badgers[1].name);   // Brian Badger\n}\n\nmain()\n```\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/records.md",
    "name": "./manual/records.md",
    "content": "# Records\n\nVarious  [table methods](manual/table_methods.html) have the option\nto return a record object instead of a plain Javascript data object\ncontaining the row data.  Or, in the case\n[allRecords()](manual/table_methods.html#allrecords-where--options-) and\nsimilar methods, they return an array of record objects.\n\nThe record object implements a lightweight version of the Active Record\npattern.\n\n```js\nconst record = await users.oneRecord(\n  { email: 'bobby@badgerpower.com' }\n);\n```\n\nThe row data loaded from the database is stored in the `row` property.\nYou can access individual items or the row data as a whole.\n\n```js\nconsole.log(record.row.id);      // e.g. 1\nconsole.log(record.row.name);    // Bobby Badger\nconsole.log(record.row.email);   // bobby@badgerpower.com\nconsole.log(record.row);         // { id: 1, name: 'Bobby Badger', etc. }\n```\n\nTechnically speaking, the methods actually return a Proxy object wrapper\naround a record object (or an array of Proxy objects in the case of\n[allRecords()](manual/table_methods.html#allrecords-where--options-) et al).\nThe purpose of the Proxy object, among other things, is to give you access\nto row data items without needing to specify the `.row` property.\n\n```js\nconsole.log(record.id);          // e.g. 1\nconsole.log(record.name);        // Bobby Badger\nconsole.log(record.email);       // bobby@badgerpower.com\n```\n\nThis makes the record object look and feel just like a row of data, but with\nsome extra benefits.  For example, the [update()](manual/record_methods.html#update-set-)\nmethod allows you to update the record and corresponding row in the database.\n\n```js\nawait record.update({ name: 'Robert Badger' });\nconsole.log(record.name); // Robert Badger\n```\n\nThe Proxy object also gives you easy access to [relations](manual/relations.html)\nthat are defined for the table.  For example, if the `users` table defines `orders`\nas a relation then you can access them as `.orders`;\n\n```js\nconst orders = await record.orders;\n```\n\nNote that any other properties or methods defined for the record will take\npriority.  For example, `record.update` will resolve to the record\n[update()](manual/record_methods.html#update--) method so if you have a\ncolumn called `update` then you must access it as `record.row.update`.\n\nIn the next few sections we'll look at the [record methods](manual/record_methods.html)\nthat are provided, and how to define your own custom [record class](manual/record_class.html)\nwhere you can put additional functionality relating to a record.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/record_methods.md",
    "name": "./manual/record_methods.md",
    "content": "# Record Methods\n\nA record object is a wrapper around a row of data from a table.\n\nAs per the previous examples, we'll assume the table definition looks\nsomething like this:\n\n```js\n// define the users table and the columns it contains\nconst db = await connect({\n  database: 'sqlite:test.db',\n  tables: {\n    users: {\n      columns: 'id name:required email:required'\n    }\n  }\n});\n\n// fetch the users table\nconst users = await db.table('users');\n\n// fetch a record from the users table\nconst record = await users.oneRecord({\n  email: 'bobby@badgerpower.com'\n})\n```\n\n## update(set)\n\nThe `update()` method allows you to update any columns in the row that the record\nrepresents.\n\n```js\nawait record.update({\n  name:  'Robert Badger, Esq.',\n  email: 'robert@badgerpower.com'\n})\n```\n\nThe data will be updated in both the database table row and the record object.\nAny other changes in the database row (e.g. a `modified` column that is set to\nthe current timestamp when a record is modified) will also be reflected in the\nrecord.\n\n```js\nconsole.log(record.name);       // Robert Badger, Esq.\n```\n\n## delete()\n\nThe `delete()` method allows you to delete the row in the table represented by\nthe record.\n\n```js\nawait record.delete();\nconsole.log(record.deleted)     // true\n```\n\nAfter deleting the record the `record.deleted` flag will be set `true`.  Any\nattempt to update the record (or delete it again) will throw a `DeletedRecordError`\nwith a message of the form `Cannot update deleted users record #123`.\n\n## relation(name)\n\nThis method allows you to access relations for a table.  Read more on that in\nthe [relations](manual/relations.html) manual page.\n\nFor example, if your `users` table has a `orders` relation defined then you can\naccess the related record(s) like so:\n\n```js\nconst orders = await record.relation('orders');\n```\n\nThe Proxy wrapper also allows you to access it more succinctly as:\n\n```js\nconst orders = await record.orders;\n```\n\n\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/record_class.md",
    "name": "./manual/record_class.md",
    "content": "# Record Class\n\nYou can define your own custom record class for each table in the database.\nThis allows you to add your own methods for performing queries on the record\ndata or other business logic.\n\nYou should extend the `Record` base class and then define it as the `recordClass`\noption in the table definition.\n\nHere's a complete example.\n\n```js\nimport { connect, Record } from '@abw/badger-database';\n\nexport class User extends Record {\n  hello() {\n    return 'Hello ' + this.row.name;\n  }\n}\n\nasync function main() {\n  const db = await connect({\n    database: 'sqlite:memory',\n    tables: {\n      users: {\n        // bind in the custom record class\n        recordClass: User,\n        // column definitions\n        columns: 'id name email animal',\n        // query definitions\n        queries: {\n          create: `\n            CREATE TABLE users (\n              id     INTEGER PRIMARY KEY ASC,\n              name   TEXT,\n              email  TEXT,\n              animal TEXT\n            )`\n        }\n      },\n    }\n  });\n\n  // fetch users table object\n  const users = await db.table('users');\n\n  // run the 'create' query to create the database table\n  await users.run('create');\n\n  // insert a row\n  await users.insert({\n    name:   'Bobby Badger',\n    email:  'bobby@badgerpower.com',\n    animal: 'Badger'\n  });\n\n  // fetch a record\n  const user = await users.oneRecord({\n    email: 'bobby@badgerpower.com'\n  })\n\n  // now call the custom hello() method on the record\n  console.log(user.hello());    // Hello Brian Badger\n}\n\nmain()\n```\n\n## Record Configuration Options\n\nIf you want to pass additional configuration options to the record\nobject then you can define them as the `recordConfig` configuration\noption in the corresponding table configuration.\n\n```js\nconst db = await connect({\n  // ...database, etc.\n  tables: {\n    users: {\n      recordClass: User,\n      recordConfig: {\n        hello: 'Hiya'\n      }\n    },\n  }\n});\n```\n\nThe `recordConfig` parameters will then be available in the record\nobject as `this.config`.  For example, we can rewrite the `hello()`\nmethod to use the configuration value for `hello`:\n\n```js\nexport class User extends Record {\n  hello() {\n    return `${this.config.hello || 'Hello'} ${this.row.name}`;\n  }\n}\n```\n\nNow when the `hello()` method is called on a user record object\na different greeting will be returned:\n\n```js\nconsole.log(user.hello());    // Hiya Brian Badger\n```\n\nIf you want to perform any initialisation of the record then you can override\nthe constructor function.  It is passed three arguments: a reference to the\n`table` object, the `row` of data, and any configuration options.  Make sure\nyou call the `super()` constructor before you do anything else.\n\n```js\nexport class User extends Record {\n  constructor(table, row, config={}) {\n    super(table, row, config);\n    this.greeting = config.hello || 'Hello';\n  }\n  hello() {\n    return `${this.greeting} ${this.row.name}`;\n  }\n}\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/relations.md",
    "name": "./manual/relations.md",
    "content": "# Relations\n\nRelations are, rather unsurprisingly, at the heart of relational databases.\n\nTo demonstrate the concepts we're going to use an overly simple schema for\na music database.  We'll assume that the database tables have already been\ncreated and populated with some sample data.\n\nOne table will store the `artists`.\n\n```sql\nCREATE TABLE artists (\n  id   SERIAL,\n  name TEXT,\n  PRIMARY KEY (id)\n)\n```\n\nAnother will store the albums that they release, including the `year` and `title`.\nNote the `artist_id` which forms a relation to the artist that released the\nalbum.  In this simple example we're going to assume that only one artist can\nrelease an album.  This isn't the case in the real world if you consider things\nlike multi-artist collaborations and compilation albums, but we're just trying\nto demonstrate the basic concepts here, not build the next Spotify.\n\n```sql\nCREATE TABLE albums (\n  id        SERIAL,\n  year      INTEGER,\n  title     TEXT,\n  artist_id INTEGER,\n  PRIMARY KEY (id),\n  FOREIGN KEY (artist_id) REFERENCES artists(id)\n)\n```\n\nA third table will store the tracks on each album, include the track `title`,\nthe `album_id` linking it to the album that it appears on, and the `track_no`\nto indicate it's position in the track listing for the album.  The `bonus`\ncolumn is a boolean value which defaults to false, which is used to indicate\n\"bonus tracks\" that sometime appear on albums.\n\n```sql\nCREATE TABLE tracks (\n  id        SERIAL,\n  title     TEXT,\n  album_id  INTEGER,\n  track_no  INTEGER,\n  bonus     BOOLEAN DEFAULT false,\n  PRIMARY KEY (id),\n  FOREIGN KEY (album_id) REFERENCES albums(id)\n)\n```\n\n## Relation Types\n\nThis example demonstrates two basic relation types: the \"many to one\" relation\nthat exists between artists and albums, and the \"one to many\" relation that\nexists between albums and track.\n\nEach artist can release many albums.  But in this simple example we're assuming\nthat an albums can only be released by one artist.  Therefore this is a \"many\nto one\" relation.\n\nEach album can have many tracks, but each track can only appear on a single album.\nTherefore this is a \"one to many\" relation.\n\n## Defining Table Relations\n\nThe relations for each table should be added to the `tables` configuration\nas the `relations` object.  This is what our main database configuration\nshould look like.\n\n```js\nconst musicdb = connect({\n  database: 'postgres://musicdb',\n  tables: {\n    artists: {\n      columns: 'id name',\n      relations: {\n        albums: {\n          type:  'many',\n          from:  'id',\n          to:    'artist_id',\n          table: 'albums',\n        }\n      }\n    },\n    albums: {\n      columns: 'id year title artist_id',\n      relations: {\n        artist: {\n          type:   'one',\n          from:   'artist_id',\n          to:     'id',\n          table:  'artists',\n        },\n        tracks: {\n          type:   'many',\n          from:   'id',\n          to:     'album_id',\n          table:  'tracks',\n          order:  'track_no',\n        }\n      }\n    }\n    tracks: {\n      columns: 'id title album_id track_no bonus',\n      relations: {\n        album: {\n          type:   'one',\n          from:   'album_id',\n          to:     'id',\n          table:  'albums',\n        },\n      }\n    }\n})\n```\n\nThe `artists` table has an `albums` relation which can include many albums.\nThe relation goes from the `id` column on the `artists` table to the\n`artist_id` column on the `albums` table.\n\n```js\n// tables.artists.relations...\nalbums: {\n  type:  'many',\n  from:  'id',\n  to:    'artist_id',\n  table: 'albums',\n}\n```\n\nThe `albums` table has two relations.  The `artist` relation is one\nartist with the join going from the `artist_id` column on the `albums`\ntable to the `id` column on the `artists` table.  The `tracks` relation\nis many tracks with the join going from the `id` column on the `tracks`\ntable to the `album_id` column on the `albums` table.  The tracks in\nthis relation should be ordered by the `track_no` column.\n\n```js\n// tables.albums.relations...\nartist: {\n  type:   'one',\n  from:   'artist_id',\n  to:     'id',\n  table:  'artists',\n},\ntracks: {\n  type:   'many',\n  from:   'id',\n  to:     'album_id',\n  table:  'tracks',\n  order:  'track_no',\n}\n```\n\nThe `tracks` table has a single relation for the `album` that it appears on.\nThe join goes from the `album_id` column on the `tracks` table to the `id`\ncolumn on the `albums` table.\n\n```js\n// tables.tracks.relations...\nalbum: {\n  type:   'one',\n  from:   'album_id',\n  to:     'id',\n  table:  'albums',\n},\n```\n\n## Fetching Relations\n\nLet's assume we've got Pink Floyd defined as an artist, and their\nseminal albums \"The Dark Side of the Moon\" and \"Wish You Were Here\"\nhave already been added to the database.\n\nWe can start by fetching an artist record for Pink Floyd.\n\n```js\nconst artists = await musicdb.table('artists');\nconst artist = await artists.oneRecord({ name: 'Pink Floyd' });\n```\n\nThe `relation()` method allows us to fetch all related records in\na relation.  The `albums` relation is defined as a `many` type, so\nit returns an array of records from the `albums` table.\n\n```js\nconst albums = await artist.relation('albums');\nconsole.log(albums[0].title);   // The Dark Side of the Moon\nconsole.log(albums[1].title);   // Wish You Were Here\n```\n\nThe record proxy object allows you to simplify this.  If there's a\nrelation defined for a record then you can access it as a property\nof the record.  Just remember that there's actually a method call\nand database access going on behind the scenes so you have to `await`\nthe result.\n\n```js\nconst albums = await artist.albums;\nconsole.log(albums[0].title);   // The Dark Side of the Moon\nconsole.log(albums[1].title);   // Wish You Were Here\n```\n\nWe can take one of those albums and use the `artist` relation\nto fetch the artist that recorded the album.\n\n```js\nconst dsotm = albums[0];\nconst artist = await dsotm.artist;\nconsole.log(artist.name);   // Pink Floyd\n```\n\nWe can also fetch the tracks on the album.  They will be automatically\nordered by the `track_no` column.\n\n```js\nconst tracks = await dsotm.tracks;\nconsole.log(tracks[0].title);  // Speak to Me / Breathe\nconsole.log(tracks[1].title);  // On the Run\nconsole.log(tracks[2].title);  // Time\nconsole.log(tracks[3].title);  // The Great Gig in the Sky\n// ...etc...\n```\n\nAnd finally, we can go the other way and, for a given track,\nwe can fetch the album that it appears on.\n\n```js\nconst time = tracks[2];\nconst album = await time.album;\nconsole.log(album.title);   // The Dark Side of the Moon\n```\n\n## Additional Constraints\n\nAdditional constraints for a relation can be defined using the\n`where` property.\n\nFor example, we might want to define the `tracks` relation\nto only return tracks that aren't bonus tracks, and define a\nnew `bonus_tracks` relations for those that are.\n\n```js\n// tables.albums.relations...\ntracks: {\n  type:   'many',\n  from:   'id',\n  to:     'album_id',\n  table:  'tracks',\n  order:  'track_no',\n  where:  { bonus: 0 }\n},\nbonus_tracks: {\n  type:   'many',\n  from:   'id',\n  to:     'album_id',\n  table:  'tracks',\n  order:  'track_no',\n  where:  { bonus: 1 }\n}\n```\n\nIf your copy of The Dark Side of the Moon has\n\"Us and Them (Richard Wright Demo)\" and \"Money (Roger Waters Demo)\"\nincluded as bonus tracks (you lucky thing!) then you could fetch them\nlike so.  Assuming, of course, that they're in the database and have\nthe `bonus` columns set to `true` (or `1` which databases treat as the\nsame thing).\n\n```js\nconst bonus = await dsotm.bonus_tracks;\nconsole.log(bonus[0].title);  // Us and Them (Richard Wright Demo)\nconsole.log(bonus[1].title);  // Money (Roger Waters Demo)\n```\n\n## Shorthand Syntax for Defining Relations\n\nIf you've got a simple relation then you can define it as a string\nusing the shorthand syntax.  The general format for the `one` relation is:\n\n```js\nfrom -> table.to\n```\n\nFor a `many` relation it uses a \"fat arrow\" instead.\n\n```js\nfrom => table.to\n```\n\nFor example, the `album` relation defined for the `tracks` table looks\nlike this:\n\n```js\n// tables.tracks.relations...\nalbum: {\n  type:   'one',\n  from:   'album_id',\n  to:     'id',\n  table:  'albums',\n},\n```\n\nThat can be shortened to:\n\n```js\nalbum: 'album_id -> albums.id'\n```\n\nSimilarly, the `albums` relation for `artists` can be shortened from\nthis:\n\n```js\n// tables.artists.relations...\nalbums: {\n  type:  'many',\n  table: 'albums',\n  from:  'id',\n  to:    'artist_id',\n}\n```\n\nTo this:\n\n```js\nalbums: 'id => albums.artist_id'\n```\n\nYou can't specify an `order` or additional `where` constraints using this\nsyntax so it really is only for simple cases.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/model.md",
    "name": "./manual/model.md",
    "content": "# Model\n\nThe database `model` property provides a short-hand way to access tables\nin the database model.\n\nGiven a database connection like this:\n\n```js\n// connect to the database\nconst musicdb = await connect({\n  database: 'sqlite:memory',\n  tables: {\n    artists: {\n      columns: 'id name'\n    },\n    // ...etc...\n  }\n});\n```\n\nWe can fetch the `artists` table by calling the `table()` method:\n\n```js\nconst artists = await musicdb.table('artists');\n```\n\nThe database `model` is a proxy that allows you to use the shorthand form.\n\n```js\nconst artists = await musicdb.model.artists;\n```\n\nAdmittedly it doesn't save you much typing, but I find it slightly\neasier to read (and marginally easier to type).",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/waiter.md",
    "name": "./manual/waiter.md",
    "content": "# Waiter\n\nWhen you're at a restaurant it would be a bit tedious if you asked the waiter\nto bring you a steak (or vegetarian/vegan alternative if that's your thing),\nand then when he delivered it to your table, you asked him for some potatoes,\nand then when those came you asked him for some green beans, then some bread,\nbutter, a bottle of wine, and so on.  Each time you wait for one item to arrive\nbefore you order the next.\n\nThe better approach, of course, would be to place your entire order at once\nand then wait for the waiter to bring it.\n\nWriting asynchronous Javascript code can feel a bit like the first scenario\nsometimes.  For example, suppose we've got a music database and we want to load\nthe artist record for \"The Pink Floyd\" (as they were sometimes know in the early\ndays) and change the name to just \"Pink Floyd\".\n\nThe code might look something like this:\n\n```js\n// connect to the database\nconst musicdb = await connect({\n  database: 'sqlite:memory',\n  tables: {\n    artists: {\n      columns: 'id name'\n    },\n    // ...etc...\n  }\n});\n\n// wait for the artists table\nconst artists = await musicdb.model.artists;\n\n// wait to fetch a record\nconst artist = await artists.oneRecord({\n  name: 'The Pink Floyd'\n});\n\n// wait to update the record\nawait artist.update({\n  name: 'Pink Floyd'\n});\n\n// fetch the new artist name\nconst name = artist.name;\n\n// check we got the expected value\nconsole.log(name);    // Pink Floyd\n```\n\nThe database object that is returned from the `connect()` method (which you *do*\nhave to wait for) includes a `waiter` property that allows you to \"place your\nentire order at once\" and then wait for the result.\n\n```js\nconst musicdb = await connect({\n  // as before\n});\nconst name = await musicdb.\n  .waiter       // waiter, please can you fetch...\n  .model        // ...the database model...\n  .artists      // ...which has an artists table...\n  .oneRecord({  // ...containing a record...\n    name: 'The Pink Floyd'\n  })\n  .update({     // ...that we want to update...\n    name: 'Pink Floyd'\n  })\n  .name;        // ...then tell me the new name...\n\nconsole.log(name);   //Pink Floyd\n```\n\nThat's all there is to it.  The `waiter` property contains a\n[proxymise](https://github.com/kozhevnikov/proxymise) wrapper\naround the database.  This allows you to chain together asynchronous\nmethod calls and access data properties in a convenient short-hand\nform.  You just need to `await` the final result.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/debugging.md",
    "name": "./manual/debugging.md",
    "content": "# Debugging\n\nTo enable debugging messages for the database library add the `debug` flag to the\n`connect()` configuration, set to `true`.\n\n```js\nconst db = await connect({\n  database: 'sqlite:memory',\n  debug: true\n})\n```\n\nTo enable debugging for individual tables, add the `debug` flag to the table\nconfiguration.\n\n```js\nconst db = await connect({\n  database: 'sqlite:memory',\n  tables: {\n    users: {\n      columns: 'id name email',\n      debug: true,\n    }\n  }\n})\n```\n\nTo enable debugging for a record object associated with a table, set the `recordConfig`\nfor the table to include the `debug` flag.\n\n```js\nconst db = await connect({\n  database: 'sqlite:memory',\n  tables: {\n    users: {\n      columns: 'id name email',\n      recordConfig: {\n        debug: true\n      }\n    }\n  }\n})\n```\n\nTo enable debugging on a global level (for example, to enable it for all tables,\nrecords, etc.), use the `setDebug` function.  You can set any of the following\nflags to `true` to enable debugging for that component.\n\n```js\nimport { connect, setDebug } from '../src/Utils/Debug.js';\n\nsetDebug({\n  database: true,   // general database queries\n  engine:   true,   // lower level functionality\n  queries:  true,   // query lookup and expansion\n  table:    true,   // table methods\n  record:   true,   // record methods\n})\n```\n\nInside a custom table or record module you can print debugging messages to the console\nusing the `debug()` method.\n\n```js\nexport class User extends Record {\n  helloWorld() {\n    this.debug(\"helloWorld()\");\n    // ...your code goes here...\n  }\n}\n```\n\nYou can use the `debugData()` method to generate debugging messages to display\nthe contents of data items.  This is a useful way to inspect the parameters\npassed to a method.\n\n```js\nexport class User extends Record {\n  helloWorld(message, options) {\n    this.debugData(\"helloWorld()\", { message, options });\n    // ...your code goes here...\n  }\n}\n```\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/extending.md",
    "name": "./manual/extending.md",
    "content": "# Extending\n\n## Custom Tables Class\n\nYou can provide your own implementation of the `Tables` class which\nreturns the configuration options for a table.  For example, you might\nwant to define your tables in JSON or YAML files that are loaded on\ndemand.\n\nThe `table(name)` method is called to fetch the configuration options\nfor a table.  Any pre-defined tables will be stored in `this.tables`.\nYou can return the data from there or implement some other way to\nfetch the configuration options for the table.\n\n```js\nimport { connect, Tables } from '@abw/badger-database'\n\nclass YourTables extends Tables {\n  table(name) {\n    // any pre-defined tables data will be stored in this.tables\n    // or you can fetch it some other way...\n    return this.tables[name] ||= this.yourCustomTableLoader(name);\n  }\n  yourCustomTableLoader(name) {\n    // your code here to load the table definition for the `name` table\n    // return undefined if the table doesn't exist\n    return {\n        // columns, etc.\n    }\n  }\n}\n\nasync function main() {\n  const db = await connect({\n    // ...database, etc...\n    tablesClass: YourTables,\n    tables: {\n        // these tables will be defined in `this.tables` for YourTables\n        users: {\n            columns: 'id name email'\n        }\n    }\n  });\n  const users = await db.table('users');      // returns users defined above\n  const another = await db.table('another');  // calls yourCustomTableLoader('another')\n}\n\nmain();\n```\n\n## Custom Tables Object\n\nYou can instantiate your own `Tables` object and define it as the `tablesObject`\nconfiguration item.  If you have any pre-defined `tables` that you want it to\nmanage then you should pass them as constructor parameters.\n\n```js\nconst db = await connect({\n  // ...database, etc...\n  tablesObject: new YourTables({\n    tables: {\n        // these tables will be defined in `this.table` for YourTables\n        users: {\n            columns: 'id name email'\n        }\n    },\n    // any other configuration options for YourTable\n  })\n});\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/abw/js/badger-database-js/manual/limitations.md",
    "name": "./manual/limitations.md",
    "content": "# Limitations\n\nThe scope of the library is, quite deliberately, limited.\n\nThe table methods to insert, update, select and delete rows,\nfor example, are intended to automate *most* of the trivial queries\nthat you might want to perform, but there will undoubtedly be cases\nwhere they fall short.\n\nYou can't select, update or delete rows using a JOIN onto another\ntable, for example.  Nor can you select rows using subqueries or\ntemporary tables.  Aliases for selecting columns aren't support at\nthe time of writing (although they might be by the time you read this).\n\nSimilarly, the support for relations has some shortcomings.  For example,\nyou can't define many-to-many relations that use intermediate link\ntables (although that might also be something that appears in a later\nversion),\n\nThese are all deliberate design decision.  Supporting everything that\nis possible in SQL would require a full-blown ORM or SQL query generator\nwith all the problems that they bring.\n\nThe library aims to hit the 90/10 sweet spot, where it handles 90% of\ntrivial tasks that can easily be automated, leaving the remaining 10%\n(which would take 90% of the effort) up to you.\n\nInstead, the library makes it easy for you to define named queries and\ncustom table or record methods so that you can use the full power of SQL\nbehind the scenes, without having to embed SQL directly into your\napplication code.\n\nThis approach also makes it easier for the SQL expert in your team (if\nyou have one), to take responsibility for building and maintaining your\ndatabase abstraction layer, allowing other developers to treat it more\nlike a black box, accessing the complex functionality hidden behind the\nscenes through simple method calls.  Even if you don't have an SQL expert,\nthe fact that the library supports and encourages the use of SQL queries\nmakes it easier to cut and paste examples from Stack Overflow without\nhaving to first translate the SQL into the right calls to a query generator.\n\nSQL is powerful.  SQL is portable.  SQL is (nearly always) the solution\nif the library doesn't already do what you want.\n\n\n",
    "static": true,
    "access": "public"
  }
]