import{_ as e,o as a,c as t,a2 as o}from"./chunks/framework.mZNJGiH_.js";const _=JSON.parse('{"title":"Notes","description":"","frontmatter":{},"headers":[],"relativePath":"notes.md","filePath":"notes.md","lastUpdated":1709228065000}'),n={name:"notes.md"},s=o('<h1 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h1><h2 id="naming-case-conventions" tabindex="-1">Naming Case Conventions <a class="header-anchor" href="#naming-case-conventions" aria-label="Permalink to &quot;Naming Case Conventions&quot;">​</a></h2><p>The Javascript convention is to use StudlyCaps for class names (e.g. <code>Artists</code>) and camelCase for methods, function, variables, etc., (e.g. <code>albumTracks</code>).</p><p>When it comes to database table and columns names you might want to adopt the same convention. That&#39;s fine. However, be warned that many databases are case insensitive by default. As a result you might find that the database you&#39;re using returns the data with column names converted to lower case. Most databases have an option to make it case sensitive so you might want to look into that.</p><p>I prefer to avoid the problem altogether by defining my database tables and columns using snake_case (e.g. <code>artists</code>, <code>artist_id</code>, <code>album_tracks</code>, etc). I typically use a number of other programming languages to access the same database in a project and many other languages (e.g. Rust, Perl, Python, PHP, etc.) use snake_case by convention.</p><p>In these examples I&#39;ve adopted this convention because it&#39;s what works for me. It doesn&#39;t bother me that I have to think in snake_case when I&#39;m accessing row data, but camelCase when using method names. In fact, I think it probably helps me to differentiate between &quot;raw&quot; data from the database and code. You may disagree, and of course, you are free to adopt your own convention that does it differently.</p>',6),i=[s];function c(r,d,h,m,l,u){return a(),t("div",null,i)}const b=e(n,[["render",c]]);export{_ as __pageData,b as default};
