import{_ as s,o as a,c as i,a2 as n}from"./chunks/framework.mZNJGiH_.js";const y=JSON.parse('{"title":"Waiter","description":"","frontmatter":{},"headers":[],"relativePath":"waiter.md","filePath":"waiter.md"}'),t={name:"waiter.md"},e=n(`<h1 id="waiter" tabindex="-1">Waiter <a class="header-anchor" href="#waiter" aria-label="Permalink to &quot;Waiter&quot;">​</a></h1><p>When you&#39;re at a restaurant it would be a bit tedious if you asked the waiter to bring you a steak (or vegetarian/vegan alternative if that&#39;s your thing), and then when he delivered it to your table, you asked him for some potatoes, and then when those came you asked him for some green beans, then some bread, butter, a bottle of wine, and so on. Each time you wait for one item to arrive before you order the next.</p><p>The better approach, of course, would be to place your entire order at once and then wait for the waiter to bring it.</p><h2 id="await" tabindex="-1">await <a class="header-anchor" href="#await" aria-label="Permalink to &quot;await&quot;">​</a></h2><p>Writing asynchronous Javascript code can feel a bit like the first scenario sometimes. For example, suppose we&#39;ve got a music database and we want to load the artist record for &quot;The Pink Floyd&quot; (as they were sometimes know in the early days) and change the name to just &quot;Pink Floyd&quot;.</p><p>The code might look something like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// connect to the database</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> musicdb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  database: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sqlite:memory&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  tables: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    artists: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      columns: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id name&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...etc...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wait for the artists table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> artists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> musicdb.model.artists;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wait to fetch a record</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> artist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> artists.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oneRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The Pink Floyd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wait to update the record</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> artist.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pink Floyd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fetch the new artist name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> artist.name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// check we got the expected value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Pink Floyd</span></span></code></pre></div><h2 id="waiter-1" tabindex="-1">waiter <a class="header-anchor" href="#waiter-1" aria-label="Permalink to &quot;waiter&quot;">​</a></h2><p>The database object that is returned from the <code>connect()</code> method includes a <code>waiter</code> property that allows you to &quot;place your entire order at once&quot; and then wait for the result.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> musicdb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // as before</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> musicdb.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .waiter       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// waiter, please can you fetch...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .model        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...the database model...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .artists      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...which has an artists table...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oneRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...containing a record...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;The Pink Floyd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...that we want to update...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pink Floyd&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .name;        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...then tell me the new name...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Pink Floyd</span></span></code></pre></div><p>That&#39;s all there is to it. The <code>waiter</code> property contains a <a href="https://github.com/kozhevnikov/proxymise" target="_blank" rel="noreferrer">proxymise</a> wrapper around the database. This allows you to chain together asynchronous method calls and access data properties in a convenient short-hand form. You just need to <code>await</code> the final result.</p>`,11),h=[e];function l(p,k,r,o,d,E){return a(),i("div",null,h)}const g=s(t,[["render",l]]);export{y as __pageData,g as default};
